<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vue3.0响应式原理]]></title>
    <url>%2F%2Farticles%2FVue3-0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.html</url>
    <content type="text"><![CDATA[10 月 5 日凌晨，Vue.js 框架的作者兼核心开发者尤雨溪公布了尚处于 Pre-Alpha 状态的 Vue 3 源码 https://github.com/vuejs/vue-next 体验首先打开上面源码地址，执行npm install,然后npm run dev或npm run build 上面标红的文件，就是 Vue3.0 预览版生成的文件。 首先感受一下预览版 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt; &lt;script src="./dist/vue.global.js"&gt;&lt;/script&gt; &lt;script &gt; const App = &#123; template: '&#123;&#123;count&#125;&#125;', data() &#123; return &#123; count: 1 &#125; &#125; &#125; let container = document.getElementById('app'); let _proxy = Vue.createApp().mount(App, container); setTimeout(() =&gt; &#123; _proxy.count = 100; console.log(_proxy) &#125;, 1000) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 可以看到数据已经响应式变化,_proxy就是代理响应式数据侦测的对象 Proxy 如何实现响应数据变化Vue3.0 核心操作在 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768//核心基于Proxy//Vue.reactiveconst toProxy = new WeakMap() //存放代理后的对象const toRaw = new WeakMap() //存放代理前的对象//https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap WeakMap详解function trigger() &#123; console.log('触发视图更新')&#125;function isObject(target) &#123; return typeof target === 'object' &amp;&amp; target != null&#125;function reactive(target) &#123; if (!isObject(target)) &#123; return target &#125; if(toProxy.get(target))&#123;//如果代理表中已经存在了，就把当前结果返回 return toProxy.get(target); &#125; if(toRaw.has(target))&#123;//如果对象已被代理过了,就把对象原封不动返回 return target; &#125; const handlers = &#123; //触发的方法 set(target, key, value, receiver) &#123; if (target.hasOwnProperty(key)) &#123; //只有是私有属性时，才会触发更新 trigger() &#125; return Reflect.set(target, key, value, receiver) //https://www.jianshu.com/p/4a5eca0536c3 Reflect详解 &#125;, get(target, key, receiver) &#123; const res = Reflect.get(target, key, receiver) if (isObject(target[key])) &#123; //因为Proxy只能做一层代理，如果子元素还是对象，那么递归继续代理 return reactive(res) &#125; return res &#125;, deleteProprety(target, key) &#123; return Reflect.deleteProprety(target, key) &#125; &#125; let observed = new Proxy(target, handlers) toProxy.set(target, observed) //原对象 ：代理后结果 toRaw.set(observed,target) return observed&#125;let obj = &#123; name: 'yuwangi', ary: [1, 2, 3]&#125;let _proxy = reactive(obj)_proxy.name = 'hahah'console.log(obj)_proxy.ary.push(4);console.log(obj) 运行结果：]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js数组遍历方法及效率测试]]></title>
    <url>%2F%2Farticles%2Fjs%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95%E5%8F%8A%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95.html</url>
    <content type="text"><![CDATA[js 中遍历数组并不会改变原始数组的方法总共有 12 个: 1234ES5： forEach、every 、some、 filter、map、reduce、reduceRight、ES6： find、findIndex、keys、values、entries 方法forEach12345array.forEach(function(currentValue, index, arr), thisValue)// 回调函数的参数 //1. currentValue(必须),数组当前元素的值 //2. index(可选), 当前元素的索引值 //3. arr(可选),数组对象本身 关于 forEach()你要知道： 无法中途退出循环，只能用 return 退出本次回调，进行下一次回调。 它总是返回 undefined 值,即使你 return 了一个值。 12345678910111213let a = [1, 2, , 3]; // 第三个元素是空的，不会遍历(undefined、null会遍历)let obj = &#123; name: "OBKoro1" &#125;;let result = a.forEach(function(value, index, array) &#123; a[3] = "改变元素"; a.push("添加到尾端，不会被遍历"); console.log(value, "forEach传递的第一个参数"); // 分别打印 1 ,2 ,改变元素 console.log(this.name); // OBKoro1 打印三次 this绑定在obj对象上 // break; // break会报错 return value; // return只能结束本次回调 会执行下次回调 console.log("不会执行，因为return 会执行下一次循环回调");&#125;, obj);console.log(result); // 即使return了一个值,也还是返回undefined// 回调函数也接受接头函数写法 every 检测数组所有元素是否都符合判断条件12345array.every(function(currentValue, index, arr), thisValue)// 回调函数的参数 //1. currentValue(必须),数组当前元素的值 //2. index(可选), 当前元素的索引值 //3. arr(可选),数组对象本身 方法返回值规则: 如果数组中检测到有一个元素不满足，则整个表达式返回 false，且剩余的元素不会再进行检测。 如果所有元素都满足条件，则返回 true 12345678function isBigEnough(element, index, array) &#123; return element &gt;= 10; // 判断数组中的所有元素是否都大于10&#125;let result = [12, 5, 8, 130, 44].every(isBigEnough); // falselet result = [12, 54, 18, 130, 44].every(isBigEnough); // true// 接受箭头函数写法[12, 5, 8, 130, 44].every(x =&gt; x &gt;= 10); // false[12, 54, 18, 130, 44].every(x =&gt; x &gt;= 10); // true some 数组中的是否有满足判断条件的元素12345array.some(function(currentValue, index, arr), thisValue)// 回调函数的参数 //1. currentValue(必须),数组当前元素的值 //2. index(可选), 当前元素的索引值 //3. arr(可选),数组对象本身 方法返回值规则： 如果有一个元素满足条件，则表达式返回 true, 剩余的元素不会再执行检测。 如果没有满足条件的元素，则返回 false。 12345function isBigEnough(element, index, array) &#123; return element &gt;= 10; //数组中是否有一个元素大于 10&#125;let result = [2, 5, 8, 1, 4].some(isBigEnough); // falselet result = [12, 5, 8, 1, 4].some(isBigEnough); // true filter 过滤原始数组，返回新数组12345let new_array = arr.filter(function(currentValue, index, arr), thisArg)// 回调函数的参数 //1. currentValue(必须),数组当前元素的值 //2. index(可选), 当前元素的索引值 //3. arr(可选),数组对象本身 12345let a = [32, 33, 16, 40];let result = a.filter(function(value, index, array) &#123; return value &gt;= 18; // 返回a数组中所有大于18的元素&#125;);console.log(result, a); // [32,33,40] [32,33,16,40] map 对数组中的每个元素进行处理，返回新的数组12345let new_array = arr.map(function(currentValue, index, arr), thisArg)// 回调函数的参数 //1. currentValue(必须),数组当前元素的值 //2. index(可选), 当前元素的索引值 //3. arr(可选),数组对象本身 123456let a = ["1", "2", "3", "4"];let result = a.map(function(value, index, array) &#123; return value + "新数组的新元素";&#125;);console.log(result, a);// ["1新数组的新元素","2新数组的新元素","3新数组的新元素","4新数组的新元素"] ["1","2","3","4"] reduce 为数组提供累加器，合并为一个值123456array.reduce(function(total, currentValue, currentIndex, arr), initialValue) // 回调函数的参数 //1. total(必须)，初始值, 或者上一次调用回调返回的值 //2. currentValue(必须),数组当前元素的值 //3. index(可选), 当前元素的索引值 //4. arr(可选),数组对象本身 回调第一次执行时: 如果 initialValue 在调用 reduce 时被提供，那么第一个 total 将等于 initialValue，此时 currentValue 等于数组中的第一个值；如果 initialValue 未被提供，那么 total 等于数组中的第一个值，currentValue 等于数组中的第二个值。此时如果数组为空，那么将抛出 TypeError。如果数组仅有一个元素，并且没有提供 initialValue，或提供了 initialValue 但数组为空，那么回调不会被执行，数组的唯一值将被返回。 12345678// 数组求和let sum = [0, 1, 2, 3].reduce(function(a, b) &#123; return a + b;&#125;, 0);// 6// 将二维数组转化为一维 将数组元素展开let flattened = [[0, 1], [2, 3], [4, 5]].reduce((a, b) =&gt; a.concat(b), []);// [0, 1, 2, 3, 4, 5] reduceRight 从右至左累加这个方法除了与 reduce 执行方向相反外，其他完全与其一致，请参考上述 reduce 方法介绍。 ES6：find()&amp; findIndex() 根据条件找到数组成员find()定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回 undefined。 findIndex()定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。 123456let new_array = arr.find(function(currentValue, index, arr), thisArg)let new_array = arr.findIndex(function(currentValue, index, arr), thisArg)// 回调函数的参数 //1. currentValue(必须),数组当前元素的值 //2. index(可选), 当前元素的索引值 //3. arr(可选),数组对象本身 这两个方法都可以识别 NaN,弥补了 indexOf 的不足. 12345678// findlet a = [1, 4, -5, 10].find(n =&gt; n &lt; 0); // 返回元素-5let b = [1, 4, -5, 10, NaN].find(n =&gt; Object.is(NaN, n)); // 返回元素NaNlet c = [1, 4, -5, 10].find(n =&gt; Object.is(NaN, n)); // 返回undefined// findIndexlet a = [1, 4, -5, 10].findIndex(n =&gt; n &lt; 0); // 返回索引2let b = [1, 4, -5, 10, NaN].findIndex(n =&gt; Object.is(NaN, n)); // 返回索引4let c = [1, 4, -5, 10].findIndex(n =&gt; n &gt; 10); // 返回索引-1 keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值1234567891011121314151617for (let index of ["a", "b"].keys()) &#123; console.log(index);&#125;// 0// 1for (let elem of ["a", "b"].values()) &#123; console.log(elem);&#125;// 'a'// 'b'for (let [index, elem] of ["a", "b"].entries()) &#123; console.log(index, elem);&#125;// 0 "a"// 1 "b" 在 for..of 中如果遍历中途要退出，可以使用 break 退出循环。 如果不使用 for…of 循环，可以手动调用遍历器对象的 next 方法，进行遍历: 效率js 有如下两种数据需要经常遍历 数组(Array) 对象(Object) 同时又提供了如下 8 种方法方便我们遍历元素 for while(或 do~while) forEach for in map every 最终我们将分析遍历效率选出最佳遍历选手. 数组循环1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162var array = [], length = (array.length = 10000000); //(一千万)// for(var i=0;i&lt;length;i++)&#123;// array[i] = 'louis';// &#125;// console.log(array[0]);//-------------------------forvar t1 = +new Date();for (var i = 0; i &lt; length; i++) &#123;&#125;var t2 = +new Date();console.log("for:" + (t2 - t1));//-------------------------do/whilevar t1 = +new Date();var i = 0;do &#123; i++;&#125; while (i &lt; length);var t2 = +new Date();console.log("do while:" + (t2 - t1));//-------------------------forEachvar t1 = +new Date();array.forEach(function(item) &#123;&#125;);var t2 = +new Date();console.log("forEach:" + (t2 - t1));//-------------------------for invar t1 = +new Date();for (var item in array) &#123;&#125;var t2 = +new Date();console.log("for in:" + (t2 - t1));//------------------------- everyvar t1 = +new Date();array.every(() =&gt; &#123;&#125;);var t2 = +new Date();console.log("every" + (t2 - t1));//------------------------- somevar t1 = +new Date();array.some(() =&gt; &#123;&#125;);var t2 = +new Date();console.log("some" + (t2 - t1));//-------------------------mapvar t1 = +new Date();array.map(function(num) &#123;&#125;);var t2 = +new Date();console.log("map:" + (t2 - t1));//-------------------------filtervar t1 = +new Date();array.filter(function(e, i, arr) &#123;&#125;);var t2 = +new Date();console.log("filter:" + (t2 - t1));//-------------------------reducevar t1 = +new Date();array.reduce(function(e, i, arr) &#123;&#125;);var t2 = +new Date();console.log("reduce:" + (t2 - t1)); 所以最终结果 1、for 与 do while 2、forEach map some every filter (这 5 个不相上下,可认为运行速度差不多) 3、for in (多次运行不稳定) 对象循环12345678910111213141516171819202122232425262728293031var array = [], length = (array.length = 10000000); //(一千万)var objects = &#123;&#125;;for (var i = 0; i &lt; array.length; i++) &#123; objects[i] = Math.random();&#125;//-------------------------for invar t1 = +new Date();for (var attr in objects) &#123;&#125;var t2 = +new Date();console.log("for in:" + (t2 - t1));//-------------------------Object.keysvar t1 = +new Date();Object.keys(objects);var t2 = +new Date();console.log("Object.keys" + (t2 - t1));//-------------------------Object.valuesvar t1 = +new Date();Object.values(objects);var t2 = +new Date();console.log("Object.values" + (t2 - t1));//-------------------------Object.getOwnPropertyNamesvar t1 = +new Date();Object.getOwnPropertyNames(objects);var t2 = +new Date();console.log("Object.getOwnPropertyNames" + (t2 - t1)); 结果出乎意料 1、Object.values 2、Object.keys、for in 3、Object.getOwnPropertyNames]]></content>
      <tags>
        <tag>js</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[惰性载入函数]]></title>
    <url>%2F%2Farticles%2F%E6%83%B0%E6%80%A7%E8%BD%BD%E5%85%A5%E5%87%BD%E6%95%B0.html</url>
    <content type="text"><![CDATA[惰性函数表示函数执行的分支只会在函数第一次调用的时候执行，在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，这样任何对原函数的调用就不用再经过执行的分支了。本文将详细介绍惰性函数 使用背景因为各浏览器之间的行为的差异，经常会在函数中包含了大量的 if 语句，以检查浏览器特性，解决不同浏览器的兼容问题。比如，最常见的为 dom 节点添加事件的函数 123456789function addEvent(type, element, fun) &#123; if (element.addEventListener) &#123; element.addEventListener(type, fun, false); &#125; else if (element.attachEvent) &#123; element.attachEvent("on" + type, fun); &#125; else &#123; element["on" + type] = fun; &#125;&#125; 每次调用 addEvent 函数的时候，它都要对浏览器所支持的能力进行检查，首先检查是否支持 addEventListener 方法，如果不支持，再检查是否支持 attachEvent 方法，如果还不支持，就用 dom0 级的方法添加事件 这个过程，在 addEvent 函数每次调用的时候都要走一遍，其实，如果浏览器支持其中的一种方法，那么它就会一直支持了，就没有必要再进行其他分支的检测了。也就是说，if 语句不必每次都执行，代码可以运行的更快一些 解决方案就是惰性载入 函数重写在介绍惰性函数之前，首先介绍函数重写技术。由于一个函数可以返回另一个函数，因此可以用新的函数来覆盖旧的函数 123456function a() &#123; console.log("a"); a = function() &#123; console.log("b"); &#125;;&#125; 这样一来，第一次调用该函数时会 console.log(‘a’)会被执行；全局变量 a 被重定义，并被赋予新的函数。当该函数再次被调用时， console.log(‘b’)会被执行 惰性函数惰性函数的本质就是函数重写。所谓惰性载入，指函数执行的分支只会发生一次，有两种实现惰性载入的方式 第一种是在函数被调用时，再处理函数。函数在第一次调用时，该函数会被覆盖为另外一个按合适方式执行的函数，这样任何对原函数的调用都不用再经过执行的分支了。代码重写如下 12345678910111213141516function addEvent(type, element, fun) &#123; if (element.addEventListener) &#123; addEvent = function(type, element, fun) &#123; element.addEventListener(type, fun, false); &#125;; &#125; else if (element.attachEvent) &#123; addEvent = function(type, element, fun) &#123; element.attachEvent("on" + type, fun); &#125;; &#125; else &#123; addEvent = function(type, element, fun) &#123; element["on" + type] = fun; &#125;; &#125; return addEvent(type, element, fun);&#125; 在这个惰性载入的 addEvent()中，if 语句的每个分支都会为 addEvent 变量赋值，有效覆盖了原函数。最后一步便是调用了新赋函数。下一次调用 addEvent()时，便会直接调用新赋值的函数，这样就不用再执行 if 语句了但是，这种方法有个缺点，如果函数名称有所改变，修改起来比较麻烦 第二种是声明函数时就指定适当的函数。把嗅探浏览器的操作提前到代码加载的时候，在代码加载的时候就立刻进行一次判断，以便让 addEvent 返回一个包裹了正确逻辑的函数 123456789101112131415var addEvent = (function() &#123; if (document.addEventListener) &#123; return function(type, element, fun) &#123; element.addEventListener(type, fun, false); &#125;; &#125; else if (document.attachEvent) &#123; return function(type, element, fun) &#123; element.attachEvent("on" + type, fun); &#125;; &#125; else &#123; return function(type, element, fun) &#123; element["on" + type] = fun; &#125;; &#125;&#125;)(); 惰性函数应用12345678910111213141516171819202122232425262728293031323334function createXHR() &#123; var xhr = null, flag = false, ary = [ function() &#123; return new XMLHttpRequest(); &#125;, function() &#123; return new ActiveXObject("Microsoft.XMLHTTP"); &#125;, function() &#123; return new ActiveXObject("Msxml2.XMLHTTP"); &#125;, function() &#123; return new ActiveXObject("Msxml3.XMLHTTP"); &#125; ]; //循环遍历这个数组，看看数组内的哪一个元素兼容浏览器，如果兼容，就赋值给给xhr，并且返回出去 for (var i = 0, len = ary.length; i &lt; len; i++) &#123; var curFn = ary[i]; try &#123; xhr = curFn(); createXHR = curFn; //重新定义createXHR ,第二次调用ajax请求，则直接使用这个方法 flag = true; break; &#125; catch (e) &#123; //说明浏览器不兼容，继续循环 &#125; &#125; if (!flag) &#123; throw new Error("你的浏览器不支持 ，请升级浏览器"); &#125; return xhr;&#125;]]></content>
      <tags>
        <tag>js</tag>
        <tag>函数</tag>
        <tag>高阶程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue中.sync 修饰符：进行父子组件间相互传递数据]]></title>
    <url>%2F%2Farticles%2FVue%E4%B8%AD-sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6%EF%BC%9A%E8%BF%9B%E8%A1%8C%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9B%B8%E4%BA%92%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE.html</url>
    <content type="text"><![CDATA[.sync 修饰符的作用？允许 prop 进行双向绑定，以 this.$emit(update:PropName,newValue)的模式触发事件。 就是： 1&lt;text-document v-bind:title.sync="doc.title"&gt;&lt;/text-document&gt; 相当于： 1234&lt;text-document v-bind:title="doc.title" v-on:update:title="doc.title = $event"&gt;&lt;/text-document&gt; 以在index.vue下引入childrenOne子组件为例，使用.sync属性，会在mounted生命周期里面 alert 弹出childrenOne，而不是index。 123456789101112131415161718192021222324&lt;template&gt; &lt;div class="vuexWrap common"&gt; &lt;childrenOne :title.sync="doc.title"&gt;&lt;/childrenOne&gt; &lt;/div&gt;&lt;/template&gt;&lt;script type="text/javascript"&gt; import childrenOne from '../../components/childrenOne.vue' export default&#123; data () &#123; return &#123; doc:&#123; title:'index' &#125;, &#125; &#125;, mounted ()&#123; //childrenOne alert(this.doc.title); &#125;, components : &#123; childrenOne &#125; &#125;&lt;/script&gt; 在childrenOne.vue的生命周期 mounted 里面通过this.$emit(&#39;update:title&#39;, this.newTitle);设置title属值 1234567891011121314151617181920&lt;template&gt; &lt;div class="OneWrap common"&gt; &#123;&#123;title&#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script type="text/javascript"&gt; export default&#123; props:&#123; title:"" &#125;, data () &#123; return &#123; newTitle:"childrenOne" &#125; &#125;, mounted ()&#123; this.$emit('update:title', this.newTitle); &#125;, &#125;&lt;/script&gt;]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git开发规范]]></title>
    <url>%2F%2Farticles%2FGit%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.html</url>
    <content type="text"><![CDATA[分支管理 首先master和dev分支设置提交权限，只有项目管理员能提交 开发时在dev分支下拉取最新的代码，建立feature/aaa分支 进入git.code进行merge code view merge到dev分支 release分支 -(预上线分支) dev分支上测试环境 master上正式环境 每个版本打tag 提交规范 feat: 添加新特性 fix: 修复bug docs: 仅仅修改了文档 style: 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑 refactor: 代码重构，没有加新功能或者修复bug perf: 增加代码进行性能测试 test: 增加测试用例 chore: 改变构建流程、或者增加依赖库、工具等 推荐一个git提交规范风格配置 https://www.conventionalcommits.org/en/v1.0.0-beta.4/ 安装 1npm install --save-dev commitizen cz-conventional-changelog @commitlint/cli @commitlint/config-conventional husky standard-version 配置package.json 1234567891011&#123; "scripts": &#123; "commit": "git-cz", "release": "standard-version" &#125;, "husky": &#123; "hooks": &#123; "commit-msg": "commitlint -E HUSKY_GIT_PARAMS" &#125; &#125;,&#125; 项目根新建 commitlint.config.js 123module.exports = &#123; extends: ['@commitlint/config-conventional']&#125;]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue路由守卫与登陆权限控制]]></title>
    <url>%2F%2Farticles%2Fvue%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB%E4%B8%8E%E7%99%BB%E9%99%86%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6.html</url>
    <content type="text"><![CDATA[Vue 路由守卫路由守卫，也可以是路由拦截，我们可以通过路由拦截，来判断用户是否登录，该页面用户是否有权限浏览，需要结合 meta 来实现Vue 中路由守卫一共有三种，一个全局路由守卫，一个是组件内路由守卫，一个是 router 独享守卫 全局路由守卫所谓全局守卫就是所有页面的路由拦截。它有两个钩子 全局前置守卫beforeEach, 全局后置守卫afterEach 全局前置守卫，就是 用户进入页面时路由拦截，进行一些处理的钩子。通常做一些页面权限控制或 title 命名之类的操作。 全局后置守卫，就是 页面成功访问的回调钩子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import Vue from "vue";import VueRouter from "vue-router";// Vue中插件必须use注册Vue.use(VueRouter);// 路由配置项，此处是路由级钩子的定义const routes = [ &#123; path: "/", component: resolve =&gt; require(["./index.vue"], resolve), keepAlive: true &#125;, &#123; path: "/user/:userName", keepAlive: true, beforeEnter(to, from, next) &#123; console.log("router beforeEnter"); next(); &#125;, component: resolve =&gt; require(["./user.vue"], resolve) &#125;];// 实例化路由对象const router = new VueRouter(&#123; routes&#125;);// 全局钩子router.beforeEach((to, from, next) =&gt; &#123; // to: Route: 即将要进入的目标 路由对象 // from: Route: 当前导航正要离开的路由 // next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。 console.log("global beforeEach"); next();&#125;);router.beforeResolve((to, from, next) =&gt; &#123; console.log("global beforeResolve"); next();&#125;);router.afterEach((to, from, next) =&gt; &#123; console.log("global afterEach");&#125;);// 实例化Vue对象并挂载new Vue(&#123; router&#125;).$mount("#app"); 组件独享守卫组件独享守卫是加载组件时定义的一些钩子，有beforeRouteEnter、beforeRouteUpdate和beforeRouteLeave 123456789101112131415161718192021222324252627282930313233343536&lt;template&gt; &lt;div&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;p&gt;我是:&#123;&#123;userName&#125;&#125;&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; name: 'user', data () &#123; return &#123; msg: '这里是 User Page.', userName: 'yuwangi' &#125;; &#125;, methods: &#123;&#125;, mounted () &#123; var me = this; me.userName = me.$route.params.userName; console.log('user mounted.'); &#125;, beforeRouteEnter (to, from, next) &#123;//组件激活 console.log('component beforeRouteEnter'); next(); &#125;, beforeRouteUpdate (to, from, next) &#123;//在当前路由改变，但是该组件被复用时调用 console.log('component beforeRouteUpdate'); next(); &#125;, beforeRouteLeave(to,from,next)&#123;// 导航离开该组件的对应路由时调用 console.log('component beforeRouteLeave'); next(); &#125; &#125;;&lt;/script&gt; 登陆权限控制1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283import Vue from "vue";import Element from "element-ui";import "./assets/eletheme/index.css";import router from "./router/index";import store from "./store/index";import App from "./Index.vue";import NProgress from "vue-nprogress"; //加载进度条// import * as filters from './filters';import * as directives from "./directive";Vue.use(Element, &#123; size: "small" &#125;);Vue.use(NProgress, &#123;&#125;);const nprogress = new NProgress(&#123; parent: ".app-nprogress" &#125;);// // 全局过滤器// Object.keys(filters).forEach(key =&gt; &#123;// Vue.filter(key, filters[key]);// &#125;);// 全局指令Object.keys(directives).forEach(key =&gt; &#123; Vue.directive(key, directives[key]);&#125;);// 路由守卫router.beforeEach((to, from, next) =&gt; &#123; // 时间统计 if (window._Timer) &#123; window._Timer[to.path] = window._Timer.now(); &#125; // 登录或者未登录跳转 const randerPath = isLogin =&gt; &#123; const firstPath = to.path.split("/")[1]; console.log("&gt; isLogin", isLogin); // 未登录操作 if (!isLogin) &#123; if (firstPath !== "login") &#123; // 根目录过来的不添加参数 if (to.fullPath === "/") &#123; next(&#123; path: "/login" &#125;); &#125; else &#123; next(&#123; path: "/login" // query: &#123; redirect: to.fullPath &#125; &#125;); &#125; &#125; else &#123; next(); &#125; &#125; else &#123; if (firstPath === "login") &#123; next("/"); &#125; else &#123; next(); &#125; &#125; &#125;; randerPath(window.serverData.isLogin);&#125;);router.afterEach(to =&gt; &#123; if (window._Timer &amp;&amp; !window._Timer.inited) &#123; const now = parseInt(window._Timer.now() - window._Timer.start, 10); // window.console.log('topath:', to.path); // window.console.timeEnd('firstRouter'); window._Timer.tjTrack("timing", "router", "firstRouter", now); window._Timer.inited = true; &#125;&#125;);// 挂载vue实例const app = new Vue(&#123; router, store, nprogress, ...App&#125;);app.$mount("#App");]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>router</tag>
        <tag>权限控制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[梯子免费上网攻略]]></title>
    <url>%2F%2Farticles%2FSSR%E6%A2%AF%E5%AD%90%E5%85%8D%E8%B4%B9%E4%B8%8A%E7%BD%91%E6%94%BB%E7%95%A5.html</url>
    <content type="text"><![CDATA[本篇文章分享一些科学上网 Shadowsocks、ShadowsocksR、V2Ray、Brook、Goflyway 等代理方式。为了方便访问Google 查阅资料而设，请勿用于任何非法活动（请遵守中国法律）。部分账号信息由网友贡献分享，在此感谢！ 电脑此处只介绍一种chrome浏览器插件setup VPN资源链接: https://pan.baidu.com/s/1gtA3D7DVT180hXP7ViIAUA 提取码: x1y2（如不能使用，请邮件联系） 操作步骤：1、打开chrome浏览器2、工具栏 …3、更多工具4、扩展程序5、把下载下来的资源拖放到窗口6、启用扩展程序7、注册邮箱账号8、点击选用不同国家地区使用 苹果手机苹果手机由于app store限制,无法下载代理软件。特此分享一个免费的美区ID。账号：gd5@jufxf.com，密码：Macziyuan.com2018,禁止将此账号分享给其他人。 1、手机打开设置2、Apple ID、iCloud、iTunes等3、iTunes Store与App Store4、选中Apple ID 退出登陆5、登陆提供的账号6、在app store中搜索Shadowrocket并下载 此处介绍几个免费SSR账号网址https://chenxinbo.com/freehttps://free-ss.site/https://lncn.org/ 使用方法很简单，里面提供了一些ss链接或者二维码，打开下载的软件直接使用即可。 安卓手机直接下载Shadowrocket软件，然后通过前边分享的SSR账号直接使用即可。]]></content>
      <tags>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flex布局详解及实战]]></title>
    <url>%2F%2Farticles%2FFlex%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%AE%9E%E6%88%98.html</url>
    <content type="text"><![CDATA[Flex 布局是什么Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。 任何一个容器都可以指定为 Flex 布局。 123.box&#123; display:flex;&#125; 行内元素也可以使用 Flex 布局。 123.box&#123; display:inline-flex;&#125; 注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。 基本概念采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。 容器的属性 flex-direction flex-wrap flex-flow justify-content align-items align-content flex-direction(方向)flex-direction属性决定主轴的方向（即项目的排列方向）。 123.box &#123; flex-direction: row | row-reverse | column | column-reverse;&#125; row（默认值）：主轴为水平方向，起点在左端。 row-reverse：主轴为水平方向，起点在右端。 column：主轴为垂直方向，起点在上沿。 column-reverse：主轴为垂直方向，起点在下沿。 flex-wrap (换行) 123.box&#123; flex-wrap: nowrap | wrap | wrap-reverse;&#125; nowrap（默认）：不换行。 wrap：换行，第一行在上方。 wrap-reverse：换行，第一行在下方。 flex-flowflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。 123.box &#123; flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;&#125; justify-contentjustify-content属性定义了项目在主轴上的对齐方式。 flex-start（默认值）：左对齐 flex-end：右对齐 center： 居中 space-between：两端对齐，项目之间的间隔都相等。 space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 align-itemsalign-items属性定义项目在交叉轴上如何对齐。 123.box &#123; align-items: flex-start | flex-end | center | baseline | stretch;&#125; flex-start：交叉轴的起点对齐。 flex-end：交叉轴的终点对齐。 center：交叉轴的中点对齐。 baseline: 项目的第一行文字的基线对齐。 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 align-contentalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 123.box &#123; align-content: flex-start | flex-end | center | space-between | space-around | stretch;&#125; flex-start：与交叉轴的起点对齐。 flex-end：与交叉轴的终点对齐。 center：与交叉轴的中点对齐。 space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。 space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 stretch（默认值）：轴线占满整个交叉轴。 项目的属性orderorder属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。 123.item &#123; order: &lt;integer&gt;;//数值&#125; flex-growflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。 flex-shrinkflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小 123.item &#123; flex-shrink: &lt;number&gt;; /* default 1 */&#125; 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。 负值对该属性无效。 flex-basisflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 123.item &#123; flex-basis: &lt;length&gt; | auto; /* default auto */&#125; 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。 flexflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 123.item &#123; flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]&#125; 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。 建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。 align-selfalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 123.item &#123; align-self: auto | flex-start | flex-end | center | baseline | stretch;&#125; Flex练习阮一峰老师做了个骰子练习，那么我也就着手做一个。 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;骰子练习&lt;/title&gt; &lt;style&gt; body,html&#123; background: #ccc; &#125; .box&#123; width: 160px; height: 160px; display: flex; justify-content:center; align-items: center; align-content:space-around; background: #fff; border-radius: 5px; &#125; .item&#123; background: #ff0000; width: 34px; height: 34px; border-radius: 50%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;骰子练习&lt;/title&gt; &lt;style&gt; body,html&#123; background: #ccc; &#125; .box&#123; width: 160px; height: 160px; display: flex; flex-direction:column; /* 纵向排列 */ justify-content:space-around; /* 子元素 间隔相同 */ align-items: center; /* 纵轴居中 */ background: #fff; border-radius: 5px; &#125; .item&#123; background: #ff0000; width: 34px; height: 34px; border-radius: 50%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;骰子练习&lt;/title&gt; &lt;style&gt; body,html&#123; background: #ccc; &#125; .box&#123; width: 160px; height: 160px; display: flex; flex-direction:column; align-items: center; justify-content: space-around; background: #fff; border-radius: 5px; &#125; .item&#123; background: #ff0000; width: 34px; height: 34px; border-radius: 50%; &#125; .item1&#123; align-self: flex-start; justify-content: space-around; &#125; .item2&#123; justify-content: center; align-self: center; &#125; .item3&#123; align-self: flex-end; justify-content: space-around; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt; &lt;div class="item item1"&gt;&lt;/div&gt; &lt;div class="item item2"&gt;&lt;/div&gt; &lt;div class="item item3"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>Flex</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eslint规范]]></title>
    <url>%2F%2Farticles%2FEslint%E8%A7%84%E8%8C%83.html</url>
    <content type="text"><![CDATA[ESLintESLint是一个语法规则和代码风格的检查工具。 问题1、由于javascript是一门弱语言，代码规范不严格，会造成一些问题。 123//有些人习惯加分号，有些人则不加，但在特殊情况下不加会出现语法错误 例如 use strict 、typescriptlet a=0;let b=1 2、编码过后运行在浏览器出现各种报错。 3、在团队git开发合作中，由于VSCode中代码格式化工具繁多，不同工具格式化造成的影响。（此处参照上一篇VSCode配置） 以下规则沿用腾讯AlloyTeam ESLint 规范，而且也是你也可以配置个性化 ESLint 规则安装1npm install --save-dev eslint babel-eslint vue-eslint-parser@5.0.0 eslint-plugin-vue eslint-config-alloy 配置原则我们依据以下三条原则，研读了 ESLint 所有的配置项，定制出了心目中的「完美」ESLint 配置。1、能够帮助发现代码错误的规则，全部开启配置2、不应该依赖于某个具体项目，而应尽可能的合理3、帮助保持团队的代码风格统一，而不是限制开发体验 在你的项目根目录下创建 .eslintrc.js，并将以下内容复制到文件中： 12345678910111213141516171819202122232425module.exports = &#123; extends: [ 'alloy', 'alloy/vue', ], env: &#123; // 这里填入你的项目用到的环境 // 它们预定义了不同环境的全局变量，比如： // // browser: true, // node: true, // mocha: true, // jest: true, // jquery: true &#125;, globals: &#123; // 这里填入你的项目需要的全局变量 // false 表示这个全局变量不允许被重新赋值，比如： // // myGlobal: false &#125;, rules: &#123; // 这里填入你的项目需要的个性化配置 &#125;&#125;; 附件module.exports = &#123; extends: ['./base.js'], rules: &#123; /** * 禁止 for 循环出现方向错误的循环 * @category Possible Errors */ 'for-direction': 'error', /** * getter 必须有返回值，并且禁止返回空 * @category Possible Errors */ 'getter-return': [ 'error', &#123; allowImplicit: false &#125; ], /** * 禁止将 async 函数做为 new Promise 的回调函数 * @category Possible Errors * @reason 出现这种情况时，一般不需要使用 new Promise 实现异步了 */ 'no-async-promise-executor': 'error', /** * 禁止将 await 写在循环里，因为这样就无法同时发送多个异步请求了 * @category Possible Errors * @reason 要求太严格了，有时需要在循环中写 await */ 'no-await-in-loop': 'off', /** * 禁止与负零进行比较 * @category Possible Errors */ 'no-compare-neg-zero': 'error', /** * 禁止在测试表达式中使用赋值语句，除非这个赋值语句被括号包起来了 * @category Possible Errors */ 'no-cond-assign': ['error', 'except-parens'], /** * 禁止使用 console * @category Possible Errors * @reason console 的使用很常见 */ 'no-console': 'off', /** * 禁止将常量作为分支条件判断中的测试表达式，但允许作为循环条件判断中的测试表达式 * @category Possible Errors */ 'no-constant-condition': [ 'error', &#123; checkLoops: false &#125; ], /** * 禁止在正则表达式中出现 Ctrl 键的 ASCII 表示，即禁止使用 /\x1f/ * @category Possible Errors * @reason 几乎不会遇到这种场景 */ 'no-control-regex': 'off', /** * 禁止使用 debugger * @category Possible Errors */ 'no-debugger': 'error', /** * 禁止在函数参数中出现重复名称的参数 * @category Possible Errors * @reason 在编译阶段就会报错了 */ 'no-dupe-args': 'off', /** * 禁止在对象字面量中出现重复名称的键名 * @category Possible Errors */ 'no-dupe-keys': 'error', /** * 禁止在 switch 语句中出现重复测试表达式的 case * @category Possible Errors */ 'no-duplicate-case': 'error', /** * 禁止出现空代码块，允许 catch 为空代码块 * @category Possible Errors */ 'no-empty': [ 'error', &#123; allowEmptyCatch: true &#125; ], /** * 禁止在正则表达式中使用空的字符集 [] * @category Possible Errors */ 'no-empty-character-class': 'error', /** * 禁止将 catch 的第一个参数 error 重新赋值 * @category Possible Errors */ 'no-ex-assign': 'error', /** * 禁止不必要的布尔类型转换，比如 !! 或 Boolean * @category Possible Errors */ 'no-extra-boolean-cast': 'error', /** * 禁止将一个函数声明重新赋值 * @category Possible Errors */ 'no-func-assign': 'error', /** * 禁止在 if 代码块内出现函数声明 * @category Possible Errors */ 'no-inner-declarations': ['error', 'both'], /** * 禁止在 RegExp 构造函数中出现非法的正则表达式 * @category Possible Errors */ 'no-invalid-regexp': 'error', /** * 禁止使用特殊空白符（比如全角空格），除非是出现在字符串、正则表达式或模版字符串中 * @category Possible Errors */ 'no-irregular-whitespace': [ 'error', &#123; skipStrings: true, skipComments: false, skipRegExps: true, skipTemplates: true &#125; ], /** * 禁止正则表达式中使用肉眼无法区分的特殊字符 * @category Possible Errors * @reason 某些特殊字符很难看出差异，最好不要在正则中使用 */ 'no-misleading-character-class': 'error', /** * 禁止将 Math, JSON 或 Reflect 直接作为函数调用 * @category Possible Errors */ 'no-obj-calls': 'error', /** * 禁止使用 hasOwnProperty, isPrototypeOf 或 propertyIsEnumerable * @category Possible Errors * @reason hasOwnProperty 比较常用 */ 'no-prototype-builtins': 'off', /** * 禁止在正则表达式中出现连续的空格，必须使用 /foo &#123;3&#125;bar/ 代替 * @category Possible Errors */ 'no-regex-spaces': 'error', /** * 禁止在数组中出现连续的逗号 * @category Possible Errors */ 'no-sparse-arrays': 'error', /** * 禁止在普通字符串中出现模版字符串里的变量形式 * @category Possible Errors */ 'no-template-curly-in-string': 'error', /** * 禁止在 return, throw, break 或 continue 之后还有代码 * @category Possible Errors */ 'no-unreachable': 'error', /** * 禁止在 finally 中出现 return, throw, break 或 continue * @category Possible Errors * @reason finally 中的语句会在 try 之前执行 */ 'no-unsafe-finally': 'error', /** * 禁止在 in 或 instanceof 操作符的左侧使用感叹号，如 if (!key in object) * @category Possible Errors */ 'no-unsafe-negation': 'error', /** * 禁止将 await 或 yield 的结果做为运算符的后面项 * https://github.com/eslint/eslint/issues/11899 * 在上面 issue 修复之前，关闭此规则 * @category Possible Errors * @reason 这样会导致不符合预期的结果 */ 'require-atomic-updates': 'off', /** * 必须使用 isNaN(foo) 而不是 foo === NaN * @category Possible Errors */ 'use-isnan': 'error', /** * typeof 表达式比较的对象必须是 'undefined', 'object', 'boolean', 'number', 'string', 'function', 'symbol', 或 'bigint' * @category Possible Errors */ 'valid-typeof': 'error', /** * setter 必须有对应的 getter，getter 可以没有对应的 setter * @category Best Practices */ 'accessor-pairs': [ 'error', &#123; setWithoutGet: true, getWithoutSet: false &#125; ], /** * 数组的方法除了 forEach 之外，回调函数必须有返回值 * @category Best Practices */ 'array-callback-return': 'error', /** * 将 var 定义的变量视为块作用域，禁止在块外使用 * @category Best Practices * @reason 已经禁止使用 var 了 */ 'block-scoped-var': 'off', /** * 在类的非静态方法中，必须存在对 this 的引用 * @category Best Practices */ 'class-methods-use-this': 'off', /** * 禁止函数的循环复杂度超过 20 * @category Best Practices * @reason https://en.wikipedia.org/wiki/Cyclomatic_complexity */ complexity: [ 'error', &#123; max: 20 &#125; ], /** * 禁止函数在不同分支返回不同类型的值 * @category Best Practices * @reason 缺少 TypeScript 的支持，类型判断是不准确的 */ 'consistent-return': 'off', /** * switch 语句必须有 default * @category Best Practices */ 'default-case': 'off', /** * 禁止出现 foo['bar']，必须写成 foo.bar * @category Best Practices * @reason 当需要写一系列属性的时候，可以更统一 */ 'dot-notation': 'off', /** * 必须使用 === 或 !==，禁止使用 == 或 != * @category Best Practices */ eqeqeq: ['error', 'always'], /** * for in 内部必须有 hasOwnProperty * @category Best Practices */ 'guard-for-in': 'error', /** * 限制一个文件中类的数量 * @category Best Practices */ 'max-classes-per-file': 'off', /** * 禁止使用 alert * @category Best Practices * @reason alert 很常用 */ 'no-alert': 'off', /** * 禁止使用 caller 或 callee * @category Best Practices * @reason 它们是已废弃的语法 */ 'no-caller': 'error', /** * switch 的 case 内有变量定义的时候，必须使用大括号将 case 内变成一个代码块 * @category Best Practices */ 'no-case-declarations': 'error', /** * 禁止在正则表达式中出现形似除法操作符的开头，如 let a = /=foo/ * @category Best Practices * @reason 有代码高亮的话，在阅读这种代码时，也完全不会产生歧义或理解上的困难 */ 'no-div-regex': 'off', /** * 禁止在 else 内使用 return，必须改为提前结束 * @category Best Practices * @reason else 中使用 return 可以使代码结构更清晰 */ 'no-else-return': 'off', /** * 不允许有空函数 * @category Best Practices * @reason 有时需要将一个空函数设置为某个项的默认值 */ 'no-empty-function': 'off', /** * 禁止解构赋值中出现空 &#123;&#125; 或 [] * @category Best Practices */ 'no-empty-pattern': 'error', /** * 禁止使用 foo == null，必须使用 foo === null * @category Best Practices */ 'no-eq-null': 'error', /** * 禁止使用 eval * @category Best Practices */ 'no-eval': 'error', /** * 禁止修改原生对象 * @category Best Practices * @reason 修改原生对象可能会与将来版本的 js 冲突 */ 'no-extend-native': 'error', /** * 禁止出现没必要的 bind * @category Best Practices */ 'no-extra-bind': 'error', /** * 禁止出现没必要的 label * @category Best Practices * @reason 已经禁止使用 label 了 */ 'no-extra-label': 'off', /** * switch 的 case 内必须有 break, return 或 throw，空的 case 除外 * @category Best Practices */ 'no-fallthrough': 'error', /** * 禁止对全局变量赋值 * @category Best Practices */ 'no-global-assign': 'error', /** * 禁止使用 !! ~ 等难以理解的运算符，仅允许使用 !! * @category Best Practices */ 'no-implicit-coercion': [ 'error', &#123; allow: ['!!'] &#125; ], /** * 禁止在全局作用域下定义变量或申明函数 * @category Best Practices * @reason 模块化之后，不会出现这种在全局作用域下定义变量的情况 */ 'no-implicit-globals': 'off', /** * 禁止在 setTimeout 或 setInterval 中传入字符串 * @category Best Practices */ 'no-implied-eval': 'error', /** * 禁止在类之外的地方使用 this * @category Best Practices * @reason 只允许在 class 中使用 this */ 'no-invalid-this': 'error', /** * 禁止使用 __iterator__ * @category Best Practices * @reason __iterator__ 是一个已废弃的属性 */ 'no-iterator': 'error', /** * 禁止使用 label * @category Best Practices */ 'no-labels': 'error', /** * 禁止使用没必要的 &#123;&#125; 作为代码块 * @category Best Practices */ 'no-lone-blocks': 'error', /** * 禁止在循环内的函数中出现循环体条件语句中定义的变量 * @category Best Practices * @reason 使用 let 就已经解决了这个问题了 */ 'no-loop-func': 'off', /** * 禁止使用 magic numbers * @category Best Practices */ 'no-magic-numbers': 'off', /** * 禁止使用 \ 来换行字符串 * @category Best Practices */ 'no-multi-str': 'error', /** * 禁止直接 new 一个类而不赋值 * @category Best Practices * @reason new 应该作为创建一个类的实例的方法，所以不能不赋值 */ 'no-new': 'error', /** * 禁止使用 new Function * @category Best Practices * @reason 这和 eval 是等价的 */ 'no-new-func': 'error', /** * 禁止使用 new 来生成 String, Number 或 Boolean * @category Best Practices */ 'no-new-wrappers': 'error', /** * 禁止使用 0 开头的数字表示八进制数 * @category Best Practices */ 'no-octal': 'error', /** * 禁止使用八进制的转义符 * @category Best Practices */ 'no-octal-escape': 'error', /** * 禁止对函数的参数重新赋值 * @category Best Practices */ 'no-param-reassign': 'error', /** * 禁止使用 __proto__ * @category Best Practices */ 'no-proto': 'error', /** * 禁止重复定义变量 * @category Best Practices */ 'no-redeclare': 'error', /** * 禁止使用指定的对象属性 * @category Best Practices * @reason 它用于限制某个具体的 api 不能使用 */ 'no-restricted-properties': 'off', /** * 禁止在 return 语句里赋值 * @category Best Practices */ 'no-return-assign': ['error', 'always'], /** * 禁止在 return 语句里使用 await * @category Best Practices */ 'no-return-await': 'error', /** * 禁止出现 location.href = 'javascript:void(0)'; * @category Best Practices * @reason 有些场景下还是需要用到这个 */ 'no-script-url': 'off', /** * 禁止将自己赋值给自己 * @category Best Practices */ 'no-self-assign': 'error', /** * 禁止将自己与自己比较 * @category Best Practices */ 'no-self-compare': 'error', /** * 禁止使用逗号操作符 * @category Best Practices */ 'no-sequences': 'error', /** * 禁止 throw 字面量，必须 throw 一个 Error 对象 * @category Best Practices */ 'no-throw-literal': 'error', /** * 循环内必须对循环条件的变量有修改 * @category Best Practices */ 'no-unmodified-loop-condition': 'error', /** * 禁止无用的表达式 * @category Best Practices */ 'no-unused-expressions': [ 'error', &#123; allowShortCircuit: true, allowTernary: true, allowTaggedTemplates: true &#125; ], /** * 禁止出现没用到的 label * @category Best Practices * @reason 已经禁止使用 label 了 */ 'no-unused-labels': 'off', /** * 禁止出现没必要的 call 或 apply * @category Best Practices */ 'no-useless-call': 'error', /** * 禁止在 catch 中仅仅只是把错误 throw 出去 * @category Best Practices * @reason 这样的 catch 是没有意义的，等价于直接执行 try 里的代码 */ 'no-useless-catch': 'error', /** * 禁止出现没必要的字符串连接 * @category Best Practices */ 'no-useless-concat': 'error', /** * 禁止出现没必要的转义 * @category Best Practices * @reason 转义可以使代码更易懂 */ 'no-useless-escape': 'off', /** * 禁止没必要的 return * @category Best Practices * @reason 没必要限制 return */ 'no-useless-return': 'off', /** * 禁止使用 void * @category Best Practices */ 'no-void': 'error', /** * 禁止注释中出现 TODO 和 FIXME * @category Best Practices * @reason TODO 很常用 */ 'no-warning-comments': 'off', /** * 禁止使用 with * @category Best Practices */ 'no-with': 'error', /** * 使用 ES2018 中的正则表达式命名组 * @category Best Practices * @reason 正则表达式已经较难理解了，没必要强制加上命名组 */ 'prefer-named-capture-group': 'off', /** * Promise 的 reject 中必须传入 Error 对象，而不是字面量 * @category Best Practices */ 'prefer-promise-reject-errors': 'error', /** * parseInt 必须传入第二个参数 * @category Best Practices */ radix: 'error', /** * async 函数中必须存在 await 语句 * @category Best Practices * @reason async function 中没有 await 的写法很常见，koa 的示例中就有这种用法 */ 'require-await': 'off', /** * 正则表达式中必须要加上 u 标志 * @category Best Practices */ 'require-unicode-regexp': 'off', /** * var 必须在作用域的最前面 * @category Best Practices * @reason var 不在最前面也是很常见的用法 */ 'vars-on-top': 'off', /** * 必须使用 if (foo === 5) 而不是 if (5 === foo) * @category Best Practices */ yoda: [ 'error', 'never', &#123; onlyEquality: true &#125; ], /** * 禁止使用 'strict'; * @category Strict Mode */ strict: ['error', 'never'], /** * 变量必须在定义的时候赋值 * @category Variables * @reason 先定义后赋值很常见 */ 'init-declarations': 'off', /** * 禁止使用 delete * @category Variables */ 'no-delete-var': 'error', /** * 禁止 label 名称与定义过的变量重复 * @category Variables * @reason 已经禁止使用 label 了 */ 'no-label-var': 'off', /** * 禁止使用指定的全局变量 * @category Variables * @reason 它用于限制某个具体的变量名不能使用 */ 'no-restricted-globals': 'off', /** * 禁止变量名与上层作用域内的定义过的变量重复 * @category Variables * @reason 很多时候函数的形参和传参是同名的 */ 'no-shadow': 'off', /** * 禁止使用保留字作为变量名 * @category Variables */ 'no-shadow-restricted-names': 'error', /** * 禁止使用未定义的变量 * @category Variables */ 'no-undef': [ 'error', &#123; typeof: false &#125; ], /** * 禁止将 undefined 赋值给变量 * @category Variables */ 'no-undef-init': 'error', /** * 禁止使用 undefined * @category Variables */ 'no-undefined': 'off', /** * 定义过的变量必须使用 * @category Variables */ 'no-unused-vars': [ 'error', &#123; vars: 'all', args: 'none', caughtErrors: 'none', ignoreRestSiblings: true &#125; ], /** * 变量必须先定义后使用 * @category Variables */ 'no-use-before-define': [ 'error', &#123; functions: false, classes: false, variables: false &#125; ], /** * callback 之后必须立即 return * @category Node.js and CommonJS */ 'callback-return': 'off', /** * require 必须在全局作用域下 * @category Node.js and CommonJS * @reason 条件加载很常见 */ 'global-require': 'off', /** * callback 中的 error 必须被处理 * @category Node.js and CommonJS */ 'handle-callback-err': 'error', /** * 禁止直接使用 Buffer * @category Node.js and CommonJS */ 'no-buffer-constructor': 'error', /** * 相同类型的 require 必须放在一起 * @category Node.js and CommonJS */ 'no-mixed-requires': 'off', /** * 禁止直接 new require('foo') * @category Node.js and CommonJS */ 'no-new-require': 'error', /** * 禁止对 __dirname 或 __filename 使用字符串连接 * @category Node.js and CommonJS */ 'no-path-concat': 'error', /** * 禁止使用 process.env.NODE_ENV * @category Node.js and CommonJS * @reason 使用很常见 */ 'no-process-env': 'off', /** * 禁止使用 process.exit(0) * @category Node.js and CommonJS * @reason 使用很常见 */ 'no-process-exit': 'off', /** * 禁止使用指定的模块 * @category Node.js and CommonJS * @reason 它用于限制某个具体的模块不能使用 */ 'no-restricted-modules': 'off', /** * 禁止使用 node 中的同步的方法，比如 fs.readFileSync * @category Node.js and CommonJS * @reason 使用很常见 */ 'no-sync': 'off', /** * 变量名必须是 camelcase 风格的 * @category Stylistic Issues * @reason 很多 api 或文件名都不是 camelcase */ camelcase: 'off', /** * 注释的首字母必须大写 * @category Stylistic Issues */ 'capitalized-comments': 'off', /** * 限制 this 的别名 * @category Stylistic Issues */ 'consistent-this': 'off', /** * 函数赋值给变量的时候，函数名必须与变量名一致 * @category Stylistic Issues */ 'func-name-matching': [ 'error', 'always', &#123; includeCommonJSModuleExports: false &#125; ], /** * 函数必须有名字 * @category Stylistic Issues */ 'func-names': 'off', /** * 必须只使用函数声明或只使用函数表达式 * @category Stylistic Issues */ 'func-style': 'off', /** * 禁止使用指定的标识符 * @category Stylistic Issues * @reason 它用于限制某个具体的标识符不能使用 */ 'id-blacklist': 'off', /** * 限制变量名长度 * @category Stylistic Issues * @reason 没必要限制变量名长度 */ 'id-length': 'off', /** * 限制变量名必须匹配指定的正则表达式 * @category Stylistic Issues * @reason 没必要限制变量名 */ 'id-match': 'off', /** * 单行注释必须写在上一行 * @category Stylistic Issues */ 'line-comment-position': 'off', /** * 类的成员之间是否需要空行 * @category Stylistic Issues * @reason 有时为了紧凑需要挨在一起，有时为了可读性需要空一行 */ 'lines-between-class-members': 'off', /** * 代码块嵌套的深度禁止超过 5 层 * @category Stylistic Issues */ 'max-depth': ['error', 5], /** * 限制一个文件最多的行数 * @category Stylistic Issues */ 'max-lines': 'off', /** * 限制函数块中的代码行数 * @category Stylistic Issues */ 'max-lines-per-function': 'off', /** * 回调函数嵌套禁止超过 3 层，多了请用 async await 替代 * @category Stylistic Issues */ 'max-nested-callbacks': ['error', 3], /** * 函数的参数禁止超过 7 个 * @category Stylistic Issues */ 'max-params': ['error', 7], /** * 限制函数块中的语句数量 * @category Stylistic Issues */ 'max-statements': 'off', /** * 限制一行中的语句数量 * @category Stylistic Issues */ 'max-statements-per-line': 'off', /** * 约束多行注释的格式 * @category Stylistic Issues * @reason 能写注释已经不容易了，不需要限制太多 */ 'multiline-comment-style': 'off', /** * new 后面的类名必须首字母大写 * @category Stylistic Issues */ 'new-cap': [ 'error', &#123; newIsCap: true, capIsNew: false, properties: true &#125; ], /** * 禁止使用 Array 构造函数 * @category Stylistic Issues */ 'no-array-constructor': 'error', /** * 禁止使用位运算 * @category Stylistic Issues * @reason 位运算很常见 */ 'no-bitwise': 'off', /** * 禁止使用 continue * @category Stylistic Issues * @reason continue 很常用 */ 'no-continue': 'off', /** * 禁止在代码后添加内联注释 * @category Stylistic Issues * @reason 内联注释很常用 */ 'no-inline-comments': 'off', /** * 禁止 else 中只有一个单独的 if * @category Stylistic Issues * @reason 单独的 if 可以把逻辑表达的更清楚 */ 'no-lonely-if': 'off', /** * 禁止连续赋值，比如 a = b = c = 5 * @category Stylistic Issues */ 'no-multi-assign': 'off', /** * 禁止 if 里面有否定的表达式 * @category Stylistic Issues * @reason 否定的表达式可以把逻辑表达的更清楚 */ 'no-negated-condition': 'off', /** * 禁止使用嵌套的三元表达式，比如 a ? b : c ? d : e * @category Stylistic Issues */ 'no-nested-ternary': 'off', /** * 禁止直接 new Object * @category Stylistic Issues */ 'no-new-object': 'error', /** * 禁止使用 ++ 或 -- * @category Stylistic Issues */ 'no-plusplus': 'off', /** * 禁止使用特定的语法 * @category Stylistic Issues * @reason 它用于限制某个具体的语法不能使用 */ 'no-restricted-syntax': 'off', /** * 禁止使用三元表达式 * @category Stylistic Issues * @reason 三元表达式很常用 */ 'no-ternary': 'off', /** * 禁止变量名出现下划线 * @category Stylistic Issues * @reason 下划线在变量名中很常用 */ 'no-underscore-dangle': 'off', /** * 必须使用 !a 替代 a ? false : true * @category Stylistic Issues * @reason 后者表达的更清晰 */ 'no-unneeded-ternary': 'off', /** * 禁止变量申明时用逗号一次申明多个 * @category Stylistic Issues */ 'one-var': ['error', 'never'], /** * 必须使用 x = x + y 而不是 x += y * @category Stylistic Issues */ 'operator-assignment': 'off', /** * 限制语句之间的空行规则，比如变量定义完之后必须要空行 * @category Stylistic Issues */ 'padding-line-between-statements': 'off', /** * 使用 ... 而不是 Object.assign * @category Stylistic Issues */ 'prefer-object-spread': 'error', /** * 对象字面量的键名必须排好序 * @category Stylistic Issues */ 'sort-keys': 'off', /** * 变量申明必须排好序 * @category Stylistic Issues */ 'sort-vars': 'off', /** * 注释的斜线或 * 后必须有空格 * @category Stylistic Issues */ 'spaced-comment': [ 'error', 'always', &#123; block: &#123; exceptions: ['*'], balanced: true &#125; &#125; ], /** * constructor 中必须有 super * @category ECMAScript 6 */ 'constructor-super': 'error', /** * 禁止对定义过的 class 重新赋值 * @category ECMAScript 6 */ 'no-class-assign': 'error', /** * 禁止对使用 const 定义的常量重新赋值 * @category ECMAScript 6 */ 'no-const-assign': 'error', /** * 禁止重复定义类 * @category ECMAScript 6 */ 'no-dupe-class-members': 'error', /** * 禁止重复导入模块 * @category ECMAScript 6 */ 'no-duplicate-imports': 'error', /** * 禁止使用 new 来生成 Symbol * @category ECMAScript 6 */ 'no-new-symbol': 'error', /** * 禁止导入指定的模块 * @category ECMAScript 6 * @reason 它用于限制某个具体的模块不能使用 */ 'no-restricted-imports': 'off', /** * 禁止在 super 被调用之前使用 this 或 super * @category ECMAScript 6 */ 'no-this-before-super': 'error', /** * 禁止出现没必要的计算键名，比如 let a = &#123; ['0']: 0 &#125;; * @category ECMAScript 6 */ 'no-useless-computed-key': 'error', /** * 禁止出现没必要的 constructor，比如 constructor(value) &#123; super(value) &#125; * @category ECMAScript 6 */ 'no-useless-constructor': 'error', /** * 禁止解构赋值时出现同样名字的的重命名，比如 let &#123; foo: foo &#125; = bar; * @category ECMAScript 6 */ 'no-useless-rename': 'error', /** * 禁止使用 var * @category ECMAScript 6 */ 'no-var': 'error', /** * 必须使用 a = &#123;b&#125; 而不是 a = &#123;b: b&#125; * @category ECMAScript 6 * @reason 没必要强制要求 */ 'object-shorthand': 'off', /** * 申明后不再被修改的变量必须使用 const 来申明 * @category ECMAScript 6 * @reason 没必要强制要求 */ 'prefer-const': 'off', /** * 必须使用解构赋值 * @category ECMAScript 6 */ 'prefer-destructuring': 'off', /** * 必须使用 0b11111011 而不是 parseInt('111110111', 2) * @category ECMAScript 6 * @reason 没必要强制要求 */ 'prefer-numeric-literals': 'off', /** * 必须使用 ...args 而不是 arguments * @category ECMAScript 6 * @reason 没必要强制要求 */ 'prefer-rest-params': 'off', /** * 必须使用 ... 而不是 apply，比如 foo(...args) * @category ECMAScript 6 * @reason apply 很常用 */ 'prefer-spread': 'off', /** * 必须使用模版字符串而不是字符串连接 * @category ECMAScript 6 * @reason 字符串连接很常用 */ 'prefer-template': 'off', /** * generator 函数内必须有 yield * @category ECMAScript 6 */ 'require-yield': 'error', /** * 导入必须按规则排序 * @category ECMAScript 6 * @reason 没必要强制要求 */ 'sort-imports': 'off', /** * 创建 Symbol 时必须传入参数 * @category ECMAScript 6 */ 'symbol-description': 'error' &#125;&#125;; VUE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304module.exports = &#123; parser: 'vue-eslint-parser', parserOptions: &#123; // 设置 js 的解析器为 babel-eslint // https://github.com/mysticatea/vue-eslint-parser#-options parser: 'babel-eslint', ecmaVersion: 2019, // ECMAScript modules 模式 sourceType: 'module', ecmaFeatures: &#123; // 不允许 return 语句出现在 global 环境下 globalReturn: false, // 开启全局 script 模式 impliedStrict: true, jsx: true &#125;, // 即使没有 babelrc 配置文件，也使用 babel-eslint 来解析 requireConfigFile: false, // 仅允许 import export 语句出现在模块的顶层 allowImportExportEverywhere: false &#125;, plugins: ['vue'], rules: &#123; /** * 支持在模版中使用 eslint-disable-next-line 等注释 * @category Enabling Correct ESLint Parsing */ 'vue/comment-directive': 'error', /** * 定义了的 jsx element 必须使用 * @category Enabling Correct ESLint Parsing */ 'vue/jsx-uses-vars': 'error', /** * 计算属性禁止包含异步方法 * @category Error Prevention */ 'vue/no-async-in-computed-properties': 'error', /** * 禁止重复的二级键名 * @category Error Prevention */ 'vue/no-dupe-keys': 'off', /** * 禁止出现重复的属性 * @category Error Prevention */ 'vue/no-duplicate-attributes': 'error', /** * 禁止出现语法错误 * @category Error Prevention */ 'vue/no-parsing-error': 'error', /** * 禁止覆盖保留字 * @category Error Prevention */ 'vue/no-reserved-keys': 'error', /** * 组件的 data 属性的值必须是一个函数 * @category Error Prevention */ 'vue/no-shared-component-data': 'off', /** * 禁止在计算属性中对属性修改 * @category Error Prevention */ 'vue/no-side-effects-in-computed-properties': 'off', /** * 禁止 &lt;template&gt; 使用 key 属性 * @category Error Prevention */ 'vue/no-template-key': 'off', /** * 禁止在 &lt;textarea&gt; 中出现 &#123;&#123;message&#125;&#125; * @category Error Prevention */ 'vue/no-textarea-mustache': 'error', /** * 禁止定义在 components 中的组件未使用 * @category Error Prevention */ 'vue/no-unused-components': 'error', /** * 禁止模版中定义的变量未使用 * @category Error Prevention */ 'vue/no-unused-vars': 'error', /** * 禁止在同一个元素上使用 v-if 和 v-for 指令 * @category Error Prevention */ 'vue/no-use-v-if-with-v-for': 'error', /** * &lt;component&gt; 必须有 v-bind:is * @category Error Prevention */ 'vue/require-component-is': 'error', /** * props 的取值必须是构造函数 * @category Error Prevention */ 'vue/require-prop-type-constructor': 'error', /** * render 函数必须有返回值 * @category Error Prevention */ 'vue/require-render-return': 'error', /** * v-for 指令的元素必须有 v-bind:key * @category Error Prevention */ 'vue/require-v-for-key': 'error', /** * prop 的默认值必须匹配它的类型 * @category Error Prevention */ 'vue/require-valid-default-prop': 'off', /** * 计算属性必须有返回值 * @category Error Prevention */ 'vue/return-in-computed-property': 'error', /** * 当一个节点上出现两个 v-on:click 时，其中一个必须为 exact * @category Error Prevention */ 'vue/use-v-on-exact': 'error', /** * template 的根节点必须合法 * @category Error Prevention */ 'vue/valid-template-root': 'error', /** * v-bind 指令必须合法 * @category Error Prevention */ 'vue/valid-v-bind': 'error', /** * v-cloak 指令必须合法 * @category Error Prevention */ 'vue/valid-v-cloak': 'error', /** * v-else 指令必须合法 * @category Error Prevention */ 'vue/valid-v-else': 'error', /** * v-else-if 指令必须合法 * @category Error Prevention */ 'vue/valid-v-else-if': 'error', /** * v-for 指令必须合法 * @category Error Prevention */ 'vue/valid-v-for': 'error', /** * v-html 指令必须合法 * @category Error Prevention */ 'vue/valid-v-html': 'error', /** * v-if 指令必须合法 * @category Error Prevention */ 'vue/valid-v-if': 'error', /** * v-model 指令必须合法 * @category Error Prevention */ 'vue/valid-v-model': 'error', /** * v-on 指令必须合法 * @category Error Prevention */ 'vue/valid-v-on': 'error', /** * v-once 指令必须合法 * @category Error Prevention */ 'vue/valid-v-once': 'error', /** * v-pre 指令必须合法 * @category Error Prevention */ 'vue/valid-v-pre': 'error', /** * v-show 指令必须合法 * @category Error Prevention */ 'vue/valid-v-show': 'error', /** * v-text 指令必须合法 * @category Error Prevention */ 'vue/valid-v-text': 'error', /** * 限制自定义组件的属性风格 * @category Improving Readability */ 'vue/attribute-hyphenation': 'off', /** * 限制组件的 name 属性的值的风格 * @category Improving Readability */ 'vue/name-property-casing': 'off', /** * 模版中的变量名禁止与前一个作用域重名 * @category Improving Readability */ 'vue/no-template-shadow': 'off', /** * props 必须用驼峰式 * @category Improving Readability */ 'vue/prop-name-casing': 'off', /** * props 如果不是 required 的字段，必须有默认值 * @category Improving Readability */ 'vue/require-default-prop': 'error', /** * prop 必须有类型限制 * @category Improving Readability */ 'vue/require-prop-types': 'off', /** * 限制 v-bind 的风格 * @category Improving Readability */ 'vue/v-bind-style': 'off', /** * 限制 v-on 的风格 * @category Improving Readability */ 'vue/v-on-style': 'off', /** * 标签属性必须按规则排序 * @category Minimizing Arbitrary Choices and Cognitive Overhead */ 'vue/attributes-order': 'error', /** * 禁用 v-html * @category Minimizing Arbitrary Choices and Cognitive Overhead */ 'vue/no-v-html': 'off', /** * 组件的属性必须为一定的顺序 * @category Minimizing Arbitrary Choices and Cognitive Overhead */ 'vue/order-in-components': 'error', /** * 禁止在模版中用 this * @category Minimizing Arbitrary Choices and Cognitive Overhead */ 'vue/this-in-template': 'error', /** * 变量名必须是 camelcase 风格的 * @category Uncategorized * @reason 很多 api 或文件名都不是 camelcase */ 'vue/camelcase': 'off', /** * 对象的最后一个属性末尾必须有逗号 * @category Uncategorized */ 'vue/comma-dangle': 'off', /** * 必须使用 === 或 !==，禁止使用 == 或 != * @category Uncategorized */ 'vue/eqeqeq': ['error', 'always'], /** * 组件名称必须和文件名一致 * @category Uncategorized */ 'vue/match-component-file-name': 'off', /** * 禁止给布尔值 props 添加默认值 * @category Uncategorized */ 'vue/no-boolean-default': 'off', /** * 禁止使用特定的语法 * @category Uncategorized * @reason 它用于限制某个具体的语法不能使用 */ 'vue/no-restricted-syntax': 'off', /** * 禁止手动 export default * @category Uncateg![f4f1ea73165f6d9a15adb99b02ed7cc4.png](en-resource://database/1004:1) orized */ 'vue/require-direct-export': 'error', /** * 禁止在 v-on 的值中调用函数 * @category Uncategorized */ 'vue/v-on-function-call': 'error' &#125;&#125;;]]></content>
      <tags>
        <tag>Eslint</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode配置]]></title>
    <url>%2F%2Farticles%2FVSCode%E9%85%8D%E7%BD%AE.html</url>
    <content type="text"><![CDATA[VSCode 作为如今最受欢迎的编辑器，为了它的高效性，需要搭配很多插件来使用 配置说明详解editor是针对 vscode 的风格设置例如 tabSize：一个 tab 等于 2 个空格，行高为 24px search.exclude 配置 vscode 中项目中的哪些地方被排除搜索,避免你每次搜索结果中都有一大堆无关内容 files.associations 配置文件关联 sync是用于同步 vscode 配置使用，不用每一次换个电脑都要复制一次配置，避免丢失或者改动，保持一致！ vetur和prettier和stylus是用于 Vue 开发时的代码格式化，代码提示. eslint 是用于代码格式化代码时，选择用自己的格式化规则或者标准规则，prettier规则等 插件安装Atom One Dark Theme主题 Chinese (Simplified) Language Pack for Visual Studio Code适用于 VS Code 的中文（简体）语言包 Prettier - Code formatter用于 Visual Studio 代码的更漂亮的格式化程序 ESLint语法规则和代码风格的检查工具 indent-rainbow凸显缩进，让你的缩进一目了然 Git Historygit 提交历史 GitLens在代码中显示每一行代码的提交历史 Vetur添加对.vue 后缀文件的快速书写支持。 View In Browser迅速通过浏览器打开 html 文件 markdownlint书写 md 文件的预览插件 Path Intellisense路径识别苦战，比如书写图片路径时。遗憾就是，对 webpack 项目中的路径别名无法扩展 Document This快速生成注释，注意只对类和函数有效。快捷键 Ctrl+Alt+D vscode 自定义配置12345678910111213141516171819202122232425262728293031323334353637&#123; "workbench.colorTheme": "Atom One Dark",//主题 "editor.renderIndentGuides": false, "search.location": "panel",//搜索模块放到下方菜单 "eslint.autoFixOnSave": true,//保存代码自动eslint格式化 "eslint.enable": true,//是否开启eslint "editor.formatOnSave": true,//保存自动格式化 "eslint.validate": [//eslint 校验配置 "javascript", "javascriptreact", &#123; "language": "html", "autoFix": true &#125;, &#123; "language": "vue", "autoFix": true &#125; ], "files.associations": &#123; "*.cjson": "jsonc", "*.wxss": "css", "*.wxs": "javascript" &#125;, "vetur.format.defaultFormatter.html": "prettier",//prettier格式化代码 "emmet.includeLanguages": &#123; "wxml": "html" &#125;, "minapp-vscode.disableAutoConfig": true, "vsicons.dontShowNewVersionMessage": true, "editor.fontSize": 16,//文字大小 "terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe", "[javascript]": &#123; "editor.defaultFormatter": "esbenp.prettier-vscode" &#125;, "eslint.alwaysShowStatus": true&#125;]]></content>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mock自定义配置]]></title>
    <url>%2F%2Farticles%2FMock%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE-1.html</url>
    <content type="text"><![CDATA[为什么需要Mock 这样的场景，相信大家会觉得似曾相识。 为此，我们就需要使用一些工具来帮助我们将业务单元之间尽量解耦，它就是Mock 实现Mock古代没有出现Mock前，为了能模拟数据，一般屏蔽请求代码，然后写死数据，比如： 1234567891011// this.$http.get("/maps/aoi_user_search/").then(// function(res) &#123;// setData(res);// &#125;,// function(res) &#123;// console.log(res.status);// &#125;// );let res=&#123;a:1,b:2&#125;setData(res); 这种方式很简单，起码当初就照这个方式继续开发了，虽然后续接口有数据，改起来很麻烦。但是也会常常遇到忘记把模拟数据移除，导致实际使用的时候一直是假数据，而非真实数据，为此出现过多次。所以为了解决这个问题，就用到了Mock。 近代在这个时候，我们就拥有了MockJS,通过使用MockJS我们能根据模板和规则生成复杂的接口数据，而无需我们自己动手去书写，例如： 1234567891011121314151617//apisimport api from '../api/index';import Mock from 'mockjs';function getApiMessage() &#123; return new Promise((resolve) =&gt; &#123; resolve(Mock.mock(&#123; list|1-20: ['mock数据'] &#125;); &#125;) // return api.getApiMessage();&#125;//&#123;list:["mock数据","mock数据","mock数据","mock数据","mock数据"]&#125;/** * 通过 Mock.mock 方法和 list|1-20: ['mock数据'] 模板 * 我们将生成一个长度为 1-20, 每个值都为 'mock数据' 数组 */ 这种方式也只是方便我们造假数据，而并不能方便的抽离出我们的代码,而且数据也不足够真实。有关mockjs相关语法参考http://mockjs.com/examples.html#String这个时候想一下，我们Mock数据的需求： 模拟数据 模拟数据与代码完全分离 通过一些配置，可以只获取部分Mock数据，最好足够真实 首先，如果我们想要把代码跟数据完全分离，我们必须想办法在请求的时候做一些操作，让本应请求正式数据的接口去请求Mock数据，做一个请求拦截，请求拦截的方式有两种： 一种是修改请求的链接，来达到Mock数据 12345678910111213141516//main.vueservice.getBuildingListByPage(&#123; ...params, mock:true&#125;)//server.jsgetBuildingListByPage: params =&gt; &#123; let baseApi=env.baseApi if(params.mock)&#123; baseApi='127.0.0.1:8080' &#125; return fly.get( env.baseApi + "g/bam/c/quote/building-list", params ) &#125; 此方法需自己搭一个node服务，然后写一些接口返回数据。 另外一种就是检测出Mock，直接从mock文件中取出数据 12345678910111213141516171819202122232425262728293031323334//main.vueservice.getBuildingListByPage(&#123; ...params, mock:true&#125;)//mock/db.jsexport default &#123; getBuildingListByPage: &#123; err_code: 0, err_msg: "ok", data: [ &#123; time: "2019-05-29 00:00:00", aging: 0 &#125;, &#123; time: "2019-05-29 01:00:00", aging: 16 &#125; ] &#125;&#125;//server.jsimport mockData from 'mock/db.js';getBuildingListByPage: params =&gt; &#123; let baseApi=env.baseApi if(params.mock)&#123; return mockData[getBuildingListByPage] &#125; return fly.get( env.baseApi + "g/building-list", params ) &#125; 乍一看好像第二种方式似乎更简单，事实也确实如此。但是这样用起来还不是很方便，而且接口多了，Mock数据文件会很大，需要做一个拆分。所以就有了后来的配置。 现代tips:现在的配置基于webpack的devServer在webpack中做转发代理，所有请求会先过before这个回调函数： 123456789101112131415161718192021222324const apiMocker = require('mocker-api');//webpack配置mode: 'development', devServer: &#123; host: '0.0.0.0', port: 9001, headers: &#123; 'Access-Control-Allow-Origin': '*' &#125;, historyApiFallback: &#123; rewrites: [&#123; from: /.*/g, to: '/www/view/index.html' &#125;] &#125;, proxy: &#123; '/api': &#123; target: 'http://10.12.67.192:8091/' &#125; &#125;, before(app) &#123; apiMocker(app, path.resolve(__dirname, '../mock/index.js')); &#125; &#125;, Mock资源文件JSON文件 123456789101112131415161718192021&#123; "err_code": 0, "err_msg": "ok", "mock": true, "data": &#123; "poi": &#123; "z_id": "111111111111", "name": "中国技术交易大厦大厦大厦", "province": "", "city": "北京市", "district": "海淀区", "longitude": 116.307499005, "latitude": 39.111, "addr": "", "category": "房产小区:商务楼宇", "category_code": 281200, "expiration_label": 0, "phone": "" &#125; &#125;&#125; Mockjs配置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849const delay = require('mocker-api/utils/delay');const fs = require('fs');const dirCur = fs.readdirSync(__dirname);const path = require('path');const MOCK = process.env.MOCK || process.env.mock || process.env.Mock;const apiList = &#123;&#125;;dirCur.forEach(item =&gt; &#123; const basename = path.basename(item, '.json'); if (basename !== 'index.js') &#123; const apiName = 'POST /api/' + basename.replace(/[A-Z]/g, math =&gt; &#123; return '/' + math.toLowerCase(); &#125;); let apiData = fs.readFileSync(path.join(__dirname, item), 'utf8'); try &#123; apiData = JSON.parse(apiData); &#125; catch (e) &#123; console.log(item, e); &#125; if (MOCK || apiData.mock) &#123; apiList[apiName] = (req, res, next) =&gt; &#123; console.log('Mock API:' + req.path); res.json(apiData); &#125;; &#125; &#125;&#125;);// const proxy = loadData(&#123;// 'POST /api/edit/apply': './editApply',// 'POST /api/verify/apply': './verifyApply',// 'POST /api/accept/apply': './editApply',// 'POST /api/edit/submit': './editSubmit',// 'POST /api/verify/submit': './editSubmit',// 'POST /api/accept/submit': './editSubmit',// 'POST /api/rawore/get': './raworeGet',// 'POST /api/poi/history': './poiHistory',// 'POST /api/edit/history': './editHistory',// 'POST /api/verify/history': './editHistory',// 'POST /api/accept/history': './editHistory',// 'POST /api/user/get': './userGet',// 'POST /api/work/history': './historyList',// 'POST /api/statistic/gainproduct': './gainproduction',// 'POST /api/statistic/accuracy': './accuracy',// 'POST /api/statistic/aging': './aging',// 'POST /api/company/list': './companyList',// 'POST /api/user/list': './listuser'// &#125;);module.exports = delay(apiList, 10); json文件采取驼峰命名方式，然后通过正则判断大写,替换成/+小写路径，然后用node中的fs读取当前文件夹下所有文件，得到文件列表遍历，读取文件内容，最后判断是否开发模式或是否开启Mock,然后返回数据。]]></content>
      <tags>
        <tag>Mock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F%2Farticles%2Fhello-world.html</url>
    <content type="text"><![CDATA[第一篇文章自然要用Hello World开头，写博客就是想把平常用到的东西积累下来。 Hello World1console.log('Hello World')]]></content>
  </entry>
</search>
