<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuwangi.github.io/"/>
  <updated>2020-01-17T10:39:38.131Z</updated>
  <id>https://yuwangi.github.io/</id>
  
  <author>
    <name>yuwangi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gzip性能优化方案</title>
    <link href="https://yuwangi.github.io/articles/3844556024.html"/>
    <id>https://yuwangi.github.io/articles/3844556024.html</id>
    <published>2020-01-17T09:24:16.000Z</published>
    <updated>2020-01-17T10:39:38.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个前端开发人员肯定知道线上环境要把 js、css、图片等压缩，提升页面加载速度，优化性能。</p><h2 id="压缩方式"><a href="#压缩方式" class="headerlink" title="压缩方式"></a>压缩方式</h2><p>前端自己打包压缩的有 grunt，gulp，webpack,fis 等等，此处只介绍 webpack Gzip 压缩</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D compression-webpack-plugin</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue.config.js</span></span><br><span class="line"><span class="keyword">const</span> CompressionPlugin = <span class="built_in">require</span>(<span class="string">"compression-webpack-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  baseUrl: BASE_URL,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">"production"</span>) &#123;</span><br><span class="line">      config.plugin(<span class="string">"compressionPlugin"</span>).use(</span><br><span class="line">        <span class="keyword">new</span> CompressionPlugin(&#123;</span><br><span class="line">          test: <span class="regexp">/\.js$|\.html$|.\css/</span>, <span class="comment">// 匹配文件名</span></span><br><span class="line">          threshold: <span class="number">10240</span>, <span class="comment">// 对超过10k的数据压缩</span></span><br><span class="line">          deleteOriginalAssets: <span class="literal">false</span> <span class="comment">// 不删除源文件</span></span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/images/fwoafhafwnefp.png" alt="fwoafhafwnefp"></p><p>可见 Gzip 压缩可以节省很多时间</p><h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_min_length  <span class="number">1</span>k;</span><br><span class="line">    gzip_buffers     <span class="number">4</span> <span class="number">16</span>k;</span><br><span class="line">    gzip_http_version <span class="number">1.1</span>;</span><br><span class="line">    gzip_comp_level <span class="number">9</span>;</span><br><span class="line">    gzip_types       text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php application/javascript application/json;</span><br><span class="line">    gzip_disable <span class="string">"MSIE [1-6]\."</span>;</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本地代码打包</span></span><br><span class="line">yarn build</span><br></pre></td></tr></table></figure><p>配置本地的 Nginx</p><p>效果如下：</p><p><img src="/images/jtyfjtfyjty.png" alt="jtyfjtfyjty"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一个前端开发人员肯定知道线上环境要把 js、css、图片等压缩，提升页面加载速度，优化性能。&lt;/p&gt;
&lt;h2 id=&quot;压缩方式&quot;&gt;&lt;a href=&quot;#压缩方式&quot; class=&quot;headerlink&quot; title=&quot;压缩方式&quot;&gt;&lt;/a&gt;压缩方式&lt;/h2&gt;&lt;p&gt;前端自己打包压缩的有 grunt，gulp，webpack,fis 等等，此处只介绍 webpack Gzip 压缩&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="性能优化" scheme="https://yuwangi.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="Gzip优化" scheme="https://yuwangi.github.io/tags/Gzip%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>keep-alive 的实现原理和缓存策略</title>
    <link href="https://yuwangi.github.io/articles/4126109409.html"/>
    <id>https://yuwangi.github.io/articles/4126109409.html</id>
    <published>2020-01-15T09:05:44.000Z</published>
    <updated>2020-01-16T10:22:38.845Z</updated>
    
    <content type="html"><![CDATA[<p><code>keep-alive</code>的源码解析</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/core/components/keep-alive.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; isRegExp, remove &#125; <span class="keyword">from</span> <span class="string">"shared/util"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getFirstComponentChild &#125; <span class="keyword">from</span> <span class="string">"core/vdom/helpers/index"</span>;</span><br><span class="line"></span><br><span class="line">type VNodeCache = &#123; [key: string]: ?VNode &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComponentName</span>(<span class="params">opts: ?VNodeComponentOptions</span>): ?<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> opts &amp;&amp; (opts.Ctor.options.name || opts.tag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matches</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  pattern: string | RegExp | Array&lt;string&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  name: string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(pattern)) &#123;</span><br><span class="line">    <span class="keyword">return</span> pattern.indexOf(name) &gt; <span class="number">-1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> pattern === <span class="string">"string"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> pattern.split(<span class="string">","</span>).indexOf(name) &gt; <span class="number">-1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isRegExp(pattern)) &#123;</span><br><span class="line">    <span class="keyword">return</span> pattern.test(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pruneCache</span>(<span class="params">keepAliveInstance: any, filter: Function</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; cache, keys, _vnode &#125; = keepAliveInstance;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> cache) &#123;</span><br><span class="line">    <span class="keyword">const</span> cachedNode: ?VNode = cache[key];</span><br><span class="line">    <span class="keyword">if</span> (cachedNode) &#123;</span><br><span class="line">      <span class="keyword">const</span> name: ?string = getComponentName(cachedNode.componentOptions);</span><br><span class="line">      <span class="keyword">if</span> (name &amp;&amp; !filter(name)) &#123;</span><br><span class="line">        pruneCacheEntry(cache, key, keys, _vnode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pruneCacheEntry</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  cache: VNodeCache,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  keys: Array&lt;string&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  current?: VNode</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cached = cache[key];</span><br><span class="line">  <span class="keyword">if</span> (cached &amp;&amp; (!current || cached.tag !== current.tag)) &#123;</span><br><span class="line">    cached.componentInstance.$destroy();</span><br><span class="line">  &#125;</span><br><span class="line">  cache[key] = <span class="literal">null</span>;</span><br><span class="line">  remove(keys, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> patternTypes: <span class="built_in">Array</span>&lt;<span class="built_in">Function</span>&gt; = [<span class="built_in">String</span>, <span class="built_in">RegExp</span>, <span class="built_in">Array</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"keep-alive"</span>,</span><br><span class="line">  abstract: <span class="literal">true</span>, <span class="comment">//抽象组件属性,参考此链接介绍 https://router.vuejs.org/zh/api/#routes</span></span><br><span class="line"></span><br><span class="line">  props: &#123;</span><br><span class="line">    include: patternTypes, <span class="comment">// 被缓存组件</span></span><br><span class="line">    exclude: patternTypes, <span class="comment">// 不被缓存组件</span></span><br><span class="line">    max: [<span class="built_in">String</span>, <span class="built_in">Number</span>] <span class="comment">// 指定缓存大小</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//Object.create  创建一个对象，并继承传入对象的__proto__</span></span><br><span class="line">    <span class="comment">//https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.keys = []; <span class="comment">//缓存的key 列表</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="keyword">this</span>.cache) &#123;</span><br><span class="line">      <span class="comment">//清除缓存</span></span><br><span class="line">      pruneCacheEntry(<span class="keyword">this</span>.cache, key, <span class="keyword">this</span>.keys);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">//监听缓存的变动</span></span><br><span class="line">    <span class="keyword">this</span>.$watch(<span class="string">"include"</span>, val =&gt; &#123;</span><br><span class="line">      pruneCache(<span class="keyword">this</span>, name =&gt; matches(val, name));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//监听不缓存的变动</span></span><br><span class="line">    <span class="keyword">this</span>.$watch(<span class="string">"exclude"</span>, val =&gt; &#123;</span><br><span class="line">      pruneCache(<span class="keyword">this</span>, name =&gt; !matches(val, name));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> slot = <span class="keyword">this</span>.$slots.default;</span><br><span class="line">    <span class="keyword">const</span> vnode: VNode = getFirstComponentChild(slot); <span class="comment">// 获取第一个子元素的 vnode</span></span><br><span class="line">    <span class="keyword">const</span> componentOptions: ?VNodeComponentOptions =</span><br><span class="line">      vnode &amp;&amp; vnode.componentOptions;</span><br><span class="line">    <span class="keyword">if</span> (componentOptions) &#123;</span><br><span class="line">      <span class="comment">// check pattern</span></span><br><span class="line">      <span class="keyword">const</span> name: ?string = getComponentName(componentOptions);</span><br><span class="line">      <span class="keyword">const</span> &#123; include, exclude &#125; = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//组件不在inlcude中或者在exlude中 直接返回vnode</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        <span class="comment">// not included</span></span><br><span class="line">        (include &amp;&amp; (!name || !matches(include, name))) ||</span><br><span class="line">        <span class="comment">// excluded</span></span><br><span class="line">        (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">return</span> vnode;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; cache, keys &#125; = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">const</span> key: ?string =</span><br><span class="line">        vnode.key == <span class="literal">null</span></span><br><span class="line">          ? <span class="comment">// same constructor may get registered as different local components</span></span><br><span class="line">            <span class="comment">// so cid alone is not enough (#3269)</span></span><br><span class="line">            componentOptions.Ctor.cid +</span><br><span class="line">            (componentOptions.tag ? <span class="string">`::<span class="subst">$&#123;componentOptions.tag&#125;</span>`</span> : <span class="string">""</span>)</span><br><span class="line">          : vnode.key;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">        <span class="comment">//如果缓存存在，拿到缓存的组件，然后把它放在最后一位</span></span><br><span class="line">        vnode.componentInstance = cache[key].componentInstance;</span><br><span class="line">        <span class="comment">// make current key freshest</span></span><br><span class="line">        remove(keys, key);</span><br><span class="line">        keys.push(key);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果缓存不存在，把它放到缓存中</span></span><br><span class="line">        cache[key] = vnode;</span><br><span class="line">        keys.push(key);</span><br><span class="line">        <span class="comment">// prune oldest entry</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.max &amp;&amp; keys.length &gt; <span class="built_in">parseInt</span>(<span class="keyword">this</span>.max)) &#123;</span><br><span class="line">          pruneCacheEntry(cache, keys[<span class="number">0</span>], keys, <span class="keyword">this</span>._vnode);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      vnode.data.keepAlive = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vnode || (slot &amp;&amp; slot[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;keep-alive&lt;/code&gt;的源码解析&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://yuwangi.github.io/tags/Vue/"/>
    
      <category term="keep-alive" scheme="https://yuwangi.github.io/tags/keep-alive/"/>
    
  </entry>
  
  <entry>
    <title>前端权限之动态路由树</title>
    <link href="https://yuwangi.github.io/articles/1262276894.html"/>
    <id>https://yuwangi.github.io/articles/1262276894.html</id>
    <published>2019-12-30T09:25:59.000Z</published>
    <updated>2020-01-03T02:19:08.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在工作过程中，我们经常会遇到动态加载路由树的需求，本篇文章主要写动态加载路由树的实现方式。</p><h2 id="路由定义"><a href="#路由定义" class="headerlink" title="路由定义"></a>路由定义</h2><p>项目中肯定有一些页面是每个用户都能访问的(如:登陆、注册)，这些路由我们可以直接做定义。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//routers.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/login"</span>,</span><br><span class="line">    name: <span class="string">"login"</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">"登录"</span>,</span><br><span class="line">      hideInMenu: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/view/login/login.vue"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/401"</span>,</span><br><span class="line">    name: <span class="string">"error_401"</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      hideInMenu: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/view/error-page/401.vue"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/500"</span>,</span><br><span class="line">    name: <span class="string">"error_500"</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      hideInMenu: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/view/error-page/500.vue"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   path: '*',</span></span><br><span class="line">  <span class="comment">//   name: 'error_404',</span></span><br><span class="line">  <span class="comment">//   meta: &#123;</span></span><br><span class="line">  <span class="comment">//     hideInMenu: true</span></span><br><span class="line">  <span class="comment">//   &#125;,</span></span><br><span class="line">  <span class="comment">//   component: () =&gt; import('@/view/error-page/404.vue')</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//router/index.js</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">"./routers"</span>;</span><br><span class="line"><span class="comment">// process.env.NODE_ENV 根据不同的环境 加载不同的路由模板处理文件</span></span><br><span class="line"><span class="keyword">const</span> _import = <span class="built_in">require</span>(<span class="string">"./config/_import_"</span> + process.env.NODE_ENV);</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"><span class="comment">// console.log('process.env.WEBPACK_ENV', process.env.WEBPACK_ENV, process.env.BASE_URL);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  base: process.env.BASE_URL, <span class="comment">//此处是做项目基础路径的，可忽略</span></span><br><span class="line">  routes: routes,</span><br><span class="line">  mode: <span class="string">"history"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="动态路由树"><a href="#动态路由树" class="headerlink" title="动态路由树"></a>动态路由树</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//login.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([<span class="string">"handleLogin"</span>, <span class="string">"initRoutes"</span>]),</span><br><span class="line">    handleSubmit(res) &#123;</span><br><span class="line">      <span class="comment">//后台返回路由树</span></span><br><span class="line">      <span class="keyword">this</span>.initRoutes([<span class="keyword">this</span>, res.resourceMenuDTO]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store/app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; addRoutes &#125; <span class="keyword">from</span> <span class="string">"@/libs/util"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    local: localRead(<span class="string">"local"</span>),</span><br><span class="line">    routers: GET_SESSION_STORAGE(<span class="string">"_c_unparseRoutes"</span>) || []</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    routers: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (state.routers &amp;&amp; state.routers.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.routers;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">"_c_unparseRoutes"</span>)) || [];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    homeRoute: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> getHomeRoute(getters.routers, homeName)</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setHomeRoute(state, routes) &#123;</span><br><span class="line">      state.homeRoute = getHomeRoute(routes, homeName);</span><br><span class="line">    &#125;,</span><br><span class="line">    SET_ROUTER_CHANGE: <span class="function">(<span class="params">state, params</span>) =&gt;</span> &#123;</span><br><span class="line">      SET_SESSION_STORAGE(<span class="string">"router"</span>, params);</span><br><span class="line">      state.router = params;</span><br><span class="line">    &#125;,</span><br><span class="line">    setRoutes(state, data) &#123;</span><br><span class="line">      state.routers = data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    initRoutes(&#123; commit, rootState &#125;, info) &#123;</span><br><span class="line">      <span class="keyword">let</span> router = addRoutes(info[<span class="number">0</span>], info[<span class="number">1</span>]);</span><br><span class="line">      commit(<span class="string">"setRoutes"</span>, router);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//libs/util.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">"@/config/routes"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description 根据后台数据返回动态生成路由树</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; vm Vue实例</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; routeItem 路由对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addRoutes = <span class="function">(<span class="params">vm, routeObj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> routers = [];</span><br><span class="line">  btnPre = [];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.values(routeObj).forEach(<span class="function">(<span class="params">elems, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elems.uri === <span class="string">"/"</span>) &#123;</span><br><span class="line">      routes[<span class="string">"home"</span>].path = process.env.BASE_URL;</span><br><span class="line">      routers.push(routes[<span class="string">"home"</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> routeList = formatRouter(elems);</span><br><span class="line"></span><br><span class="line">    routers = routers.concat(routeList);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  routers.push(routes[<span class="string">"404"</span>]); <span class="comment">// 坑：如不在此时添加404 刷新页面会自动跳转404</span></span><br><span class="line"></span><br><span class="line">  localStorage.setItem(<span class="string">"_c_unparseRoutes"</span>, <span class="built_in">JSON</span>.stringify(routers));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> routers;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> formatRouter = <span class="function">(<span class="params">elems, name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> routeList = [];</span><br><span class="line">  elems.childList.forEach(<span class="function">(<span class="params">elems2, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> route = getCurPage(elems2.uri);</span><br><span class="line">    <span class="keyword">if</span> (elems2.childList &amp;&amp; elems2.childList.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> child = formatRouter(elems2, elems2.uri);</span><br><span class="line">      route.children = child;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (route) &#123;</span><br><span class="line">      routeList.push(route);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> routeList;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//config/routes.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  home: &#123;</span><br><span class="line">    path: <span class="string">"/"</span>,</span><br><span class="line">    redirect: <span class="string">"/AuthManage/UserManage"</span>,</span><br><span class="line">    component: <span class="string">"main"</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      hideInMenu: <span class="literal">true</span>,</span><br><span class="line">      icon: <span class="string">"_quanxian"</span>,</span><br><span class="line"></span><br><span class="line">      title: <span class="string">"权限管理"</span>,</span><br><span class="line">      notCache: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  AuthManage: &#123;</span><br><span class="line">    path: <span class="string">"/AuthManage"</span>,</span><br><span class="line">    name: <span class="string">"AuthManage"</span>,</span><br><span class="line">    redirect: <span class="string">"/AuthManage/UserManage"</span>,</span><br><span class="line">    component: <span class="string">"main"</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      hideInMenu: <span class="literal">false</span>,</span><br><span class="line">      icon: <span class="string">"_quanxian"</span>,</span><br><span class="line">      title: <span class="string">"权限管理"</span>,</span><br><span class="line">      notCache: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">404</span>: &#123;</span><br><span class="line">    path: <span class="string">"*"</span>,</span><br><span class="line">    name: <span class="string">"error_404"</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      hideInMenu: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="string">"view/error-page/404"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//router/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//路由拦截</span></span><br><span class="line"><span class="keyword">var</span> getRouter;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routerGo</span>(<span class="params">to, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 过滤路由 调用filterAsyncRouter 数据模板处理方法 返回Vue-router可以识别数据</span></span><br><span class="line">  getRouter = filterAsyncRouter(getRouter);</span><br><span class="line">  <span class="comment">// 动态添加所有的的路由</span></span><br><span class="line"></span><br><span class="line">  router.addRoutes(getRouter);</span><br><span class="line">  store.commit(<span class="string">'SET_ROUTER_CHANGE'</span>, routes.concat(getRouter));</span><br><span class="line">  <span class="comment">// 调用next()放行</span></span><br><span class="line">  next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterAsyncRouter</span>(<span class="params">asyncRouterMap</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 遍历后台传来的路由字符串，转换为组件对象 递归方法</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> accessedRouters = asyncRouterMap.filter(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (route.component) &#123;</span><br><span class="line">      <span class="comment">// 路由有component</span></span><br><span class="line">      <span class="keyword">if</span> (route.component === <span class="string">'main'</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断路由是Layout 布局组件，将上方引用的Layout布局组件放进去</span></span><br><span class="line">        route.component = Main;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 路由不是Layout组件 二级也main</span></span><br><span class="line">        <span class="keyword">if</span> (route.component === <span class="string">'parentView'</span>) &#123;</span><br><span class="line">          route.component = parentView;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          route.component = _import(route.component);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断当前的路由对象中是否含有children 有再次调用本方法 递归调用 直到没有</span></span><br><span class="line">    <span class="keyword">if</span> (route.children &amp;&amp; route.children.length) &#123;</span><br><span class="line">      route.children = filterAsyncRouter(route.children);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> accessedRouters;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注：此处为多加的beforeEach中间件，不要跟自己写的重合在一起。</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  iView.LoadingBar.start();</span><br><span class="line">  <span class="keyword">let</span> routers = store.getters.routers;</span><br><span class="line">  <span class="keyword">if</span> (routers &amp;&amp; routers.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!getRouter) &#123;</span><br><span class="line">      <span class="comment">// 判断有没有路由权限 没有 路由权限 重新请求|从Vuex中获取</span></span><br><span class="line">      getRouter = routers; <span class="comment">// 拿到路由</span></span><br><span class="line">      routerGo(to, next); <span class="comment">// 调用动态添加路由的方法</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 判断有没有路由列表 有 允许进入下个这里是第二个beforeEach</span></span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 判断 数据仓库中有没有 用户登录返回的路由列表  没有 ===&gt;去登陆页</span></span><br><span class="line">    setCookie(<span class="string">'oscsToken'</span>, <span class="string">''</span>);</span><br><span class="line">    next(&#123;</span><br><span class="line">      name: LOGIN_PAGE_NAME <span class="comment">// 跳转到登录页</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在工作过程中，我们经常会遇到动态加载路由树的需求，本篇文章主要写动态加载路由树的实现方式。&lt;/p&gt;
&lt;h2 id=&quot;路由定义&quot;&gt;&lt;a href=&quot;#路由定义&quot; class=&quot;headerlink&quot; title=&quot;路由定义&quot;&gt;&lt;/a&gt;路由定义&lt;/h2&gt;&lt;p&gt;项目中肯定有一些页面是每个用户都能访问的(如:登陆、注册)，这些路由我们可以直接做定义。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="权限管理" scheme="https://yuwangi.github.io/tags/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
      <category term="VUE权限管理" scheme="https://yuwangi.github.io/tags/VUE%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
      <category term="VUE动态路由" scheme="https://yuwangi.github.io/tags/VUE%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>前端权限之按钮级别控制</title>
    <link href="https://yuwangi.github.io/articles/1414629290.html"/>
    <id>https://yuwangi.github.io/articles/1414629290.html</id>
    <published>2019-12-28T07:35:03.000Z</published>
    <updated>2020-01-03T02:16:58.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于公司新项目需要做全集团组织架构后台管理系统,所以需要做到动态路由树和按钮级别权限。什么?你说为啥这么麻烦？按角色权限不好吗？ 我一个小前端哪有什么话语权… T_T 。</p><a id="more"></a><h2 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h2><p>1、首先要跟后台约定按钮权限树(用户进入页面 都有哪些按钮权限)</p><p><img src="/images/fwejfowehfuowehaui.png" alt="fwejfowehfuowehaui"></p><p>2、每个页面都有查看、编辑、添加、删除等权限(这些权限分类基本可以 cover 项目需求,不够再加…)</p><p>3、登录时获取该用户已有的权限</p><p><img src="/images/fejwofhwoeiahfowaehfoweah.png" alt="fejwofhwoeiahfowaehfoweah"></p><p>4、把得到的按钮权限生成数组,放到<code>sessionstorage</code>中保存</p><p>5、定义权限判断指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//directives.js</span></span><br><span class="line"><span class="keyword">const</span> directives = &#123;</span><br><span class="line">  has: &#123;</span><br><span class="line">    inserted: <span class="function"><span class="keyword">function</span>(<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获取页面按钮权限</span></span><br><span class="line">      <span class="keyword">let</span> _flag = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (binding.value) &#123;</span><br><span class="line">        _flag = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (_flag &amp;&amp; !Vue.prototype.$_has(binding.value)) &#123;</span><br><span class="line">        el.parentNode.removeChild(el);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> directives;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//directive/index.js</span></span><br><span class="line">Vue.directive(<span class="string">"has"</span>, directive.has);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//libs/has.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; GET_SESSION_STORAGE &#125; <span class="keyword">from</span> <span class="string">"@/libs/util"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name 按钮权限管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; Vue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.prototype.$_has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> btnPermissions = GET_SESSION_STORAGE(<span class="string">"btnPermissions"</span>);</span><br><span class="line">    <span class="keyword">if</span> (btnPermissions &amp;&amp; btnPermissions.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断当前传值在权限树中是否存在</span></span><br><span class="line">      _flag = btnPermissions.indexOf(value) &gt; <span class="number">-1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _flag;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> install;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> has <span class="keyword">from</span> <span class="string">"@/libs/has"</span>;</span><br><span class="line">Vue.use(has);</span><br></pre></td></tr></table></figure><p>6、页面绑定自定义指令分为两种:一种页面上的按钮、一种组件中的按钮(这种不能使用自定义指令)</p><p>第一种、</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"search-btn"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:loading</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-has</span>=<span class="string">"'Resource-readOnly'"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"handleGetResourceTreeList"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  查询</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种、</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//这种直接用我们在main.js中写的方法即可</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"$_has('ResourceManage-edit')"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"operation-btn"</span> @<span class="attr">click</span>=<span class="string">"handleTableEdit(scope.row)"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"operation-btn"</span> @<span class="attr">click</span>=<span class="string">"handleTableRole(scope.row)"</span>&gt;</span>角色关联<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>首先该用户有页面权限</p><p><img src="/images/werfhweoahfoiwae.png" alt="werfhweoahfoiwae"></p><p>去掉删除按钮资源绑定的角色</p><p><img src="/images/fwefwefwafwaeffwaf.png" alt="fwefwefwafwaeffwaf"></p><p><img src="/images/wefwefewafwaegrehge.png" alt="wefwefewafwaegrehge"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于公司新项目需要做全集团组织架构后台管理系统,所以需要做到动态路由树和按钮级别权限。什么?你说为啥这么麻烦？按角色权限不好吗？ 我一个小前端哪有什么话语权… T_T 。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="权限控制" scheme="https://yuwangi.github.io/tags/%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
      <category term="VUE自定义指令" scheme="https://yuwangi.github.io/tags/VUE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
    
      <category term="VUE按钮权限" scheme="https://yuwangi.github.io/tags/VUE%E6%8C%89%E9%92%AE%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>baidusitemap SEO优化</title>
    <link href="https://yuwangi.github.io/articles/1899378046.html"/>
    <id>https://yuwangi.github.io/articles/1899378046.html</id>
    <published>2019-12-25T06:28:29.000Z</published>
    <updated>2020-01-03T02:19:38.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>百度作为当前国内最大的搜索引擎，为了增加博客的访问量，所以我做了 <code>SEO</code> 优化。</p><a id="more"></a><p>效果图如下:</p><p><img src="/images/ee20191225143331.png" alt="ffffffffwea"></p><p>python 文件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bp</span><br><span class="line"></span><br><span class="line">print(<span class="string">'自动推送开启....'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">site_url = <span class="string">'https://******.github.io/baidusitemap.xml'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'获取sitemap链接....'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># print requests.get(site_url).content</span></span><br><span class="line">    data_ = bp(requests.get(site_url).content, <span class="string">"html.parser"</span>)</span><br><span class="line">    print(<span class="string">'成功'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    print(data_.url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> err:</span><br><span class="line">    print(data_.url)</span><br><span class="line">    print(err)</span><br><span class="line"></span><br><span class="line">list_url = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_</span><span class="params">(data)</span>:</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'curl/7.12.1 '</span>,</span><br><span class="line">               <span class="string">'Content-Type'</span>: <span class="string">'text/plain '</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.post(</span><br><span class="line">            url=<span class="string">'http://data.zz.baidu.com/urls?site=yuwangi.github.io&amp;token=***token***'</span>, data=data)</span><br><span class="line">        print(r.status_code)</span><br><span class="line">        print(r.content)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> err:</span><br><span class="line">        print(err)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(data_.find_all(<span class="string">'loc'</span>))</span><br><span class="line">print(<span class="string">'---------------------------------'</span>)</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> enumerate(data_.find_all(<span class="string">'loc'</span>)):</span><br><span class="line">    print(x, y.string)</span><br><span class="line">    list_url.append(y.string.replace(<span class="string">'http://'</span>, <span class="string">'http://www.'</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---------------------------------'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'开始推送....'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> list_url:</span><br><span class="line">    print(<span class="string">'当前推送条目为:'</span> + x, <span class="string">'utf-8'</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    get_(x)</span><br></pre></td></tr></table></figure><p>运行:</p><p><img src="/images/fnweofhweohfiofwefwefe.png" alt="fnweofhweohfiofwefwefe"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;百度作为当前国内最大的搜索引擎，为了增加博客的访问量，所以我做了 &lt;code&gt;SEO&lt;/code&gt; 优化。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SEO" scheme="https://yuwangi.github.io/tags/SEO/"/>
    
      <category term="baidusitemap" scheme="https://yuwangi.github.io/tags/baidusitemap/"/>
    
  </entry>
  
  <entry>
    <title>前端开发环境配置</title>
    <link href="https://yuwangi.github.io/articles/1223383549.html"/>
    <id>https://yuwangi.github.io/articles/1223383549.html</id>
    <published>2019-12-11T10:05:11.000Z</published>
    <updated>2020-01-03T02:15:40.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>开发过程中，我们经常遇到测试环境需要一种配置，线上环境另外一种配置，每次上线前都要修改一下配置，这样的管理会给我们的开发工作带来一些不必要的麻烦，所以就需要对前端开发环境进行一个配置。</p><p>那么如何才能做环境的配置呢？这里我们就用到<code>Node环境变量</code>。</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>Node环境变量</code>我们开发过程中经常遇到，就是<code>process.env</code>,然后我就查了一下官方文档<code>http://nodejs.cn/api/process.html#process_process_env</code>,<code>pricess.env</code>属性返回包含用户环境的对象。</p><p>我们主要可以用它来做开启 sourceMap、后端域名的切换、webpack 相关环境配置等等。</p><p>Windows 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#node中常用的到的环境变量是NODE_ENV，首先查看是否存在</span></span><br><span class="line"><span class="built_in">set</span> NODE_ENV</span><br><span class="line"><span class="comment">#如果不存在则添加环境变量</span></span><br><span class="line"><span class="built_in">set</span> NODE_ENV=production</span><br><span class="line"><span class="comment">#环境变量追加值 set 变量名=%变量名%;变量内容</span></span><br><span class="line"><span class="built_in">set</span> path=%path%;C:\web;C:\Tools</span><br><span class="line"><span class="comment">#某些时候需要删除环境变量</span></span><br><span class="line"><span class="built_in">set</span> NODE_ENV=</span><br></pre></td></tr></table></figure><p>Linux 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#node中常用的到的环境变量是NODE_ENV，首先查看是否存在</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$NODE_ENV</span></span><br><span class="line"><span class="comment">#如果不存在则添加环境变量</span></span><br><span class="line"><span class="built_in">export</span> NODE_ENV=production</span><br><span class="line"><span class="comment">#环境变量追加值</span></span><br><span class="line"><span class="built_in">export</span> path=<span class="variable">$path</span>:/home/download:/usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="comment">#某些时候需要删除环境变量</span></span><br><span class="line"><span class="built_in">unset</span> NODE_ENV</span><br><span class="line"><span class="comment">#某些时候需要显示所有的环境变量</span></span><br><span class="line">env</span><br></pre></td></tr></table></figure><p>所有系统都支持的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先我们需要安装一个npm 包</span></span><br><span class="line"></span><br><span class="line">npm install --save-dev cross-env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后在webpack中</span></span><br><span class="line">cross-env WEBPACK_ENV=dev  vue-cli-service serve --open</span><br></pre></td></tr></table></figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// Project deployment base</span></span><br><span class="line">  <span class="comment">// By default we assume your app will be deployed at the root of a domain,</span></span><br><span class="line">  <span class="comment">// e.g. https://www.my-app.com/</span></span><br><span class="line">  <span class="comment">// If your app is deployed at a sub-path, you will need to specify that</span></span><br><span class="line">  <span class="comment">// sub-path here. For example, if your app is deployed at</span></span><br><span class="line">  <span class="comment">// https://www.foobar.com/my-app/</span></span><br><span class="line">  <span class="comment">// then change this to '/my-app/'</span></span><br><span class="line">  baseUrl: BASE_URL,</span><br><span class="line">  publicPath:</span><br><span class="line">    process.env.WEBPACK_ENV == <span class="string">"test"</span> || process.env.WEBPACK_ENV == <span class="string">"dev"</span></span><br><span class="line">      ? <span class="string">"/scm/"</span></span><br><span class="line">      : <span class="string">"/"</span>,</span><br><span class="line">  lintOnSave: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//router</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  base:</span><br><span class="line">    process.env.WEBPACK_ENV == <span class="string">"test"</span> || process.env.WEBPACK_ENV == <span class="string">"dev"</span></span><br><span class="line">      ? <span class="string">"/scm/"</span></span><br><span class="line">      : <span class="string">"/"</span>,</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">"history"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#package.json</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"cross-env WEBPACK_ENV=dev  vue-cli-service serve --open"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"cross-env WEBPACK_ENV=test vue-cli-service build"</span>,//测试环境</span><br><span class="line">    <span class="string">"prod"</span>: <span class="string">"cross-env WEBPACK_ENV=prod vue-cli-service build"</span>,//线上环境</span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"vue-cli-service lint"</span>,</span><br><span class="line">    <span class="string">"test:unit"</span>: <span class="string">"vue-cli-service test:unit"</span>,</span><br><span class="line">    <span class="string">"test:e2e"</span>: <span class="string">"vue-cli-service test:e2e"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>Tips:由于资源限制 所以做的测试环境分级</p><p>测试环境<br><img src="/images/fwefweffwwfweafgwrg.png" alt="fwefweffwwfweafgwrg"><br>线上环境<br><img src="/images/4646546416416165.png" alt="4646546416416165"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;开发过程中，我们经常遇到测试环境需要一种配置，线上环境另外一种配置，每次上线前都要修改一下配置，这样的管理会给我们的开发工作带来一些不必要的麻烦，所以就需要对前端开发环境进行一个配置。&lt;/p&gt;
&lt;p&gt;那么如何才能做环境的配置呢？这里我们就用到&lt;code&gt;Node环境变量&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="node-env" scheme="https://yuwangi.github.io/tags/node-env/"/>
    
      <category term="环境配置" scheme="https://yuwangi.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>git分支权限管理及Merge Request</title>
    <link href="https://yuwangi.github.io/articles/1972266884.html"/>
    <id>https://yuwangi.github.io/articles/1972266884.html</id>
    <published>2019-12-06T12:03:17.000Z</published>
    <updated>2019-12-06T12:32:52.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>团队开发过程中合并分支随意,遇到冲突总是几人坐在一起解决冲突，但是这种方式做不到过程的留痕。后期出现 bug 又忘记之前代码如何编写的了,因此需要使用 Git 的 Merge Request 进行过程管理和 code review。</p><h2 id="角色权限管理"><a href="#角色权限管理" class="headerlink" title="角色权限管理"></a>角色权限管理</h2><p>在 GitLab 中角色的权限一般有：Guest、Reporter、Developer、Maintainer、Owner。</p><a id="more"></a><p><img src="/images/fwefwef.png" alt="fwefwef.png"></p><p>下面就来设置权限</p><p><img src="/images/efwe20191206201834.png" alt="efwe20191206201834.png"></p><p><img src="/images/fwefefwefwefwefwezvzs.png" alt="fwefefwefwefwefwezvzs"></p><h2 id="Merge-Request"><a href="#Merge-Request" class="headerlink" title="Merge Request"></a>Merge Request</h2><p>开发过程中拥有 Developer 权限的用户提交被保护分支时,需要在分支管理页面提交 Merge Request，然后填写开发的需求信息。如下图：</p><p><code>Tips:因为此时无资源，所以从网上找的图片。</code></p><p><img src="/images/fwefweaefhth.png" alt="fwefweaefhth"></p><p><img src="/images/ewfwsafewarfweaf.png" alt="ewfwsafewarfweaf"></p><p>然后拥有 Maintainer 权限的用户做 code review,选择是同意合并，还是拒绝合并。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;团队开发过程中合并分支随意,遇到冲突总是几人坐在一起解决冲突，但是这种方式做不到过程的留痕。后期出现 bug 又忘记之前代码如何编写的了,因此需要使用 Git 的 Merge Request 进行过程管理和 code review。&lt;/p&gt;
&lt;h2 id=&quot;角色权限管理&quot;&gt;&lt;a href=&quot;#角色权限管理&quot; class=&quot;headerlink&quot; title=&quot;角色权限管理&quot;&gt;&lt;/a&gt;角色权限管理&lt;/h2&gt;&lt;p&gt;在 GitLab 中角色的权限一般有：Guest、Reporter、Developer、Maintainer、Owner。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="git" scheme="https://yuwangi.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>前端埋点之数据监控</title>
    <link href="https://yuwangi.github.io/articles/2142221546.html"/>
    <id>https://yuwangi.github.io/articles/2142221546.html</id>
    <published>2019-11-23T04:41:20.000Z</published>
    <updated>2019-12-06T12:33:41.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端埋点主要是为了服务运营人员采集用户行为数据，进行后续数据分析工作的工具。</p><!--`数据监控`- pv,uv- 用户来源地址- 页面停留时间- 页面访问来源`性能监控`- 首屏加载时间- 页面渲染时间- 优化策略- 等等...## 方式### 手动埋点主要有两种方式：命令埋点和声明埋点1、命令埋点```js//这个不怎么用``` -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前端埋点主要是为了服务运营人员采集用户行为数据，进行后续数据分析工作的工具。&lt;/p&gt;
&lt;!--
`数据监控`

- pv,uv
- 用户来源
      
    
    </summary>
    
    
    
      <category term="前端埋点" scheme="https://yuwangi.github.io/tags/%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Sentry 前端异常监控</title>
    <link href="https://yuwangi.github.io/articles/1179895217.html"/>
    <id>https://yuwangi.github.io/articles/1179895217.html</id>
    <published>2019-11-22T02:27:40.000Z</published>
    <updated>2020-01-03T02:21:22.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>起初神创造天地，天地处于一片混沌状态，神说，要有光，于是便有了光。———《圣经》</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>Sentry</code>是一款国外的异常监控开源服务，名字翻译过来就是“哨兵”。<br>有没有感觉像《冰与火》里的守夜人，其实也差不多，把 bug 想成异鬼就行了。</p><p>对于任何一个项目而言，本地测试肯定做不到 100%覆盖，而且，我们也不能保证用户能按照我们的预期进行操作，其实对我而言，用户才是最好的测试者，但是我们不能奢求每个用户遇到问题时候都会主动向我们反馈。</p><p>故而，我们需要在项目出现异常时主动对其进行收集上报，分析原因和影响后制定下一步解决方案。</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1、首先访问官网<code>https://sentry.io</code>注册账号<br>2、创建项目</p><p><img src="/images/fhefhohfwue.png" alt="fhefhohfwue"></p><p>选择你用的前端框架</p><p><img src="/images/feowfhwoehfo.png" alt="feowfhwoehfo"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面是vue的安装方式，其他框架安装指示做就可以了</span></span><br><span class="line"># Using yarn</span><br><span class="line">yarn add @sentry/browser</span><br><span class="line">yarn add @sentry/integrations</span><br><span class="line"></span><br><span class="line"># Using npm</span><br><span class="line">npm install @sentry/browser</span><br><span class="line">npm install @sentry/integrations</span><br></pre></td></tr></table></figure><p><code>注意下面的配置最好在 production 环境配置，否则会影响 debug</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js配置</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Sentry <span class="keyword">from</span> <span class="string">"@sentry/browser"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Integrations <span class="keyword">from</span> <span class="string">"@sentry/integrations"</span>;</span><br><span class="line"></span><br><span class="line">Sentry.init(&#123;</span><br><span class="line">  dsn: <span class="string">"https://214bbc6a0a66455d********51357ef6@sentry.io/1827364"</span>,</span><br><span class="line">  integrations: [<span class="keyword">new</span> Integrations.Vue(&#123; Vue, <span class="attr">attachProps</span>: <span class="literal">true</span> &#125;)]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后奉上效果图</p><p><img src="/images/fjeiowfwjeifw.png" alt="fjeiowfwjeifw"></p><p>bug 复现步骤</p><p><img src="/images/fneafhe.png" alt="fneafhe"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;起初神创造天地，天地处于一片混沌状态，神说，要有光，于是便有了光。———《圣经》&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Sentry&lt;/code&gt;是一款国外的异常监控开源服务，名字翻译过来就是“哨兵”。&lt;br&gt;有没有感觉像《冰与火》里的守夜人，其实也差不多，把 bug 想成异鬼就行了。&lt;/p&gt;
&lt;p&gt;对于任何一个项目而言，本地测试肯定做不到 100%覆盖，而且，我们也不能保证用户能按照我们的预期进行操作，其实对我而言，用户才是最好的测试者，但是我们不能奢求每个用户遇到问题时候都会主动向我们反馈。&lt;/p&gt;
&lt;p&gt;故而，我们需要在项目出现异常时主动对其进行收集上报，分析原因和影响后制定下一步解决方案。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://yuwangi.github.io/tags/Vue/"/>
    
      <category term="Sentry" scheme="https://yuwangi.github.io/tags/Sentry/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3 资源CDN优化加载</title>
    <link href="https://yuwangi.github.io/articles/2654233593.html"/>
    <id>https://yuwangi.github.io/articles/2654233593.html</id>
    <published>2019-11-19T11:46:53.000Z</published>
    <updated>2020-01-03T02:22:24.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>背景就是项目打包<code>chunk-vendors</code>依赖文件太大，导致初次加载很慢… 所以就用到了 CDN 优化加载。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>对于 vue，vuex，vue-router，axios，iview 等我们可以利用 webpack 的 externals 参数来配置，这里我们设定只需要在生产环境中才需要使用。</p><a id="more"></a><ul><li>第一步：首先找 CDN 托管路径(公司有 oss 存储服务器的忽略)</li></ul><p><code>https://www.bootcdn.cn/</code> bootstrap 的 cdn 托管服务</p><p><code>https://unpkg.com/</code> 包管理工具的 cdn 资源</p><ul><li>第二步</li></ul><p><code>vue.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否为生产环境</span></span><br><span class="line"><span class="keyword">const</span> isProduction = process.env.NODE_ENV === <span class="string">"production"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义 CDN 路径</span></span><br><span class="line"><span class="keyword">const</span> cdn = &#123;</span><br><span class="line">  css: [],</span><br><span class="line">  js: [</span><br><span class="line">    <span class="string">"https://cdn.bootcss.com/vue/2.5.10/vue.min.js"</span>,</span><br><span class="line">    <span class="string">"https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js"</span>,</span><br><span class="line">    <span class="string">"https://cdn.bootcss.com/vuex/3.0.1/vuex.min.js"</span>,</span><br><span class="line">    <span class="string">"https://cdn.bootcss.com/axios/0.18.0/axios.min.js"</span>,</span><br><span class="line">    <span class="string">"http://img-hub.opechk.com/invoice/87SP000000023/iview.min.js"</span> <span class="comment">//此处是公司提供的阿里云的cdn</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: smp.wrap(&#123;</span><br><span class="line">    <span class="comment">//生产环境注入 cdn</span></span><br><span class="line">    externals:</span><br><span class="line">      (isProduction &amp;&amp; &#123;</span><br><span class="line">        vue: <span class="string">"Vue"</span>,</span><br><span class="line">        vuex: <span class="string">"Vuex"</span>,</span><br><span class="line">        <span class="string">"vue-router"</span>: <span class="string">"VueRouter"</span>,</span><br><span class="line">        axios: <span class="string">"axios"</span>,</span><br><span class="line">        <span class="string">"view-design"</span>: <span class="string">"iview"</span></span><br><span class="line">      &#125;) ||</span><br><span class="line">      &#123;&#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 生产环境配置</span></span><br><span class="line">    <span class="keyword">if</span> (isProduction) &#123;</span><br><span class="line">      <span class="comment">// 生产环境注入 cdn</span></span><br><span class="line">      config.plugin(<span class="string">"html"</span>).tap(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">        args[<span class="number">0</span>].cdn = cdn;</span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">"@"</span>, resolve(<span class="string">"src"</span>)) <span class="comment">// key,value自行定义，比如.set('@@', resolve('src/components'))</span></span><br><span class="line">      .set(<span class="string">"_c"</span>, resolve(<span class="string">"src/components"</span>));</span><br><span class="line">    config.resolve.symlinks(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>第三步</li></ul><p><code>index.html</code>配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"&lt;%= BASE_URL %&gt;favicon.ico"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 CDN 的 CSS 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> (<span class="attr">var</span> <span class="attr">i</span> <span class="attr">in</span> <span class="attr">htmlWebpackPlugin.options.cdn</span> &amp;&amp;</span></span><br><span class="line"><span class="tag">    <span class="attr">htmlWebpackPlugin.options.cdn.css</span>) &#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span></span></span><br><span class="line"><span class="tag">        &gt;</span>We're sorry but iview-admin doesn't work properly without JavaScript</span><br><span class="line">        enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 CDN 的 JS 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> (<span class="attr">var</span> <span class="attr">i</span> <span class="attr">in</span> <span class="attr">htmlWebpackPlugin.options.cdn</span> &amp;&amp;</span></span><br><span class="line"><span class="tag">    <span class="attr">htmlWebpackPlugin.options.cdn.js</span>) &#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="nginx-配置-本地预览效果"><a href="#nginx-配置-本地预览效果" class="headerlink" title="nginx 配置 本地预览效果"></a>nginx 配置 本地预览效果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       <span class="number">9007</span>;<span class="comment">//端口</span></span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location ^~ <span class="regexp">/store/</span> &#123; <span class="comment">//如果资源为根目录的请用/</span></span><br><span class="line">            # autoindex off;</span><br><span class="line">            try_files $uri $uri/ <span class="regexp">/store/</span>;</span><br><span class="line">            alias  F:\\www\\hub-frontend\\dist\\;<span class="comment">//打包资源本地路径</span></span><br><span class="line">            index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">        location /opec-store-api/ &#123;<span class="comment">//接口转发</span></span><br><span class="line">            rewrite ^/opec-store-api/(.*)$ /opec-store-api/$1 break;  #所有对后端的请求加一个api前缀方便区分，真正访问的时候移除这个前缀</span><br><span class="line">            # API Server</span><br><span class="line">            proxy_pass http:<span class="comment">//test.test.test.test/;//需要转发的地址</span></span><br><span class="line"></span><br><span class="line">            #将真正的请求代理到serverB,即真实的服务器地址，ajax的url为/api/user/1的请求将会访问http://www.serverB.com/user/1</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/fwehofhewof.png" alt="eee"></p><h2 id="Node-js-静态文件服务器"><a href="#Node-js-静态文件服务器" class="headerlink" title="Node.js 静态文件服务器"></a>Node.js 静态文件服务器</h2><p><code>https://github.com/zeit/serve</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g serve</span><br><span class="line"><span class="comment"># -s 参数的意思是将其架设在 Single-Page Application 模式下</span></span><br><span class="line"><span class="comment"># 这个模式会处理即将提到的路由问题</span></span><br><span class="line">serve -s dist</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;背景就是项目打包&lt;code&gt;chunk-vendors&lt;/code&gt;依赖文件太大，导致初次加载很慢… 所以就用到了 CDN 优化加载。&lt;/p&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;对于 vue，vuex，vue-router，axios，iview 等我们可以利用 webpack 的 externals 参数来配置，这里我们设定只需要在生产环境中才需要使用。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue频繁切换页面、标签页解决方案</title>
    <link href="https://yuwangi.github.io/articles/2616055594.html"/>
    <id>https://yuwangi.github.io/articles/2616055594.html</id>
    <published>2019-11-10T11:36:38.000Z</published>
    <updated>2020-01-03T02:24:43.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在平常的开发过程中，我们经常会遇到频繁切换菜单或者切换 tabs,而每一次切换都会调取接口返回数据渲染（接口请求过快，大部分还在<strong>pending</strong>中），那么这些请求就会极大的影响页面的性能，因为即便切换了页面，那些请求依然会触发下去。为了节省这部分性能，所以做了下面这些处理。</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>Tips:本文主要根据 axios 来做的处理</li></ul><h3 id="axios-文件配置"><a href="#axios-文件配置" class="headerlink" title="axios 文件配置"></a>axios 文件配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//axios文件</span></span><br><span class="line"><span class="built_in">window</span>.canCancelAxios = []; <span class="comment">//全局 所有拦截对象存储</span></span><br><span class="line"><span class="built_in">window</span>.canAxios = &#123;&#125;; <span class="comment">//拦截对象去重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// http request 拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> whiteList = [<span class="string">"/order/login.htm"</span>]; <span class="comment">// 白名单接口</span></span><br><span class="line">    <span class="keyword">if</span> (config.url &amp;&amp; whiteList.every(<span class="function"><span class="params">item</span> =&gt;</span> !config.url.includes(item))) &#123;</span><br><span class="line">      <span class="keyword">if</span> (canAxios[config.url]) &#123;</span><br><span class="line">        <span class="comment">//过滤</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        config.cancelToken = <span class="keyword">new</span> axios.CancelToken(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">window</span>.canCancelAxios.push(&#123; <span class="attr">key</span>: config.url || <span class="string">""</span>, <span class="attr">cancel</span>: c &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="定义取消方法"><a href="#定义取消方法" class="headerlink" title="定义取消方法"></a>定义取消方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消axios请求</span></span><br><span class="line"><span class="comment"> * @param cellArr 要取消的接口；如果不传参，则取消canCancelAxios保存的所有接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelAxios</span>(<span class="params">cellArr = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (cellArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    cellArr.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">window</span>.canCancelAxios.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.canCancelAxios[i].key === val) &#123;</span><br><span class="line">          <span class="built_in">window</span>.canCancelAxios[i].cancel();</span><br><span class="line">          <span class="built_in">window</span>.canCancelAxios.splice(i, <span class="number">1</span>);</span><br><span class="line">          i--;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">window</span>.canCancelAxios.length; i++) &#123;</span><br><span class="line">      <span class="built_in">window</span>.canCancelAxios[i].cancel();</span><br><span class="line">      <span class="built_in">window</span>.canCancelAxios.splice(i, <span class="number">1</span>);</span><br><span class="line">      i--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由切换时，取消-axios-请求"><a href="#路由切换时，取消-axios-请求" class="headerlink" title="路由切换时，取消 axios 请求"></a>路由切换时，取消 axios 请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cancelAxios <span class="keyword">from</span> <span class="string">"***"</span>;</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  cancelAxios();</span><br><span class="line">  <span class="comment">// 进行其他业务操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="切换-tab-页时-取消部分请求"><a href="#切换-tab-页时-取消部分请求" class="headerlink" title="切换 tab 页时,取消部分请求"></a>切换 tab 页时,取消部分请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处用的iview ui,由于业务逻辑修改 把keep-alive关闭了... 此处忽略</span></span><br><span class="line">&lt;Tabs type=<span class="string">"card"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Tabs"</span> :animated=<span class="string">"false"</span> @on-click=<span class="string">"changeTabs"</span>&gt;</span><br><span class="line">      &lt;TabPane :label=<span class="string">"PENDING_Title"</span>&gt;</span><br><span class="line">        &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span> --&gt;</span></span><br><span class="line">        &lt;pending v-if="tabIndex == 0" /&gt;</span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- &lt;/keep-alive&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">TabPane</span>&gt;</span></span></span><br><span class="line">      &lt;TabPane :label=<span class="string">"CONFIRMER_Title"</span>&gt;</span><br><span class="line">        &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span> --&gt;</span></span><br><span class="line">        &lt;confirmer v-if="tabIndex == 1" /&gt;</span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- &lt;/keep-alive&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">TabPane</span>&gt;</span></span></span><br><span class="line">      &lt;TabPane :label=<span class="string">"READY_TO_SHIP_Title"</span>&gt;</span><br><span class="line">        &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span> --&gt;</span></span><br><span class="line">        &lt;readyShip v-if="tabIndex == 2" /&gt;</span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- &lt;/keep-alive&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">TabPane</span>&gt;</span></span></span><br><span class="line">      &lt;TabPane :label=<span class="string">"SHIPPED_Title"</span>&gt;</span><br><span class="line">        &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span> --&gt;</span></span><br><span class="line">        &lt;shipped v-if="tabIndex == 3" /&gt;</span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- &lt;/keep-alive&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">TabPane</span>&gt;</span></span></span><br><span class="line">      &lt;TabPane :label=<span class="string">"CANCELED_Title"</span>&gt;</span><br><span class="line">        &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span> --&gt;</span></span><br><span class="line">        &lt;canceled v-if="tabIndex == 4" /&gt;</span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- &lt;/keep-alive&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">TabPane</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/Tabs&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处就是  切换tabs时 tabIndex会改变,当值变化时 取消一些正在请求的接口</span></span><br><span class="line"><span class="keyword">import</span> &#123; cancelAxios &#125; <span class="keyword">from</span> <span class="string">"@/libs/cancelAxios"</span>;</span><br><span class="line"></span><br><span class="line">watch: &#123;</span><br><span class="line">    tabIndex() &#123;</span><br><span class="line">      <span class="keyword">this</span>.cancelAxios([<span class="string">"/order/listOrder.htm"</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>最后奉上效果图<br><img src="/images/8FFFDC5421BAB41CE463CD27FB20A2FF.png" alt="47240234723042.PNG"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在平常的开发过程中，我们经常会遇到频繁切换菜单或者切换 tabs,而每一次切换都会调取接口返回数据渲染（接口请求过快，大部分还在&lt;strong&gt;pending&lt;/strong&gt;中），那么这些请求就会极大的影响页面的性能，因为即便切换了页面，那些请求依然会触发下去。为了节省这部分性能，所以做了下面这些处理。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://yuwangi.github.io/tags/Vue/"/>
    
      <category term="axios" scheme="https://yuwangi.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>web前端面试总结</title>
    <link href="https://yuwangi.github.io/articles/3335497093.html"/>
    <id>https://yuwangi.github.io/articles/3335497093.html</id>
    <published>2019-10-25T07:19:29.000Z</published>
    <updated>2019-12-06T08:06:37.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h3><a id="more"></a><ul><li>上下左右居中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//css</span></span><br><span class="line">html,</span><br><span class="line">body &#123;</span><br><span class="line">    eight: <span class="number">100</span>%</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.main &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: <span class="number">100</span>%;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">    width: <span class="number">300</span>px;</span><br><span class="line">    border: <span class="number">1</span>px solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"main"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span>&gt;上下左右居中&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><ul><li>左右布局，一侧定宽，一侧自适应撑满</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//css</span></span><br><span class="line">    html,</span><br><span class="line">    body &#123;</span><br><span class="line">        height: <span class="number">100</span>%</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .main &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        height: <span class="number">100</span>%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .left,</span><br><span class="line">    .right &#123;</span><br><span class="line">        height: <span class="number">100</span>%;</span><br><span class="line">        border: <span class="number">1</span>px solid red;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .left &#123;</span><br><span class="line">        width: <span class="number">300</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right &#123;</span><br><span class="line">        width: <span class="number">100</span>%;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//html</span></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"main"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;固定宽度<span class="number">300</span>px&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="right"&gt;自适应宽度&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><ul><li>内容宽度等分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//css</span></span><br><span class="line">    .box &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .box div &#123;</span><br><span class="line">        flex: <span class="number">1</span>;</span><br><span class="line">        border: <span class="number">1</span>px solid red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//html</span></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span>&gt;</span><br><span class="line">        &lt;div&gt;<span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;2&lt;/</span>div&gt;</span><br><span class="line">        &lt;div&gt;<span class="number">3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3 id="css3-的新特性"><a href="#css3-的新特性" class="headerlink" title="css3 的新特性"></a>css3 的新特性</h3><ul><li>渐变<br>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">direction</span>, <span class="selector-tag">color-stop1</span>, <span class="selector-tag">color-stop2</span>, ...);</span><br></pre></td></tr></table></figure><p>径向渐变（Radial Gradients）- 由它们的中心定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: radial-gradient(center, shape size, start-color, ..., last-color);</span><br></pre></td></tr></table></figure><ul><li>过渡</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>transition</td><td>简写属性，用于在一个属性中设置四个过渡属性。</td></tr><tr><td>transition-property</td><td>规定应用过渡的 CSS 属性的名称。</td></tr><tr><td>transition-duration</td><td>定义过渡效果花费的时间。默认是 0。</td></tr><tr><td>transition-timing-function</td><td>规定过渡效果的时间曲线。默认是 “ease”。</td></tr><tr><td>transition-delay</td><td>规定过渡效果何时开始。默认是 0。</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transition-property</span>: width;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">-webkit-transition-property</span>: width;</span><br><span class="line">  <span class="attribute">-webkit-transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">-webkit-transition-timing-function</span>: linear;</span><br><span class="line">  <span class="attribute">-webkit-transition-delay</span>: <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>动画</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画。</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了 animation-play-state 属性</td></tr><tr><td>animation-name</td><td>规定 @keyframes 动画的名称</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线。默认是 “ease”。</td></tr><tr><td>animation-delay</td><td>规定动画何时开始。默认是 0。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数。默认是 1。</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向地播放。默认是 “normal”。</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是 “running”。</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: myfirst;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: linear;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: running;</span><br><span class="line">  <span class="comment">/* Safari and Chrome: */</span></span><br><span class="line">  <span class="attribute">-webkit-animation-name</span>: myfirst;</span><br><span class="line">  <span class="attribute">-webkit-animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">-webkit-animation-timing-function</span>: linear;</span><br><span class="line">  <span class="attribute">-webkit-animation-delay</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">-webkit-animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="attribute">-webkit-animation-direction</span>: alternate;</span><br><span class="line">  <span class="attribute">-webkit-animation-play-state</span>: running;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用纯-CSS-创建一个三角形"><a href="#用纯-CSS-创建一个三角形" class="headerlink" title="用纯 CSS 创建一个三角形"></a>用纯 CSS 创建一个三角形</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 0;</span><br><span class="line">        height: 0;</span><br><span class="line">        border-top: 40px solid transparent;</span><br><span class="line">        border-left: 40px solid transparent;</span><br><span class="line">        border-right: 40px solid transparent;</span><br><span class="line"><span class="css">        <span class="selector-tag">border-bottom</span>: 40<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ff0000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS-的盒子模型"><a href="#CSS-的盒子模型" class="headerlink" title="CSS 的盒子模型"></a>CSS 的盒子模型</h3><p>标准盒子模型：宽度=内容的宽度（content）+ border + padding</p><p>低版本 IE 盒子模型：宽度=内容宽度（content+border+padding)</p><h3 id="如何让一个-div-水平居中"><a href="#如何让一个-div-水平居中" class="headerlink" title="如何让一个 div 水平居中"></a>如何让一个 div 水平居中</h3><p>已知宽度，block 元素 ，添加添加 margin:0 auto 属性。<br>未知宽度，绝对定位的居中 ，上下左右都为 0，margin:auto</p><h3 id="让一个-div-水平垂直居中"><a href="#让一个-div-水平垂直居中" class="headerlink" title="让一个 div 水平垂直居中"></a>让一个 div 水平垂直居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">250px</span>;</span><br><span class="line">  <span class="comment">/*外边距为自身宽高的一半 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: red; <span class="comment">/* 方便看效果 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/* 垂直居中 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center; <span class="comment">/* 水平居中 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>; <span class="comment">/* 可省 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>; <span class="comment">/* 可省 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: red; <span class="comment">/* 方便看效果 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三栏布局，左右固定，中间自适应"><a href="#三栏布局，左右固定，中间自适应" class="headerlink" title="三栏布局，左右固定，中间自适应"></a>三栏布局，左右固定，中间自适应</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.middle</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            float: left;</span><br><span class="line">            min-height: 130px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">            padding: 0 220px 0 200px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">            margin-left: -100%;</span><br><span class="line">            left: -200px;</span><br><span class="line">            width: 200px;</span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            margin-left: -220px;</span><br><span class="line">            right: -220px;</span><br><span class="line">            width: 220px;</span><br><span class="line">            background: green;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            background: blue;</span><br><span class="line">            word-break: break-all;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'middle'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'left'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS-优先级"><a href="#CSS-优先级" class="headerlink" title="CSS 优先级"></a>CSS 优先级</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">同级别：总结排序：!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</span><br><span class="line">    1.属性后面加!import 会覆盖页面内任何位置定义的元素样式</span><br><span class="line">    2.作为style属性写在元素内的样式</span><br><span class="line">    3.id选择器</span><br><span class="line">    4.类选择器</span><br><span class="line">    5.标签选择器</span><br><span class="line">    6.通配符选择器（*）</span><br><span class="line">    7.浏览器自定义或继承</span><br><span class="line">**同一级别：后写的会覆盖先写的**</span><br></pre></td></tr></table></figure><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><h3 id="ES6-的新特性-此条必问"><a href="#ES6-的新特性-此条必问" class="headerlink" title="ES6 的新特性 此条必问~"></a>ES6 的新特性 此条必问~</h3><p>参考这篇文章 <a href="https://blog.csdn.net/zgrkaka/article/details/82863445" target="_blank" rel="noopener">https://blog.csdn.net/zgrkaka/article/details/82863445</a></p><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>闭包的定义很简单：函数 A 返回了一个函数 B，并且函数 B 中使用了函数 A 的变量，函数 B 就被称为闭包。</p><h3 id="js-检测数据类型的方法"><a href="#js-检测数据类型的方法" class="headerlink" title="js 检测数据类型的方法"></a>js 检测数据类型的方法</h3><ul><li>typeof</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> []);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><p><img src="/images/149117849.png" alt="149117849"></p><p>typeof 对于基本数据类型判断是没有问题的，但是遇到引用数据类型是不起作用的。</p><ul><li>instanceof</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>);</span><br><span class="line"><span class="comment">//            console.log(null instanceof Null);</span></span><br><span class="line"><span class="comment">//            console.log(undefined instanceof Undefined);</span></span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Function</span>);</span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/20171003141627521-927563737.png" alt="20171003141627521-927563737"></p><p>可以看到前三个都是以对象字面量创建的基本数据类型，但是却不是所属类的实例，这个就有点怪了。后面三个是引用数据类型，可以得到正确的结果。如果我们通过 new 关键字去创建基本数据类型，你会发现，这时就会输出 true,如下:</p><p><img src="/images/1248022-20171003142217802-1412540288.png" alt="1248022-20171003142217802-1412540288"></p><p>接下再来说说为什么 null 和 undefined 为什么比较特殊，实际上按理来说，null 的所属类就是 Null，undefined 就是 Undefined，但事实并非如此：控制台输出如下结果：</p><p><img src="/images/1248022-20171003142534599-1150711103.png" alt="1248022-20171003142534599-1150711103"></p><p>浏览器压根不认识这两货，直接报错。在第一个例子你可能已经发现了，typeof null 的结果是 object，typeof undefined 的结果是 undefined</p><ul><li>Object.prototype.toString.call()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.call(<span class="string">"aaa"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a.call(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a.call(<span class="literal">true</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a.call(<span class="literal">null</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a.call(<span class="literal">undefined</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a.call([]));</span><br><span class="line"><span class="built_in">console</span>.log(a.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(a.call(&#123;&#125;));</span><br></pre></td></tr></table></figure><p><img src="/images/12480221708327412.png" alt="12480221708327412"></p><p>完美的检测了所有的数据类型</p><h3 id="谈一谈深拷贝和浅拷贝"><a href="#谈一谈深拷贝和浅拷贝" class="headerlink" title="谈一谈深拷贝和浅拷贝"></a>谈一谈深拷贝和浅拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浅拷贝方法</span></span><br><span class="line"><span class="comment">// Object.assign()</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深拷贝  递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> objClone = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">"object"</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="comment">//判断ojb子元素是否为对象，如果是，递归复制</span></span><br><span class="line">        <span class="keyword">if</span> (obj[key] &amp;&amp; <span class="keyword">typeof</span> obj[key] === <span class="string">"object"</span>) &#123;</span><br><span class="line">          objClone[key] = deepClone(obj[key]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//如果不是，简单复制</span></span><br><span class="line">          objClone[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> objClone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  b = deepClone(a);</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="comment">//JSON对象的parse和stringify</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _obj = <span class="built_in">JSON</span>.stringify(obj),</span><br><span class="line">    objClone = <span class="built_in">JSON</span>.parse(_obj);</span><br><span class="line">  <span class="keyword">return</span> objClone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">0</span>, <span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>],</span><br><span class="line">  b = deepClone(a);</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure><h3 id="call-apply-bind-的区别和实现方式"><a href="#call-apply-bind-的区别和实现方式" class="headerlink" title="call apply bind 的区别和实现方式"></a>call apply bind 的区别和实现方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call, apply, bind的区别</span></span><br><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"arguments in fn = "</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(name, age);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">getValue.call(a, <span class="string">"yuwangi1"</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">let</span> bindFoo = getValue.bind(a, <span class="string">"testBind"</span>, <span class="number">45</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"bindFoo = "</span>, bindFoo);</span><br><span class="line">bindFoo();</span><br><span class="line">getValue.apply(a, [<span class="string">"yuwangi2"</span>, <span class="number">18</span>]);</span><br><span class="line"><span class="keyword">var</span> returnedFunc = getValue.bind(a, <span class="string">"yuwangi3"</span>, <span class="number">19</span>);</span><br><span class="line"><span class="built_in">console</span>.log(returnedFunc);</span><br><span class="line">returnedFunc();</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/images/1641616161651684.png" alt="1641616161651684"></p><p>可以看到，call, apply 都是直接返回函数执行后的结果，而 bind 是返回一个函数，之后手动执行之后才会将结果返回。</p><ul><li>手写 call 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手写模拟call方法的思想</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * call方法思想：改变this指向，让新的对象可以执行这个方法</span></span><br><span class="line"><span class="comment"> * 实现思路：</span></span><br><span class="line"><span class="comment"> * 1、给新的对象添加一个函数（方法），并让this（也就是当前绑定的函数）指向这个函数</span></span><br><span class="line"><span class="comment"> * 2、执行这个函数</span></span><br><span class="line"><span class="comment"> * 3、执行完以后删除这个方法</span></span><br><span class="line"><span class="comment"> * 4、可以将执行结果返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">funcCtx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// funcCtx是当前要调用函数的对象</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"funcCtx = "</span>, funcCtx);</span><br><span class="line">  <span class="comment">// this指被调用的函数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"this = "</span>, <span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> != <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Erorr"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> ctx = funcCtx || global;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"arguemnets = "</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`args = <span class="subst">$&#123;args&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  ctx.fn = <span class="keyword">this</span>; <span class="comment">// 为当前对象添加一个函数fn, 值为要已经定义的要调用的函数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ctx.fn = "</span>, ctx.fn);</span><br><span class="line">  <span class="comment">// 执行添加的函数fn</span></span><br><span class="line">  <span class="keyword">var</span> result = ctx.fn(...args);</span><br><span class="line">  <span class="comment">// 执行完以后删除</span></span><br><span class="line">  <span class="keyword">delete</span> ctx.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">getValue.myCall(a, <span class="string">"test"</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><ul><li>手写 apply 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">funcCtx</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> != <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Erorr"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> ctx = funcCtx || global;</span><br><span class="line"></span><br><span class="line">  ctx.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"arguemnets = "</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    result = ctx.fn(...arguments[<span class="number">1</span>]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = ctx.fn();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> ctx.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">getValue.myApply(a, [<span class="string">"eo"</span>, <span class="number">50</span>]);</span><br></pre></td></tr></table></figure><ul><li>手写 bind 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bind实现</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现思想：</span></span><br><span class="line"><span class="comment"> * 1、返回一个函数，其他与call, apply类似</span></span><br><span class="line"><span class="comment"> * 2、如果返回的函数作为构造函数，bind时指定的 this 值会失效，但传入的参数依然生效。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span>(<span class="params">funcCtx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ctx = funcCtx || global;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 作为构造函数使用</span></span><br><span class="line">  <span class="keyword">let</span> Fbind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span> <span class="keyword">instanceof</span> Fbind ? <span class="keyword">this</span> : ctx;</span><br><span class="line">    <span class="keyword">return</span> _this.apply(self, args.concat(...arguments));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  f.prototype = <span class="keyword">this</span>.prototype;</span><br><span class="line">  Fbind.prototype = <span class="keyword">new</span> f();</span><br><span class="line">  <span class="keyword">return</span> Fbind;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/images/20191029163401.png" alt="20191029163401"></p><h3 id="谈谈原型链"><a href="#谈谈原型链" class="headerlink" title="谈谈原型链"></a>谈谈原型链</h3><p><code>javascript</code>中万物皆对象。每个对象都有属于它的类，比如自然界中大象属于动物，火腿属于食物…,在 js 中每个实例也有它的类。</p><p>比方说现在我创建一个<code>Person</code>类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">//定义了一个名字为Person的类</span></span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="comment">//constructor是一个构造方法，用来接收参数</span></span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">//this代表的是实例对象</span></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  say() &#123;</span><br><span class="line">    <span class="comment">//这是一个类的方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"我的名字叫"</span> + <span class="keyword">this</span>.name + <span class="string">"今年"</span> + <span class="keyword">this</span>.age + <span class="string">"岁了"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person(<span class="string">"yuwangi"</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.say()); <span class="comment">//我的名字叫yuwangi今年18岁了</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.prototype);</span><br></pre></td></tr></table></figure><p><img src="/images/20191029164937.png" alt="20191029164937"></p><p>这里每一个实例都拥有<code>Person</code>的 <code>say</code> 方法,实例的<code>__proto__</code>指向<code>Person</code>,<code>Person</code>的<code>constructor.prototype</code>还是<code>Person</code>。</p><p>网上找了个 关系图：</p><p><img src="/images/20191029165409.png" alt="20191029165409"></p><h3 id="从输入-url-地址到页面相应都发生了什么"><a href="#从输入-url-地址到页面相应都发生了什么" class="headerlink" title="从输入 url 地址到页面相应都发生了什么"></a>从输入 url 地址到页面相应都发生了什么</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、浏览器的地址栏输入URL并按下回车。</span><br><span class="line"><span class="number">2</span>、浏览器查找当前URL是否存在缓存，并比较缓存是否过期。<span class="number">3</span>、DNS解析URL对应的IP。</span><br><span class="line"><span class="number">4</span>、根据IP建立TCP连接（三次握手）。</span><br><span class="line"><span class="number">5</span>、HTTP发起请求。</span><br><span class="line"><span class="number">6</span>、服务器处理请求，浏览器接收HTTP响应。</span><br><span class="line"><span class="number">7</span>、渲染页面，构建DOM树。</span><br><span class="line"><span class="number">8</span>、关闭TCP连接（四次挥手）</span><br></pre></td></tr></table></figure><h3 id="session-cookie-sessionStorage-localStorage-的区别及应用场景"><a href="#session-cookie-sessionStorage-localStorage-的区别及应用场景" class="headerlink" title="session,cookie,sessionStorage,localStorage 的区别及应用场景"></a>session,cookie,sessionStorage,localStorage 的区别及应用场景</h3><h4 id="保存位置"><a href="#保存位置" class="headerlink" title="保存位置"></a>保存位置</h4><p><code>cookie</code>,<code>sessionStorage</code>,<code>localStorage</code> 都是保存在浏览器端的,<code>session</code>是保存在服务器端的</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>（1）<code>cookie</code>机制：如果不在浏览器中设置过期时间，<code>cookie</code>被保存在内存中，生命周期随浏览器的关闭而结束，这种<code>cookie</code>简称会话<code>cookie</code>。如果在浏览器中设置了<code>cookie</code>的过期时间，<code>cookie</code>被保存在硬盘中，关闭浏览器后，<code>cookie</code>数据仍然存在，直到过期时间结束才消失。</p><p><code>Cookie</code>是服务器发给客户端的特殊信息，<code>cookie</code>是以文本的方式保存在客户端，每次请求时都带上它</p><p>（2）<code>session</code>机制：当服务器收到请求需要创建<code>session</code>对象时，首先会检查客户端请求中是否包含<code>sessionid</code>。如果有<code>sessionid</code>，服务器将根据该<code>id</code>返回对应<code>session</code>对象。如果客户端请求中没有<code>sessionid</code>，服务器会创建新的<code>session</code>对象，并把<code>sessionid</code>在本次响应中返回给客户端。通常使用<code>cookie</code>方式存储<code>sessionid</code>到客户端，在交互中浏览器按照规则将<code>sessionid</code>发送给服务器。</p><h4 id="存储内容"><a href="#存储内容" class="headerlink" title="存储内容"></a>存储内容</h4><p><code>cookie</code>只能保存字符串类型，以文本的方式；<code>session</code>通过类似与<code>Hashtable</code>的数据结构来保存，能支持任何类型的对象(<code>session</code>中可含有多个对象)</p><h4 id="存储的大小"><a href="#存储的大小" class="headerlink" title="存储的大小"></a>存储的大小</h4><p><code>cookie</code>：单个<code>cookie</code>保存的数据不能超过<code>4kb</code>；<code>session</code>大小没有限制。</p><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p><code>cookie</code>：针对<code>cookie</code>所存在的攻击：Cookie 欺骗，Cookie 截获；<code>session</code>的安全性大于<code>cookie</code>。</p><p>原因如下：<br>（1）<code>sessionID</code>存储在<code>cookie</code>中，若要攻破<code>session</code>首先要攻破<code>cookie</code>；<br>（2）<code>sessionID</code>是要有人登录，或者启动<code>session_start</code>才会有，所以攻破<code>cookie</code>也不一定能得到<code>sessionID</code>；<br>（3）第二次启动<code>session_start</code>后，前一次的<code>sessionID</code>就是失效了，<code>session</code>过期后，<code>sessionID</code>也随之失效。<br>（4）<code>sessionID</code>是加密的<br>（5）综上所述，攻击者必须在短时间内攻破加密的<code>sessionID</code>，这很难。</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li><p>cookie：<br>（1）判断用户是否登陆过网站，以便下次登录时能够实现自动登录（或者记住密码）。如果我们删除<code>cookie</code>，则每次登录必须从新填写登录的相关信息。<br>（2）保存上次登录的时间等信息。<br>（3）保存上次查看的页面<br>（4）浏览计数</p></li><li><p>session：<code>Session</code>用于保存每个用户的专用信息，变量的值保存在服务器端，通过<code>SessionID</code>来区分不同的客户。<br>（1）网上商城中的购物车<br>（2）保存用户登录信息<br>（3）将某些数据放入<code>session</code>中，供同一用户的不同页面使用<br>（4）防止用户非法登录</p></li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><p>cookie：<br>（1）大小受限<br>（2）用户可以操作（禁用）cookie，使功能受限<br>（3）安全性较低<br>（4）有些状态不可能保存在客户端。<br>（5）每次访问都要传送 cookie 给服务器，浪费带宽。<br>（6）cookie 数据有路径（path）的概念，可以限制 cookie 只属于某个路径下。</p></li><li><p>session：<br>（1）Session 保存的东西越多，就越占用服务器内存，对于用户在线人数较多的网站，服务器的内存压力会比较大。<br>（2）依赖于 cookie（sessionID 保存在 cookie），如果禁用 cookie，则要使用 URL 重写，不安全<br>（3）创建 Session 变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以，过度使用 session 变量将会导致代码不可读而且不好维护。</p></li></ul><p>好了，下面再说说<code>localStorage</code>（本地存储）和<code>sessionStorage</code>（会话存储）。</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li>localStorage:localStorage 的生命周期是永久的，关闭页面或浏览器之后 localStorage 中的数据也不会消失</li><li>localStorage 除非主动删除数据，否则数据永远不会消失。</li></ul><p><code>sessionStorage</code>的生命周期是在仅在当前会话下有效。<code>sessionStorage</code>引入了一个“浏览器窗口”的概念，<code>sessionStorage</code>是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是<code>sessionStorage</code>在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，<code>sessionStorage</code>也是不一样的。</p><ul><li><p>存储大小：<br>localStorage 和 sessionStorage 的存储数据大小一般都是：5MB</p></li><li><p>存储位置：<br>localStorage 和 sessionStorage 都保存在客户端，不与服务器进行交互通信。</p></li><li><p>存储内容类型：<br>localStorage 和 sessionStorage 只能存储字符串类型，对于复杂的对象可以使用 ECMAScript 提供的 JSON 对象的 stringify 和 parse 来处理</p></li><li><p>获取方式：<br>localStorage：window.localStorage;；sessionStorage：window.sessionStorage;。</p></li><li><p>应用场景：<br>localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage：敏感账号一次性登录；</p></li></ul><h4 id="WebStorage-的优点"><a href="#WebStorage-的优点" class="headerlink" title="WebStorage 的优点"></a>WebStorage 的优点</h4><p>（1）存储空间更大：cookie 为 4KB，而 WebStorage 是 5MB；</p><p>（2）节省网络流量：WebStorage 不会传送到服务器，存储在本地的数据可以直接获取，也不会像 cookie 一样美词请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量；</p><p>（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage 会非常方便；</p><p>（4）快速显示：有的数据存储在 WebStorage 上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快；</p><p>（5）安全性：WebStorage 不会随着 HTTP header 发送到服务器端，所以安全性相对于 cookie 来说比较高一些，不会担心截获，但是仍然存在伪造问题；</p><p>（6）WebStorage 提供了一些方法，数据操作比 cookie 方便；</p><p>setItem (key, value) —— 保存数据，以键值对的方式储存信息。</p><p>getItem (key) —— 获取数据，将键值传入，即可获取到对应的 value 值。</p><p>removeItem (key) —— 删除单个数据，根据键值移除对应的信息。</p><p>clear () —— 删除所有的数据</p><p>key (index) —— 获取某个索引的 key</p><h3 id="js-中跨域方法"><a href="#js-中跨域方法" class="headerlink" title="js 中跨域方法"></a>js 中跨域方法</h3><p>详情请看 多种跨域方案详解 <a href="https://yuwangi.github.io/articles/3222442466.html">https://yuwangi.github.io/articles/3222442466.html</a></p><h3 id="数组去重的方法"><a href="#数组去重的方法" class="headerlink" title="数组去重的方法"></a>数组去重的方法</h3><ul><li>一维数组排序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用ES6中的 Set 方法去重</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)); <span class="comment">// [1,0,2,9,8,3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(...new <span class="built_in">Set</span>(arr)); <span class="comment">// [1,0,2,9,8,3]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    模拟: 原始数组：[1,2,8,9,5,8,4,0,4]</span></span><br><span class="line"><span class="comment">    索引值：0,1,2,3,4,5,6,7,8</span></span><br><span class="line"><span class="comment">    伪新数组：[1,2,8,9,5,8,4,0,4]</span></span><br><span class="line"><span class="comment">    使用indexOf方法找到数组中的元素在元素在中第一次出现的索引值</span></span><br><span class="line"><span class="comment">    索引值：0,1,2,3,4,2,6,7,6</span></span><br><span class="line"><span class="comment">    返回前后索引值相同的元素：</span></span><br><span class="line"><span class="comment">    新数组：[1,2,8,9,5,4,0]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果新数组的当前元素的索引值 == 该元素在原始数组中的第一个索引，则返回当前元素</span></span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(item, <span class="number">0</span>) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)); <span class="comment">//  1, 2, 8, 9, 5, 4, 0</span></span><br></pre></td></tr></table></figure><ul><li>多维数组排序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  recursion(array); <span class="comment">// 调用递归将多维数组变为一维数组再去重</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(temp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新增递归函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursion</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = array.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> array[i] == <span class="string">"object"</span>) &#123;</span><br><span class="line">      <span class="comment">// 如若数组元素类型是object，则递归</span></span><br><span class="line">      recursion(array[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      temp.push(array[i]); <span class="comment">// 否则添加到temp数组中</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, [<span class="number">1</span>, <span class="number">6</span>, [<span class="number">3</span>, <span class="number">5</span>, <span class="string">"3"</span>]]]];</span><br><span class="line"><span class="built_in">console</span>.log(uniq(arr));</span><br></pre></td></tr></table></figure><h3 id="ajax-的状态码"><a href="#ajax-的状态码" class="headerlink" title="ajax 的状态码"></a>ajax 的状态码</h3><ul><li>200: 代表请求成功；</li><li>301: 永久重定向；</li><li>302: 临时转移</li><li>304: 读取缓存 [表示浏览器端有缓存，并且服务端未更新，不再向服务端请求资源]</li><li>307: 临时重定向</li><li>400: 数据/格式错误</li><li>401: 权限不够；（身份不合格，访问网站的时候，登录和不登录是不一样的）</li><li>404: 路径错误，找不到文件</li><li>500: 服务器的问题</li><li>503: 超负荷；</li></ul><h3 id="异步解决方案-Promise-await-promise"><a href="#异步解决方案-Promise-await-promise" class="headerlink" title="异步解决方案 Promise await promise"></a>异步解决方案 Promise await promise</h3><p>定时器、ajax、事件绑定、回调函数、async await、promise</p><p>promise：<br>1.是一个对象，用来传递异步操作的信息。代表着某个未来才会知道结果的时间，并未这个事件提供统一的api，供进异步处理<br>2.有了这个对象，就可以让异步操作以同步的操作的流程来表达出来，避免层层嵌套的回调地狱<br>3.promise代表一个异步状态，有三个状态pending（进行中），Resolve(以完成），Reject（失败）<br>4.一旦状态改变，就不会在变。任何时候都可以得到结果。从进行中变为以完成或者失败<br>promise.all() 里面状态都改变，那就会输出，得到一个数组<br>promise.race() 里面只有一个状态变为rejected或者fulfilled即输出<br>promis.finally()不管指定不管Promise对象最后状态如何，都会执行的操作（本质上还是then方法的特例）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手写promise</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CutePromise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">    <span class="comment">// executor是我们实例化CutePromise时传入的参数函数，它接受两个参数，分别是resolve和reject。</span></span><br><span class="line">    <span class="comment">// resolve和reject我们将会定义在constructor当中，供executor在执行的时候调用</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> executor !== <span class="string">"function"</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Executor must be a function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">"PENDING"</span>;</span><br><span class="line">    <span class="keyword">this</span>.chained = [];</span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state !== <span class="string">"PENDING"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">"FULFILLED"</span>;</span><br><span class="line">      <span class="keyword">this</span>.internalValue = res;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> &#123; onFulfilled &#125; <span class="keyword">of</span> <span class="keyword">this</span>.chained) &#123;</span><br><span class="line">        onFulfilled(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state !== <span class="string">"PENDING"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">"REJECTED"</span>;</span><br><span class="line">      <span class="keyword">this</span>.internalValue = err;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> &#123; onRejected &#125; <span class="keyword">of</span> <span class="keyword">this</span>.chained) &#123;</span><br><span class="line">        onRejected(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 为实例提供一个then的方法，接收两个参数函数，</span></span><br><span class="line">  <span class="comment">// 第一个参数函数必传，它会在promise已成功(fulfilled)以后被调用</span></span><br><span class="line">  <span class="comment">// 第二个参数非必传，它会在promise已失败(rejected)以后被调用</span></span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">"FULFILLED"</span>) &#123;</span><br><span class="line">      onFulfilled(<span class="keyword">this</span>.internalValue);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.$state === <span class="string">"REJECTED"</span>) &#123;</span><br><span class="line">      onRejected(<span class="keyword">this</span>.internalValue);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.chained.push(&#123; onFulfilled, onRejected &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> CutePromise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="string">"Hello"</span>), <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res));</span><br><span class="line">p = <span class="keyword">new</span> CutePromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="string">"err"</span>), <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;, err =&gt; <span class="built_in">console</span>.log(<span class="string">"Async error:"</span>, err));</span><br></pre></td></tr></table></figure><p><img src="/images/20191029180316.png" alt="20191029180316.png"></p><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;div id=<span class="string">"box"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"add"</span> value=<span class="string">"添加"</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"remove"</span> value=<span class="string">"删除"</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"move"</span> value=<span class="string">"移动"</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"select"</span> value=<span class="string">"选择"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/js</span></span><br><span class="line"><span class="regexp">window.onload = function()&#123;</span></span><br><span class="line"><span class="regexp">    var oBox = document.getElementById("box");</span></span><br><span class="line"><span class="regexp">    oBox.onclick = function (ev) &#123;</span></span><br><span class="line"><span class="regexp">        var ev = ev || window.event;</span></span><br><span class="line"><span class="regexp">        var target = ev.target || ev.srcElement;</span></span><br><span class="line"><span class="regexp">        if(target.nodeName.toLocaleLowerCase() == 'input')&#123;</span></span><br><span class="line"><span class="regexp">            switch(target.id)&#123;</span></span><br><span class="line"><span class="regexp">                case 'add' :</span></span><br><span class="line"><span class="regexp">                    alert('添加');</span></span><br><span class="line"><span class="regexp">                    break;</span></span><br><span class="line"><span class="regexp">                case 'remove' :</span></span><br><span class="line"><span class="regexp">                    alert('删除');</span></span><br><span class="line"><span class="regexp">                    break;</span></span><br><span class="line"><span class="regexp">                case 'move' :</span></span><br><span class="line"><span class="regexp">                    alert('移动');</span></span><br><span class="line"><span class="regexp">                    break;</span></span><br><span class="line"><span class="regexp">                case 'select' :</span></span><br><span class="line"><span class="regexp">                    alert('选择');</span></span><br><span class="line"><span class="regexp">                    break;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>垃圾回收机制是为了以防内存泄漏，内存泄漏的含义就是当已经不需要某块内存时这块内存还存在着，垃圾回收机制就是间歇的不定期的寻找到不再使用的变量，并释放掉它们所指向的内存。</p><h4 id="垃圾回收方式"><a href="#垃圾回收方式" class="headerlink" title="垃圾回收方式"></a>垃圾回收方式</h4><ul><li>标记清除（mark and sweep）</li></ul><p>当变量进入执行环境是，就标记这个变量为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到他们。当变量离开环境时，则将其标记为“离开环境”。<br>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。</p><ul><li>引用计数(reference counting)</li></ul><p>引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为0的值所占的内存。</p><h3 id="数组循环方法和效率"><a href="#数组循环方法和效率" class="headerlink" title="数组循环方法和效率"></a>数组循环方法和效率</h3><p>详情请看这篇文章 <a href="https://yuwangi.github.io/articles/341754589.html">https://yuwangi.github.io/articles/341754589.html</a></p><h3 id="setTimeout和Promise区别（宏任务和微任务）"><a href="#setTimeout和Promise区别（宏任务和微任务）" class="headerlink" title="setTimeout和Promise区别（宏任务和微任务）"></a>setTimeout和Promise区别（宏任务和微任务）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'宏任务setTimeout'</span>);  <span class="comment">//先遇到setTimeout，将其回调函数注册后分发到宏任务Event Queue</span></span><br><span class="line">  <span class="comment">//如果setTimeout设置时间，那它会先把函数放到宏任务Event Table,等时间到了再放入宏任务Event Queue里面</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'微任务promise'</span>);  <span class="comment">//new Promise函数立即执行</span></span><br><span class="line">    resolve();<span class="comment">//必须resolve执行才能执行then</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'微任务then'</span>);   <span class="comment">//then函数分发到微任务Event Queue</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'主线程console'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行顺序结果： 微任务promise、主线程console、微任务then、宏任务setTimeout</span></span><br></pre></td></tr></table></figure><h3 id="let、const面试题"><a href="#let、const面试题" class="headerlink" title="let、const面试题"></a>let、const面试题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;,i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i)<span class="comment">// 6 6 6 6 6</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j)</span><br><span class="line">        &#125;,j*<span class="number">1000</span>)</span><br><span class="line">    &#125;)()<span class="comment">// 6 6 6 6 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j)</span><br><span class="line">        &#125;,j*<span class="number">1000</span>)</span><br><span class="line">    &#125;)(i)<span class="comment">// 0 1 2 3 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let</span></span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);  <span class="comment">//  5 5 5 5 5</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);  <span class="comment">//  0 1 2 3 4</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this作用域试题"><a href="#this作用域试题" class="headerlink" title="this作用域试题"></a>this作用域试题</h3><p>这些题请抹去答案后 自己想一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'zhangsan'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> name1 = <span class="string">'zhangsan'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name1) <span class="comment">// 报错，因为let定义的name是在if这个块级作⽤域</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">aaa();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=b=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">aaa();</span><br><span class="line"><span class="built_in">console</span>.log(b)<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'222'</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    name : <span class="string">'111'</span>,</span><br><span class="line">    say : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = a.say;</span><br><span class="line">fun() <span class="comment">//222</span></span><br><span class="line">a.say() <span class="comment">//111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    name : <span class="string">'333'</span>,</span><br><span class="line">    say : <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>) </span>&#123;</span><br><span class="line">        fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.say(a.say); <span class="comment">//222</span></span><br><span class="line">b.say = a.say;</span><br><span class="line">b.say() <span class="comment">//333</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> val = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">val : <span class="number">2</span>,</span><br><span class="line">dbl : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> val = <span class="number">45</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//window</span></span><br><span class="line">        <span class="keyword">this</span>.val *= <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.val); <span class="comment">//2</span></span><br><span class="line">        <span class="built_in">console</span>.log(val); <span class="comment">//45</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = obj.dbl</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">12</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x)</span><br><span class="line">&#125;</span><br><span class="line">test() <span class="comment">//12</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">12</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    x:<span class="number">45</span>,</span><br><span class="line">    ss:test</span><br><span class="line">&#125;</span><br><span class="line">obj.ss() <span class="comment">//45</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">12</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x)<span class="comment">//12</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    x:<span class="number">45</span>,</span><br><span class="line">    ss:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">        test()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.ss() <span class="comment">//&#123;x: 45, ss: ƒ&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> val = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">val : <span class="number">2</span>,</span><br><span class="line">dbl : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// var val = 45;</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &#123;val: 2, dbl: ƒ&#125;</span></span><br><span class="line">        <span class="keyword">this</span>.val *= <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.val); <span class="comment">// 4</span></span><br><span class="line">        <span class="built_in">console</span>.log(val); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ff = obj.dbl()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本篇文章主要写web前端面试总结
    
    </summary>
    
    
    
      <category term="面试" scheme="https://yuwangi.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>mocker-api-json</title>
    <link href="https://yuwangi.github.io/articles/1427260442.html"/>
    <id>https://yuwangi.github.io/articles/1427260442.html</id>
    <published>2019-10-25T02:56:05.000Z</published>
    <updated>2020-01-03T02:10:47.458Z</updated>
    
    <content type="html"><![CDATA[<p>喜大普奔,我的<a href="https://www.npmjs.com/package/mocker-api-json" title="mocker-api-json" target="_blank" rel="noopener">npm</a>包上线啦~！！！<br><img src="/images/991271764c504b5ba6e36ca1f37a58fd.jpeg" alt="991271764c504b5ba6e36ca1f37a58fd.jpeg"></p><h2 id="攻略"><a href="#攻略" class="headerlink" title="攻略"></a>攻略</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mocker-api-json mocker-api --save-dev</span><br></pre></td></tr></table></figure><a id="more"></a><p><code>webpack dev</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BaseConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apiMocker = <span class="built_in">require</span>(<span class="string">'mocker-api'</span>);</span><br><span class="line"><span class="comment">//webpack配置</span></span><br><span class="line">mode: <span class="string">'development'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    port: <span class="number">9001</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    historyApiFallback: &#123;</span><br><span class="line">      rewrites: [&#123;</span><br><span class="line">        <span class="keyword">from</span>: <span class="regexp">/.*/g</span>,</span><br><span class="line">        to: <span class="string">'/www/view/index.html'</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://test01.test.com:8091/'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    before(app) &#123;<span class="comment">//此处是重点`!!!!!!!!!!!!!!!</span></span><br><span class="line">      <span class="comment">//https://www.webpackjs.com/configuration/dev-server/#devserver-before</span></span><br><span class="line">      apiMocker(app, path.resolve(__dirname, <span class="string">'../mock/index.js'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><code>mock/index.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> json = <span class="built_in">require</span>(<span class="string">"mocker-api-json"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = json(&#123;</span><br><span class="line">  mock: <span class="literal">true</span>, <span class="comment">//全局打开mock</span></span><br><span class="line">  dirname: __dirname, <span class="comment">//当前文件路径</span></span><br><span class="line">  baseUrl: <span class="string">"api/"</span>, <span class="comment">//公共请求链接</span></span><br><span class="line">  delay: <span class="number">10</span> <span class="comment">//延迟时间</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>额… 目前只加了这几个配置，后续提 issues 再加吧</p><p>Mock 资源文件配置</p><p><img src="https://yuwangi.github.io/images/52646541651634.png" alt="52646541651634.png"></p><p><code>json</code>文件就这样</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"err_code"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"err_msg"</span>: <span class="string">"ok"</span>,</span><br><span class="line">  "mock": true, //控制单个文件mock开关</span><br><span class="line">  "data": &#123;</span><br><span class="line">    "poi": &#123;</span><br><span class="line">      "z_id": "111111111111",</span><br><span class="line">      "name": "中国技术交易大厦大厦大厦",</span><br><span class="line">      "province": "",</span><br><span class="line">      "city": "北京市",</span><br><span class="line">      "district": "海淀区",</span><br><span class="line">      "longitude": 116.307499005,</span><br><span class="line">      "latitude": 39.111,</span><br><span class="line">      "addr": "",</span><br><span class="line">      "category": "房产小区:商务楼宇",</span><br><span class="line">      "category_code": 281200,</span><br><span class="line">      "expiration_label": 0,</span><br><span class="line">      "phone": ""</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>大概就这些啦，如有问题<a href="https://yuwangi.github.io/about/" title="mocker-api-json">yuwangi.github.io</a> 联系我</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;喜大普奔,我的&lt;a href=&quot;https://www.npmjs.com/package/mocker-api-json&quot; title=&quot;mocker-api-json&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;npm&lt;/a&gt;包上线啦~！！！&lt;br&gt;&lt;img src=&quot;/images/991271764c504b5ba6e36ca1f37a58fd.jpeg&quot; alt=&quot;991271764c504b5ba6e36ca1f37a58fd.jpeg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;攻略&quot;&gt;&lt;a href=&quot;#攻略&quot; class=&quot;headerlink&quot; title=&quot;攻略&quot;&gt;&lt;/a&gt;攻略&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install mocker-api-json mocker-api --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Mock" scheme="https://yuwangi.github.io/tags/Mock/"/>
    
      <category term="mocker-api-json" scheme="https://yuwangi.github.io/tags/mocker-api-json/"/>
    
      <category term="Mock本地化配置" scheme="https://yuwangi.github.io/tags/Mock%E6%9C%AC%E5%9C%B0%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>ES6 Map、WeakMap详解</title>
    <link href="https://yuwangi.github.io/articles/1178710130.html"/>
    <id>https://yuwangi.github.io/articles/1178710130.html</id>
    <published>2019-10-24T03:41:00.000Z</published>
    <updated>2019-12-06T08:06:37.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>如果你的 <code>JavaScript</code> 经验丰富的话，应该会了解对象是创建无序键/值对数据结构 [也称为 映射（<code>map</code>）] 的主要机制。但是，对象作为映射的主要缺点是不能使用非字符串值作为键。</p><p>举例来说，考虑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    y = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line">m[x] = <span class="string">"foo"</span>;</span><br><span class="line">m[y] = <span class="string">"bar"</span>;</span><br><span class="line"></span><br><span class="line">m[x];               <span class="comment">// "bar"</span></span><br><span class="line">m[y];               <span class="comment">// "bar"</span></span><br></pre></td></tr></table></figure><p>这里发生了什么？ <code>x</code> 和 <code>y</code> 两个对象字符串化都是 <code>&quot;[object Object]&quot;</code>，所以 <code>m</code> 中只设置了一个键。</p><a id="more"></a><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>在ES6中引入了 <code>Map(..)</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>():</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    y = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line">m.set( x, <span class="string">"foo"</span> );</span><br><span class="line">m.set( y, <span class="string">"bar"</span> );</span><br><span class="line"></span><br><span class="line">m.get( x );                  <span class="comment">// "foo"</span></span><br><span class="line">m.get( y );                  <span class="comment">// "bar"</span></span><br></pre></td></tr></table></figure><p>这里唯一的缺点就是不能使用方括号 <code>[ ]</code> 语法设置和获取值，但完全可以使用 <code>get(..)</code> 和 <code>set(..)</code> 方法完美代替。</p><p>要从 <code>map</code> 中删除一个元素，不要使用 <code>delete</code> 运算符，而是要使用 <code>delete()</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m.set( x, <span class="string">"foo"</span> );</span><br><span class="line">m.set( y, <span class="string">"bar"</span> );</span><br><span class="line"></span><br><span class="line">m.delete( y );</span><br></pre></td></tr></table></figure><p>你可以通过 <code>clear()</code> 清除整个 <code>map</code> 的内容。要得到 <code>map</code> 的长度（也就是键的个数），可以 使用 <code>size</code> 属性（而不是 <code>length</code>）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m.set( x, <span class="string">"foo"</span> );</span><br><span class="line">m.set( y, <span class="string">"bar"</span> );</span><br><span class="line">m.size;                         <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">m.clear();</span><br><span class="line">m.size;                         <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><code>Map(..)</code> 构造器也可以接受一个 <code>iterable</code>，这个迭代器必须产生一列数组，每个数组的第一个元素是键，第二个元素是值。这种迭代的形式和 <code>entries()</code> 方法产生的形式是完全一样的，这使得创建一个 <code>map</code> 的副本很容易：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m2 = <span class="keyword">new</span> <span class="built_in">Map</span>( m.entries() );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于：</span></span><br><span class="line"><span class="keyword">var</span> m2 = <span class="keyword">new</span> <span class="built_in">Map</span>( m );</span><br></pre></td></tr></table></figure><p>因为 <code>map</code> 的实例是一个 <code>iterable</code>，它的默认迭代器与 <code>entries()</code> 相同，所以我们更推荐使用 后面这个简短的形式。<br>当然，也可以在 <code>Map(..)</code> 构造器中手动指定一个项目（<code>entry</code>）列表（键 / 值数组的数组）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    y = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [ x, <span class="string">"foo"</span> ],</span><br><span class="line">    [ y, <span class="string">"bar"</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">m.get( x );            <span class="comment">// "foo"</span></span><br><span class="line">m.get( y );           <span class="comment">// "bar"</span></span><br></pre></td></tr></table></figure><h2 id="Map取值"><a href="#Map取值" class="headerlink" title="Map取值"></a>Map取值</h2><p>要从<code>map</code> 中得到一列值，可以使用 <code>values(..)</code>，它会返回一个迭代器。比如spread 运算符 … 和 for..of 循环。另外， <code>Array.from(..)</code> 方法。考虑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    y = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line">m.set( x, <span class="string">"foo"</span> );</span><br><span class="line">m.set( y, <span class="string">"bar"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vals = [ ...m.values() ];</span><br><span class="line"></span><br><span class="line">vals;                          <span class="comment">// ["foo","bar"]</span></span><br><span class="line"><span class="built_in">Array</span>.from( m.values() );      <span class="comment">// ["foo","bar"]</span></span><br></pre></td></tr></table></figure><p>可以在一个 map 的项目上使用 <code>entries()</code> 迭代（或者默认 <code>map</code> 迭代器）:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    y = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line">m.set( x, <span class="string">"foo"</span> );</span><br><span class="line">m.set( y, <span class="string">"bar"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vals = [ ...m.entries()];</span><br><span class="line"></span><br><span class="line">vals[<span class="number">0</span>][<span class="number">0</span>] === x;             <span class="comment">// true</span></span><br><span class="line">vals[<span class="number">0</span>][<span class="number">1</span>];                   <span class="comment">// "foo"</span></span><br><span class="line"></span><br><span class="line">vals[<span class="number">1</span>][<span class="number">0</span>] === y;             <span class="comment">// true</span></span><br><span class="line">vals[<span class="number">1</span>][<span class="number">1</span>];                   <span class="comment">// "bar"</span></span><br></pre></td></tr></table></figure><h2 id="Map键值"><a href="#Map键值" class="headerlink" title="Map键值"></a>Map键值</h2><p>要得到一列键，可以使用 <code>keys()</code>，它会返回 <code>map</code> 中键上的迭代器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    y = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line">m.set( x, <span class="string">"foo"</span> );</span><br><span class="line">m.set( y, <span class="string">"bar"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> keys = [ ...m.keys()];</span><br><span class="line"></span><br><span class="line">keys[<span class="number">0</span>] === x;                <span class="comment">// true</span></span><br><span class="line">keys[<span class="number">1</span>] === y;                <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>要确定一个 map 中是否有给定的键，可以使用 <code>has(..)</code>方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    y = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line">m.set( x, <span class="string">"foo"</span> );</span><br><span class="line"></span><br><span class="line">m.has( x );                    <span class="comment">// true</span></span><br><span class="line">m.has( y );                    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>map</code> 的本质是允许你把某些额外的信息（值）关联到一个对象（键）上，而无需把这个信 息放入对象本身。<br>对于 <code>map</code> 来说，尽管可以使用任意类型的值作为键，但通常我们会使用对象，因为字符串 或者其他基本类型已经可以作为普通对象的键使用。换句话说，除非某些或者全部键需要是对象，否则可以继续使用普通对象作为影射，这种情况下 <code>map</code> 才更加合适。</p><ul><li>Tips:如果使用对象作为映射的键，这个对象后来被丢弃（所有的引用解除），试图让垃圾回收（<code>GC</code>）回收其内存，那么 <code>map</code> 本身仍会保持其项目。你需要 从 <code>map</code> 中移除这个项目来支持 <code>GC</code>,这时候就需要 <code>WeakMap</code>。</li></ul><h2 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h2><p><code>WeakMap</code> 是 <code>map</code> 的变体，二者的多数外部行为特性都是一样的，区别在于内部内存分配 （特别是其 <code>GC</code>）的工作方式。<br><code>WeakMap</code>（只）接受对象作为键。这些对象是被弱持有的，也就是说如果对象本身被垃圾回收的话，在 <code>WeakMap</code> 中的这个项目也会被移除。然而我们无法观测到这一点，因为对象被垃圾回收的唯一方式是没有对它的引用了。但是一旦不再有引用，你也就没有对象引 用来查看它是否还存在于这个 <code>WeakMap</code> 中了。</p><p>除此之外，WeakMap 的 API 是类似的，尽管要更少一些:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    y = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line">m.set( x, <span class="string">"foo"</span> );</span><br><span class="line"></span><br><span class="line">m.has( x );                <span class="comment">// true</span></span><br><span class="line">m.has( y );                <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>WeakMap</code> 没有 <code>size</code> 属性或 <code>clear()</code> 方法，也不会暴露任何键、值或项目上的迭代器。所以即使你解除了对 <code>x</code> 的引用，它将会因 <code>GC</code> 时这个条目被从 <code>m</code> 中移除，也没有办法确定这一事实。所以你就相信 <code>JavaScript</code> 所声明的吧</p><p>和 <code>Map</code> 一样，通过 <code>WeakMap</code> 可以把信息与一个对象软关联起来。而在对这个对象没有完 全控制权的时候，这个功能特别有用，比如 <code>DOM</code> 元素。如果作为映射键的对象可以被删除，并支持垃圾回收，那么 <code>WeakMap</code> 就更是合适的选择了。<br>需要注意的是，<code>WeakMap</code> 只是弱持有它的键，而不是值。考虑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    y = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    z = &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;,</span><br><span class="line">    w = &#123; <span class="attr">id</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">m.set( x, y );</span><br><span class="line"></span><br><span class="line">x = <span class="literal">null</span>;                    <span class="comment">// &#123; id: 1 &#125; 可GC</span></span><br><span class="line">y = <span class="literal">null</span>;                    <span class="comment">// &#123; id: 2 &#125; 可GC</span></span><br><span class="line">                             <span class="comment">// 只因 &#123; id: 1 &#125; 可GC</span></span><br><span class="line"></span><br><span class="line">m.set( z, w );</span><br><span class="line"></span><br><span class="line">w = <span class="literal">null</span>;                    <span class="comment">// &#123; id: 4 &#125; 不可GC</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本篇文章主要写ES6中Map、WeakMap的详解
    
    </summary>
    
    
    
      <category term="ES6" scheme="https://yuwangi.github.io/tags/ES6/"/>
    
      <category term="Map" scheme="https://yuwangi.github.io/tags/Map/"/>
    
      <category term="js" scheme="https://yuwangi.github.io/tags/js/"/>
    
      <category term="WeakMap" scheme="https://yuwangi.github.io/tags/WeakMap/"/>
    
  </entry>
  
  <entry>
    <title>浏览器缓存机制：强缓存、协商缓存</title>
    <link href="https://yuwangi.github.io/articles/2460136963.html"/>
    <id>https://yuwangi.github.io/articles/2460136963.html</id>
    <published>2019-10-23T07:07:34.000Z</published>
    <updated>2019-12-06T08:06:37.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>良好的缓存策略可以降低资源的重复加载提高网页的整体加载速度<br>通常浏览器缓存策略分为两种：强缓存和协商缓存</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><ul><li>浏览器在加载资源时，根据请求头的expires和cache-control判断是否命中强缓存，是则直接从缓存读取资源，不会发请求到服务器。</li><li>如果没有命中强缓存，浏览器一定会发送一个请求到服务器，通过last-modified和etag验证资源是否命中协商缓存，如果命中，服务器会将这个请求返回，但是不会返回这个资源的数据，依然是从缓存中读取资源</li><li>如果前面两者都没有命中，直接从服务器加载资源<a id="more"></a><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3></li></ul><p>如果命中，都是从客户端缓存中加载资源，而不是从服务器加载资源数据；</p><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><p>强缓存不发请求到服务器，协商缓存会发请求到服务器。</p><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><p>强缓存通过<code>Expires</code>和<code>Cache-Control</code>两种响应头实现</p><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>Expires是http1.0提出的一个表示资源过期时间的header，它描述的是一个绝对时间，由服务器返回。<br>Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires: Wed, 11 May 2018 07:20:00 GMT</span><br></pre></td></tr></table></figure><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>Cache-Control 出现于 HTTP / 1.1，优先级高于 Expires ,表示的是相对时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: max-age=315360000</span><br></pre></td></tr></table></figure><ul><li>tips:</li></ul><p><code>Cache-Control</code>: <code>no-cache</code>不会缓存数据到本地的说法是错误的，详情《HTTP权威指南》P182<br><img src="/images/45fc8ed04dd4.png" alt="45fc8ed04dd4.png"><br><code>Cache-Control</code>: <code>no-store</code>才是真正的不缓存数据到本地<br><code>Cache-Control</code>: <code>public</code>可以被所有用户缓存（多用户共享），包括终端和CDN等中间代理服务器<br><code>Cache-Control</code>: <code>private</code>只能被终端浏览器缓存（而且是私有缓存），不允许中继缓存服务器进行缓存</p><p><img src="/images/8c6b0e4935a8.png" alt="8c6b0e4935a8.png"></p><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>当浏览器对某个资源的请求没有命中强缓存，就会发一个请求到服务器，验证协商缓存是否命中，如果协商缓存命中，请求响应返回的http状态为304并且会显示一个Not Modified的字符串</p><p>协商缓存是利用的是【<code>Last-Modified</code>，<code>If-Modified-Since</code>】和【<code>ETag</code>、<code>If-None-Match</code>】这两对Header来管理的</p><h3 id="Last-Modified，If-Modified-Since"><a href="#Last-Modified，If-Modified-Since" class="headerlink" title="Last-Modified，If-Modified-Since"></a>Last-Modified，If-Modified-Since</h3><p><code>Last-Modified</code> 表示本地文件最后修改日期，浏览器会在<code>request header</code>加上<code>If-Modified-Since</code>（上次返回的Last-Modified的值），询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来</p><p>但是如果在本地打开缓存文件，就会造成 <code>Last-Modified</code> 被修改，所以在 <code>HTTP / 1.1</code> 出现了 <code>ETag</code></p><h3 id="ETag、If-None-Match"><a href="#ETag、If-None-Match" class="headerlink" title="ETag、If-None-Match"></a>ETag、If-None-Match</h3><p><code>Etag</code>就像一个指纹，资源变化都会导致<code>ETag</code>变化，跟最后修改时间没有关系，<code>ETag</code>可以保证每一个资源是唯一的</p><p><code>If-None-Match</code>的header会将上次返回的<code>Etag</code>发送给服务器，询问该资源的<code>Etag</code>是否有更新，有变动就会发送新的资源回来</p><p><img src="/images/fe7c729ab6e5.png" alt="fe7c729ab6e5.png"></p><p><code>ETag</code>的优先级比<code>Last-Modified</code>更高</p><p>具体为什么要用ETag，主要出于下面几种情况考虑：</p><ul><li>一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；</li><li>某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；</li><li>某些服务器不能精确的得到文件的最后修改时间。</li></ul><h2 id="整体流程图"><a href="#整体流程图" class="headerlink" title="整体流程图"></a>整体流程图</h2><p><img src="/images/79814b6971a5.png" alt="79814b6971a5.png"></p><h2 id="几种状态码的区别"><a href="#几种状态码的区别" class="headerlink" title="几种状态码的区别"></a>几种状态码的区别</h2><ul><li><code>200</code>：强缓Expires/Cache-Control存失效时，返回新的资源文件</li><li><code>200(from cache)</code>: 强缓Expires/Cache-Control两者都存在，未过期，Cache-Control优先Expires时，浏览器从本地获取资源成功</li><li><code>304(Not Modified )</code>：协商缓存Last-modified/Etag没有过期时，服务端返回状态码304</li></ul><p><strong>但是！但是！</strong><br>现在的200(from cache)已经变成了from disk cache(磁盘缓存)和from memory cache(内存缓存)两种<br>打开chrome控制台看一下网络请求就知道了</p><p><img src="/images/20191023152346.png" alt="20191023152346.png"></p><h2 id="如何选择合适的缓存"><a href="#如何选择合适的缓存" class="headerlink" title="如何选择合适的缓存"></a>如何选择合适的缓存</h2><p>大致的顺序</p><ul><li>Cache-Control —— 请求服务器之前</li><li>Expires —— 请求服务器之前</li><li>If-None-Match (Etag) —— 请求服务器</li><li>If-Modified-Since (Last-Modified) —— 请求服务器</li></ul><p>协商缓存需要配合强缓存使用，如果不启用强缓存的话，协商缓存根本没有意义</p><p>大部分web服务器都默认开启协商缓存，而且是同时启用【<code>Last-Modified</code>，<code>If-Modified-Since</code>】和【<code>ETag</code>、<code>If-None-Match</code>】</p><p>但是下面的场景需要注意：</p><p>分布式系统里多台机器间文件的<code>Last-Modified</code>必须保持一致，以免负载均衡到不同机器导致比对失败；<br>分布式系统尽量关闭掉<code>ETag</code>(每台机器生成的<code>ETag</code>都会不一样）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;良好的缓存策略可以降低资源的重复加载提高网页的整体加载速度&lt;br&gt;通常浏览器缓存策略分为两种：强缓存和协商缓存&lt;/p&gt;
&lt;h3 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;浏览器在加载资源时，根据请求头的expires和cache-control判断是否命中强缓存，是则直接从缓存读取资源，不会发请求到服务器。&lt;/li&gt;
&lt;li&gt;如果没有命中强缓存，浏览器一定会发送一个请求到服务器，通过last-modified和etag验证资源是否命中协商缓存，如果命中，服务器会将这个请求返回，但是不会返回这个资源的数据，依然是从缓存中读取资源&lt;/li&gt;
&lt;li&gt;如果前面两者都没有命中，直接从服务器加载资源
    
    </summary>
    
    
    
      <category term="缓存" scheme="https://yuwangi.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>多种跨域方案详解</title>
    <link href="https://yuwangi.github.io/articles/3222442466.html"/>
    <id>https://yuwangi.github.io/articles/3222442466.html</id>
    <published>2019-10-14T02:25:28.000Z</published>
    <updated>2019-12-06T08:06:37.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以 xyz.com 下的 js 脚本采用 ajax 读取 abc.com 里面的文件数据是会被拒绝的。</p><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p><p>所谓同源是指：域名、协议、端口相同。</p><a id="more"></a><table><thead><tr><th>网址</th><th>结果</th><th>原因</th></tr></thead><tbody><tr><td><a href="https://yuwangi.github.io">https://yuwangi.github.io</a></td><td>成功</td><td>域名、协议、端口均相同</td></tr><tr><td><a href="http://yuwangi.github.io">http://yuwangi.github.io</a></td><td>失败</td><td>协议不同</td></tr><tr><td><a href="https://yuwangi.github.io:9001">https://yuwangi.github.io:9001</a></td><td>失败</td><td>端口不同</td></tr><tr><td><a href="https://smwang.github.io" target="_blank" rel="noopener">https://smwang.github.io</a></td><td>失败</td><td>域名不同</td></tr></tbody></table><h3 id="为什么要有跨域限制"><a href="#为什么要有跨域限制" class="headerlink" title="为什么要有跨域限制"></a>为什么要有跨域限制</h3><p>因为存在浏览器同源策略，所以才会有跨域问题。那么浏览器是出于何种原因会有跨域的限制呢。其实不难想到，跨域限制主要的目的就是为了用户的上网安全。</p><p>如果浏览器没有同源策略，会存在什么样的安全问题呢。下面从 <code>DOM</code> 同源策略和 <code>XMLHttpRequest</code> 同源策略来举例说明：</p><p>如果没有 <code>DOM</code> 同源策略，也就是说不同域的 <code>iframe</code> 之间可以相互访问，那么黑客可以这样进行攻击：</p><p>做一个假网站，里面用 <code>iframe</code> 嵌套一个银行网站 <code>http://mybank.com</code><br>把 <code>iframe</code> 宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。<br>这时如果用户输入账号密码，我们的主网站可以跨域访问到 <code>http://mybank.com</code> 的 <code>dom</code> 节点，就可以拿到用户的账户密码了。<br>如果 <code>XMLHttpRequest</code> 同源策略，那么黑客可以进行 <code>CSRF</code>（跨站请求伪造） 攻击：</p><p>用户登录了自己的银行页面 <code>http://mybank.com，http://mybank.com</code> 向用户的 <code>cookie</code> 中添加用户标识。<br>用户浏览了恶意页面 <code>http://evil.com</code>，执行了页面中的恶意 <code>AJAX</code> 请求代码。<br><code>http://evil.com</code> 向 <code>http://mybank.com</code> 发起 <code>AJAX HTTP</code> 请求，请求会默认把 <code>http://mybank.com</code> 对应 <code>cookie</code> 也同时发送过去。<br>银行页面从发送的 <code>cookie</code> 中提取用户标识，验证用户无误，<code>response</code> 中返回请求数据。此时数据就泄露了。<br>而且由于 <code>Ajax</code> 在后台执行，用户无法感知这一过程。<br>因此，有了浏览器同源策略，我们才能更安全的上网。</p><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><ul><li>jsonp</li><li>cors</li><li>postMessage</li><li>document.domain</li><li>window.name</li><li>location.hash</li><li>http-proxy</li><li>nginx</li><li>websocket</li></ul><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处直接手写一个jsonp</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123; url, params, cb &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    <span class="built_in">window</span>[cb] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      resolve(data);</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script);</span><br><span class="line">    &#125;;</span><br><span class="line">    params = &#123;</span><br><span class="line">      ...params,</span><br><span class="line">      cb</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> arrs = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      arrs.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arrs.join(<span class="string">"&amp;"</span>)&#125;</span>`</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只能发送get请求  不支持post put delect</span></span><br><span class="line"><span class="comment">//不安全 xss攻击</span></span><br><span class="line">jsonp(&#123;</span><br><span class="line">  url: <span class="string">"https://image.baidu.com/httpsjsonp/pc"</span>, <span class="comment">//此处链接为百度搜索随便找的</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    callback: <span class="string">"imageCheckHttps"</span>,</span><br><span class="line">    _: <span class="number">1571021917647</span></span><br><span class="line">  &#125;,</span><br><span class="line">  cb: <span class="string">"imageCheckHttps"</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/images/1564156.png" alt="1564156"></p><h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//index.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span></span><br><span class="line"><span class="javascript">        xhr.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:3001/getData'</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status === <span class="number">304</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(xhr.response)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server2.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">let</span> whiteList = [<span class="string">"http://localhost:3000"</span>];</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers);</span><br><span class="line">  <span class="keyword">let</span> origin = req.headers.origin;</span><br><span class="line">  <span class="keyword">if</span> (whiteList.includes(origin)) &#123;</span><br><span class="line">    <span class="comment">//设置源  请求头</span></span><br><span class="line">    res.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, origin);</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">"/getData"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"req.headers"</span>, <span class="string">"111"</span>);</span><br><span class="line">  res.end(<span class="string">"我不爱你"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/165156.png" alt="165156"><br><img src="/images/1665165165.png" alt="1665165165"></p><h3 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//a.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"frame"</span> <span class="attr">src</span>=<span class="string">"http://localhost:3001/b.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">onload</span>=<span class="string">"load()"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> frame = <span class="built_in">document</span>.getElementById(<span class="string">'frame'</span>)</span></span><br><span class="line"><span class="javascript">        frame.contentWindow.postMessage(<span class="string">'我爱你'</span>, <span class="string">'http://localhost:3001'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(e.data)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//b.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(e.data)</span></span><br><span class="line"><span class="javascript">            e.source.postMessage(<span class="string">'我不爱你'</span>, e.origin)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/4694165416.png" alt="4694165416"></p><h3 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h3><p>对于主域名相同，且协议，端口一致，而子域名不同的情况，可以使用 document.domain 来跨域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一级域名、二级域名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一级域名</span></span><br><span class="line"><span class="comment">//iframe 引用二级域名</span></span><br><span class="line"><span class="comment">//只需在两个域名设置  document.domain  为同一值  即可</span></span><br></pre></td></tr></table></figure><h3 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//a.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    //a和b是同域的 localhost:3000</span><br><span class="line">    //c 是独立的 localhost:3001</span><br><span class="line">    //a 获取c的值</span><br><span class="line">    //a先引用c c把值放到window.name 然后把a引用的地址改为b</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://localhost:3001/c.html"</span> <span class="attr">onload</span>=<span class="string">"load()"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> first = <span class="literal">true</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (first) &#123;</span></span><br><span class="line"><span class="javascript">                iframe.src = <span class="string">'http://localhost:3000/b.html'</span>;</span></span><br><span class="line"><span class="javascript">                first = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(iframe.contentWindow.name)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//b.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//c.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        Window.name = <span class="string">'我不爱你'</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server a</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server b</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure><h3 id="location-hash"><a href="#location-hash" class="headerlink" title="location.hash"></a>location.hash</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//a.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:3001/c.html#iloveyou"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//路径后的hash是可以通信的</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//目的：a想访问c的数据</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// a给c传一个hash值  =&gt;  c收到后 把hash值传递给b  =&gt;   b将结果放到a的hash值中</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// a、b  同域  c不同域</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(location.hash)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//b.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.parent.parent.location.hash = location.hash;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//c.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(location.hash);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">    iframe.src = <span class="string">'http://localhost:3000/b.html#idontloveyou'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(iframe);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/46465415645.png" alt="46465415645"></p><h3 id="http-proxy"><a href="#http-proxy" class="headerlink" title="http-proxy"></a>http-proxy</h3><p>类似于 webpack 转发</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    port: <span class="number">9001</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    historyApiFallback: &#123;</span><br><span class="line">      rewrites: [&#123;</span><br><span class="line">        <span class="keyword">from</span>: <span class="regexp">/.*/g</span>,</span><br><span class="line">        to: <span class="string">'/www/view/index.html'</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://192.168.1.192:8091/'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>首先需要先下载 nginx, <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置nginx</span></span><br><span class="line">location ~.*\.json &#123;</span><br><span class="line">root json;<span class="comment">//转发文件放在 json文件夹下</span></span><br><span class="line">add_header  <span class="string">"Access-Control-Allow-Origin"</span> <span class="string">"*"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//index.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span></span><br><span class="line"><span class="javascript">        xhr.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:3001/getData'</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        xhr.setRequestHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://localhost:3001'</span>)</span></span><br><span class="line"><span class="javascript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status === <span class="number">304</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(xhr.response)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">//高阶api</span></span><br><span class="line">        <span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:3000'</span>);</span><br><span class="line">        socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            socket.send(<span class="string">'我爱你'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data.data)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> Websocket = <span class="built_in">require</span>(<span class="string">"ws"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">let</span> wss = <span class="keyword">new</span> Websocket.Server(&#123; <span class="attr">port</span>: <span class="number">3000</span> &#125;);</span><br><span class="line">wss.on(<span class="string">"connection"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">  ws.on(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    ws.send(<span class="string">"我不爱你"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/images/4646416416.png" alt="4646416416"></p><p><img src="/images/494894898489.png" alt="494894898489"></p>]]></content>
    
    <summary type="html">
    
      多种跨域方案详解主要写前端跨域的几种实现方式
    
    </summary>
    
    
    
      <category term="js" scheme="https://yuwangi.github.io/tags/js/"/>
    
      <category term="跨域" scheme="https://yuwangi.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0响应式原理</title>
    <link href="https://yuwangi.github.io/articles/1320895259.html"/>
    <id>https://yuwangi.github.io/articles/1320895259.html</id>
    <published>2019-10-14T02:20:13.000Z</published>
    <updated>2019-12-06T08:06:37.624Z</updated>
    
    <content type="html"><![CDATA[<p>Vue2.0 版本相信大家已经用了很长时间了，但是知道它的工作原理是什么吗？下面就给大家介绍一下 Vue2.0 的原理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue2.0 版本相信大家已经用了很长时间了，但是知道它的工作原理是什么吗？下面就给大家介绍一下 Vue2.0 的原理&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://yuwangi.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0响应式原理</title>
    <link href="https://yuwangi.github.io/articles/2716464634.html"/>
    <id>https://yuwangi.github.io/articles/2716464634.html</id>
    <published>2019-10-12T02:59:41.000Z</published>
    <updated>2020-01-03T02:13:59.806Z</updated>
    
    <content type="html"><![CDATA[<p>10 月 5 日凌晨，Vue3.0 框架的作者兼核心开发者尤雨溪公布了尚处于 Pre-Alpha 状态的 Vue3.0 源码 <a href="https://github.com/vuejs/vue-next" target="_blank" rel="noopener">https://github.com/vuejs/vue-next</a></p><p><img src="/images/141547_4LK0_2720166.jpg" alt="141547_4LK0_2720166.jpg"></p><a id="more"></a><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><p>首先打开上面源码地址，执行<code>npm install</code>,然后<code>npm run dev</code>或<code>npm run build</code><br><img src="/images/4968498649684.png" alt="4968498649684"></p><p>上面标红的文件，就是 Vue3.0 预览版生成的文件。</p><p><img src="/images/1984984984.png" alt="1984984984"></p><p>首先感受一下预览版</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script src=<span class="string">"./dist/vue.global.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;script &gt;</span><br><span class="line">        <span class="keyword">const</span> App = &#123;</span><br><span class="line">            template: <span class="string">'&#123;&#123;count&#125;&#125;'</span>,</span><br><span class="line">            data() &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    count: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line">        <span class="keyword">let</span> _proxy = Vue.createApp().mount(App, container);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            _proxy.count = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(_proxy)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/496494.png" alt="496494"></p><p>可以看到数据已经响应式变化,<code>_proxy</code>就是代理响应式数据侦测的对象</p><h2 id="Proxy-如何实现响应数据变化"><a href="#Proxy-如何实现响应数据变化" class="headerlink" title="Proxy 如何实现响应数据变化"></a>Proxy 如何实现响应数据变化</h2><p>Vue3.0 核心操作在</p><p><img src="/images/45646541654156451.png" alt="45646541654156451"></p><ul><li>关于<code>WeakMap</code>的详解，可以参考后面的文章 <code>ES6 Map、WeakMap详解</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//核心基于Proxy</span></span><br><span class="line"><span class="comment">//Vue.reactive</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toProxy = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(); <span class="comment">//存放代理后的对象</span></span><br><span class="line"><span class="keyword">const</span> toRaw = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(); <span class="comment">//存放代理前的对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"触发视图更新"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> target === <span class="string">"object"</span> &amp;&amp; target != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isObject(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (toProxy.get(target)) &#123;</span><br><span class="line">    <span class="comment">//如果代理表中已经存在了，就把当前结果返回</span></span><br><span class="line">    <span class="keyword">return</span> toProxy.get(target);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (toRaw.has(target)) &#123;</span><br><span class="line">    <span class="comment">//如果对象已被代理过了,就把对象原封不动返回</span></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> handlers = &#123;</span><br><span class="line">    <span class="comment">//触发的方法</span></span><br><span class="line">    <span class="keyword">set</span>(target, key, value, receiver) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="comment">//只有是私有属性时，才会触发更新</span></span><br><span class="line">        trigger();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver);</span><br><span class="line">      <span class="comment">//https://www.jianshu.com/p/4a5eca0536c3  Reflect详解</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span>(target, key, receiver) &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.get(target, key, receiver);</span><br><span class="line">      <span class="keyword">if</span> (isObject(target[key])) &#123;</span><br><span class="line">        <span class="comment">//因为Proxy只能做一层代理，如果子元素还是对象，那么递归继续代理</span></span><br><span class="line">        <span class="keyword">return</span> reactive(res);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteProprety(target, key) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProprety(target, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> observed = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handlers);</span><br><span class="line">  toProxy.set(target, observed); <span class="comment">//原对象 ：代理后结果</span></span><br><span class="line">  toRaw.set(observed, target);</span><br><span class="line">  <span class="keyword">return</span> observed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"yuwangi"</span>,</span><br><span class="line">  ary: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _proxy = reactive(obj);</span><br><span class="line"></span><br><span class="line">_proxy.name = <span class="string">"hahah"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line">_proxy.ary.push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/images/416541651.png" alt="416541651"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;10 月 5 日凌晨，Vue3.0 框架的作者兼核心开发者尤雨溪公布了尚处于 Pre-Alpha 状态的 Vue3.0 源码 &lt;a href=&quot;https://github.com/vuejs/vue-next&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/vuejs/vue-next&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/141547_4LK0_2720166.jpg&quot; alt=&quot;141547_4LK0_2720166.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://yuwangi.github.io/tags/Vue/"/>
    
      <category term="Proxy" scheme="https://yuwangi.github.io/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>js数组遍历方法及效率测试</title>
    <link href="https://yuwangi.github.io/articles/341754589.html"/>
    <id>https://yuwangi.github.io/articles/341754589.html</id>
    <published>2019-10-11T09:56:05.000Z</published>
    <updated>2019-12-06T08:06:37.626Z</updated>
    
    <content type="html"><![CDATA[<p>js 中遍历数组并不会改变原始数组的方法总共有 12 个:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ES5：</span><br><span class="line">    forEach、every 、some、 filter、map、reduce、reduceRight、</span><br><span class="line">ES6：</span><br><span class="line">    find、findIndex、keys、values、entries</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisValue</span>)</span></span><br><span class="line"><span class="function">// 回调函数的参数</span></span><br><span class="line"><span class="function">    //1. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">    //2. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">    //3. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><p>关于 forEach()你要知道：</p><ul><li>无法中途退出循环，只能用 return 退出本次回调，进行下一次回调。</li><li>它总是返回 undefined 值,即使你 return 了一个值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, , <span class="number">3</span>]; <span class="comment">// 第三个元素是空的，不会遍历(undefined、null会遍历)</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">"OBKoro1"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> result = a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  a[<span class="number">3</span>] = <span class="string">"改变元素"</span>;</span><br><span class="line">  a.push(<span class="string">"添加到尾端，不会被遍历"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(value, <span class="string">"forEach传递的第一个参数"</span>); <span class="comment">// 分别打印 1 ,2 ,改变元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">// OBKoro1 打印三次 this绑定在obj对象上</span></span><br><span class="line">  <span class="comment">// break; // break会报错</span></span><br><span class="line">  <span class="keyword">return</span> value; <span class="comment">// return只能结束本次回调 会执行下次回调</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"不会执行，因为return 会执行下一次循环回调"</span>);</span><br><span class="line">&#125;, obj);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 即使return了一个值,也还是返回undefined</span></span><br><span class="line"><span class="comment">// 回调函数也接受接头函数写法</span></span><br></pre></td></tr></table></figure><h3 id="every-检测数组所有元素是否都符合判断条件"><a href="#every-检测数组所有元素是否都符合判断条件" class="headerlink" title="every 检测数组所有元素是否都符合判断条件"></a>every 检测数组所有元素是否都符合判断条件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array.every(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisValue</span>)</span></span><br><span class="line"><span class="function">// 回调函数的参数</span></span><br><span class="line"><span class="function">    //1. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">    //2. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">    //3. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><p>方法返回值规则:</p><ul><li>如果数组中检测到有一个元素不满足，则整个表达式返回 false，且剩余的元素不会再进行检测。</li><li>如果所有元素都满足条件，则返回 true</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt;= <span class="number">10</span>; <span class="comment">// 判断数组中的所有元素是否都大于10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> result = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 接受箭头函数写法</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(<span class="function"><span class="params">x</span> =&gt;</span> x &gt;= <span class="number">10</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].every(<span class="function"><span class="params">x</span> =&gt;</span> x &gt;= <span class="number">10</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="some-数组中的是否有满足判断条件的元素"><a href="#some-数组中的是否有满足判断条件的元素" class="headerlink" title="some 数组中的是否有满足判断条件的元素"></a>some 数组中的是否有满足判断条件的元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array.some(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisValue</span>)</span></span><br><span class="line"><span class="function">// 回调函数的参数</span></span><br><span class="line"><span class="function">    //1. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">    //2. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">    //3. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><p>方法返回值规则：</p><p>如果有一个元素满足条件，则表达式返回 true, 剩余的元素不会再执行检测。</p><p>如果没有满足条件的元素，则返回 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt;= <span class="number">10</span>; <span class="comment">//数组中是否有一个元素大于 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBigEnough); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> result = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBigEnough); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="filter-过滤原始数组，返回新数组"><a href="#filter-过滤原始数组，返回新数组" class="headerlink" title="filter 过滤原始数组，返回新数组"></a>filter 过滤原始数组，返回新数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> new_array = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisArg</span>)</span></span><br><span class="line"><span class="function">// 回调函数的参数</span></span><br><span class="line"><span class="function">    //1. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">    //2. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">    //3. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">40</span>];</span><br><span class="line"><span class="keyword">let</span> result = a.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt;= <span class="number">18</span>; <span class="comment">// 返回a数组中所有大于18的元素</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result, a); <span class="comment">// [32,33,40] [32,33,16,40]</span></span><br></pre></td></tr></table></figure><h3 id="map-对数组中的每个元素进行处理，返回新的数组"><a href="#map-对数组中的每个元素进行处理，返回新的数组" class="headerlink" title="map 对数组中的每个元素进行处理，返回新的数组"></a>map 对数组中的每个元素进行处理，返回新的数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> new_array = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisArg</span>)</span></span><br><span class="line"><span class="function">// 回调函数的参数</span></span><br><span class="line"><span class="function">    //1. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">    //2. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">    //3. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>];</span><br><span class="line"><span class="keyword">let</span> result = a.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value + <span class="string">"新数组的新元素"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result, a);</span><br><span class="line"><span class="comment">// ["1新数组的新元素","2新数组的新元素","3新数组的新元素","4新数组的新元素"] ["1","2","3","4"]</span></span><br></pre></td></tr></table></figure><h3 id="reduce-为数组提供累加器，合并为一个值"><a href="#reduce-为数组提供累加器，合并为一个值" class="headerlink" title="reduce 为数组提供累加器，合并为一个值"></a>reduce 为数组提供累加器，合并为一个值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total, currentValue, currentIndex, arr</span>), <span class="title">initialValue</span>)</span></span><br><span class="line"><span class="function"> // 回调函数的参数</span></span><br><span class="line"><span class="function">   //1. <span class="title">total</span>(<span class="params">必须</span>)，初始值, 或者上一次调用回调返回的值</span></span><br><span class="line"><span class="function">   //2. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">   //3. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">   //4. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><p>回调第一次执行时:</p><p>如果 <code>initialValue</code> 在调用 <code>reduce</code> 时被提供，那么第一个 <code>total</code> 将等于 <code>initialValue</code>，此时 <code>currentValue</code> 等于数组中的第一个值；<br>如果 <code>initialValue</code> 未被提供，那么 <code>total</code> <code>等于数组中的第一个值，currentValue</code> 等于数组中的第二个值。此时如果数组为<code>空</code>，那么将抛出 <code>TypeError</code>。<br>如果数组仅有一个元素，并且没有提供 <code>initialValue</code>，或提供了 <code>initialValue</code> 但数组为空，那么回调不会被执行，数组的唯一值将被返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组求和</span></span><br><span class="line"><span class="keyword">let</span> sum = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 将二维数组转化为一维 将数组元素展开</span></span><br><span class="line"><span class="keyword">let</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.concat(b), []);</span><br><span class="line"><span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="reduceRight-从右至左累加"><a href="#reduceRight-从右至左累加" class="headerlink" title="reduceRight 从右至左累加"></a>reduceRight 从右至左累加</h3><p>这个方法除了与 reduce 执行方向相反外，其他完全与其一致，请参考上述 reduce 方法介绍。</p><h3 id="ES6：find-amp-findIndex-根据条件找到数组成员"><a href="#ES6：find-amp-findIndex-根据条件找到数组成员" class="headerlink" title="ES6：find()&amp; findIndex() 根据条件找到数组成员"></a>ES6：find()&amp; findIndex() 根据条件找到数组成员</h3><p>find()定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回 undefined。</p><p>findIndex()定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> new_array = arr.find(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisArg</span>)</span></span><br><span class="line"><span class="function"><span class="title">let</span> <span class="title">new_array</span> = <span class="title">arr</span>.<span class="title">findIndex</span>(<span class="params">function(currentValue, index, arr</span>), <span class="title">thisArg</span>)</span></span><br><span class="line"><span class="function">// 回调函数的参数</span></span><br><span class="line"><span class="function">    //1. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">    //2. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">    //3. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><p>这两个方法都可以识别 <code>NaN</code>,弥补了 <code>indexOf</code> 的不足.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// find</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">0</span>); <span class="comment">// 返回元素-5</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>, <span class="literal">NaN</span>].find(<span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, n)); <span class="comment">// 返回元素NaN</span></span><br><span class="line"><span class="keyword">let</span> c = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, n)); <span class="comment">// 返回undefined</span></span><br><span class="line"><span class="comment">// findIndex</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].findIndex(<span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">0</span>); <span class="comment">// 返回索引2</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>, <span class="literal">NaN</span>].findIndex(<span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, n)); <span class="comment">// 返回索引4</span></span><br><span class="line"><span class="keyword">let</span> c = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].findIndex(<span class="function"><span class="params">n</span> =&gt;</span> n &gt; <span class="number">10</span>); <span class="comment">// 返回索引-1</span></span><br></pre></td></tr></table></figure><h3 id="keys-amp-values-amp-entries-遍历键名、遍历键值、遍历键名-键值"><a href="#keys-amp-values-amp-entries-遍历键名、遍历键值、遍历键名-键值" class="headerlink" title="keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值"></a>keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">"a"</span>, <span class="string">"b"</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">"a"</span>, <span class="string">"b"</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a'</span></span><br><span class="line"><span class="comment">// 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">"a"</span>, <span class="string">"b"</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 "a"</span></span><br><span class="line"><span class="comment">// 1 "b"</span></span><br></pre></td></tr></table></figure><p>在 for..of 中如果遍历中途要退出，可以使用 break 退出循环。</p><p>如果不使用 for…of 循环，可以手动调用遍历器对象的 next 方法，进行遍历:</p><h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><p>js 有如下两种数据需要经常遍历</p><ul><li>数组(Array)</li><li>对象(Object)</li></ul><p>同时又提供了如下 8 种方法方便我们遍历元素</p><ul><li>for</li><li>while(或 do~while)</li><li>forEach</li><li>for in</li><li>map</li><li>every</li></ul><p>最终我们将分析遍历效率选出最佳遍历选手.</p><h3 id="数组循环"><a href="#数组循环" class="headerlink" title="数组循环"></a>数组循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [],</span><br><span class="line">  length = (array.length = <span class="number">10000000</span>); <span class="comment">//(一千万)</span></span><br><span class="line"><span class="comment">// for(var i=0;i&lt;length;i++)&#123;</span></span><br><span class="line"><span class="comment">//  array[i] = 'louis';</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(array[0]);</span></span><br><span class="line"><span class="comment">//-------------------------for</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"for:"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------do/while</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; length);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"do while:"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------forEach</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"forEach:"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------for in</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> array) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"for in:"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------- every</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">array.every(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"every"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------- some</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">array.some(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"some"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------map</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">array.map(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"map:"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------filter</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">e, i, arr</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"filter:"</span> + (t2 - t1));</span><br><span class="line"><span class="comment">//-------------------------reduce</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">e, i, arr</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"reduce:"</span> + (t2 - t1));</span><br></pre></td></tr></table></figure><p><img src="/images/415446946848.png" alt="415446946848"></p><p>所以最终结果</p><ul><li>1、for 与 do while</li><li>2、forEach map some every filter (这 5 个不相上下,可认为运行速度差不多)</li><li>3、for in (多次运行不稳定)</li></ul><h3 id="对象循环"><a href="#对象循环" class="headerlink" title="对象循环"></a>对象循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [],</span><br><span class="line">  length = (array.length = <span class="number">10000000</span>); <span class="comment">//(一千万)</span></span><br><span class="line"><span class="keyword">var</span> objects = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">  objects[i] = <span class="built_in">Math</span>.random();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------for in</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> objects) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"for in:"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------Object.keys</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">Object</span>.keys(objects);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Object.keys"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------Object.values</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">Object</span>.values(objects);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Object.values"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------Object.getOwnPropertyNames</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(objects);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Object.getOwnPropertyNames"</span> + (t2 - t1));</span><br></pre></td></tr></table></figure><p><img src="/images/546541654156.png" alt="546541654156"></p><p>结果出乎意料</p><ul><li>1、Object.values</li><li>2、Object.keys、for in</li><li>3、Object.getOwnPropertyNames</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js 中遍历数组并不会改变原始数组的方法总共有 12 个:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ES5：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forEach、every 、some、 filter、map、reduce、reduceRight、&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ES6：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    find、findIndex、keys、values、entries&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="js" scheme="https://yuwangi.github.io/tags/js/"/>
    
      <category term="数组" scheme="https://yuwangi.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>惰性载入函数</title>
    <link href="https://yuwangi.github.io/articles/3094046573.html"/>
    <id>https://yuwangi.github.io/articles/3094046573.html</id>
    <published>2019-10-11T09:41:27.000Z</published>
    <updated>2019-12-06T08:06:37.628Z</updated>
    
    <content type="html"><![CDATA[<p>惰性函数表示函数执行的分支只会在函数第一次调用的时候执行，在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，这样任何对原函数的调用就不用再经过执行的分支了。本文将详细介绍惰性函数</p><h2 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h2><p>因为各浏览器之间的行为的差异，经常会在函数中包含了大量的 if 语句，以检查浏览器特性，解决不同浏览器的兼容问题。比如，最常见的为 dom 节点添加事件的函数</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">    element.addEventListener(type, fun, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">    element.attachEvent(<span class="string">"on"</span> + type, fun);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    element[<span class="string">"on"</span> + type] = fun;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次调用 addEvent 函数的时候，它都要对浏览器所支持的能力进行检查，首先检查是否支持 addEventListener 方法，如果不支持，再检查是否支持 attachEvent 方法，如果还不支持，就用 dom0 级的方法添加事件</p><p>这个过程，在 addEvent 函数每次调用的时候都要走一遍，其实，如果浏览器支持其中的一种方法，那么它就会一直支持了，就没有必要再进行其他分支的检测了。也就是说，if 语句不必每次都执行，代码可以运行的更快一些</p><p>解决方案就是惰性载入</p><h2 id="函数重写"><a href="#函数重写" class="headerlink" title="函数重写"></a>函数重写</h2><p>在介绍惰性函数之前，首先介绍函数重写技术。由于一个函数可以返回另一个函数，因此可以用新的函数来覆盖旧的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">  a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，第一次调用该函数时会 console.log(‘a’)会被执行；全局变量 a 被重定义，并被赋予新的函数。当该函数再次被调用时， console.log(‘b’)会被执行</p><h2 id="惰性函数"><a href="#惰性函数" class="headerlink" title="惰性函数"></a>惰性函数</h2><p>惰性函数的本质就是函数重写。所谓惰性载入，指函数执行的分支只会发生一次，有两种实现惰性载入的方式</p><ul><li>第一种是在函数被调用时，再处理函数。函数在第一次调用时，该函数会被覆盖为另外一个按合适方式执行的函数，这样任何对原函数的调用都不用再经过执行的分支了。代码重写如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">      element.addEventListener(type, fun, <span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">      element.attachEvent(<span class="string">"on"</span> + type, fun);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = fun;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> addEvent(type, element, fun);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个惰性载入的 addEvent()中，if 语句的每个分支都会为 addEvent 变量赋值，有效覆盖了原函数。最后一步便是调用了新赋函数。下一次调用 addEvent()时，便会直接调用新赋值的函数，这样就不用再执行 if 语句了<br>但是，这种方法有个缺点，如果函数名称有所改变，修改起来比较麻烦</p><ul><li>第二种是声明函数时就指定适当的函数。把嗅探浏览器的操作提前到代码加载的时候，在代码加载的时候就立刻进行一次判断，以便让 addEvent 返回一个包裹了正确逻辑的函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addEvent = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">      element.addEventListener(type, fun, <span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">      element.attachEvent(<span class="string">"on"</span> + type, fun);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = fun;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="惰性函数应用"><a href="#惰性函数应用" class="headerlink" title="惰性函数应用"></a>惰性函数应用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="literal">null</span>,</span><br><span class="line">    flag = <span class="literal">false</span>,</span><br><span class="line">    ary = [</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml3.XMLHTTP"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line">  <span class="comment">//循环遍历这个数组，看看数组内的哪一个元素兼容浏览器，如果兼容，就赋值给给xhr，并且返回出去</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = ary.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> curFn = ary[i];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      xhr = curFn();</span><br><span class="line">      createXHR = curFn; <span class="comment">//重新定义createXHR ,第二次调用ajax请求，则直接使用这个方法</span></span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">//说明浏览器不兼容，继续循环</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"你的浏览器不支持 ，请升级浏览器"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本篇文章主要写惰性载入函数的使用背景和应用方式
    
    </summary>
    
    
    
      <category term="js" scheme="https://yuwangi.github.io/tags/js/"/>
    
      <category term="函数" scheme="https://yuwangi.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="高阶程序" scheme="https://yuwangi.github.io/tags/%E9%AB%98%E9%98%B6%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
</feed>
