<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuwangi.github.io/"/>
  <updated>2019-10-14T09:39:13.541Z</updated>
  <id>https://yuwangi.github.io/</id>
  
  <author>
    <name>yuwangi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多种跨域方案详解</title>
    <link href="https://yuwangi.github.io//articles/%E5%A4%9A%E7%A7%8D%E8%B7%A8%E5%9F%9F%E6%96%B9%E6%A1%88%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://yuwangi.github.io//articles/多种跨域方案详解.html</id>
    <published>2019-10-14T02:25:28.000Z</published>
    <updated>2019-10-14T09:39:13.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以 xyz.com 下的 js 脚本采用 ajax 读取 abc.com 里面的文件数据是会被拒绝的。</p><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p><p>所谓同源是指：域名、协议、端口相同。</p><a id="more"></a><table><thead><tr><th>网址</th><th>结果</th><th>原因</th></tr></thead><tbody><tr><td><a href="https://yuwangi.github.io">https://yuwangi.github.io</a></td><td>成功</td><td>域名、协议、端口均相同</td></tr><tr><td><a href="http://yuwangi.github.io">http://yuwangi.github.io</a></td><td>失败</td><td>协议不同</td></tr><tr><td><a href="https://yuwangi.github.io:9001">https://yuwangi.github.io:9001</a></td><td>失败</td><td>端口不同</td></tr><tr><td><a href="https://smwang.github.io" target="_blank" rel="noopener">https://smwang.github.io</a></td><td>失败</td><td>域名不同</td></tr></tbody></table><h3 id="为什么要有跨域限制"><a href="#为什么要有跨域限制" class="headerlink" title="为什么要有跨域限制"></a>为什么要有跨域限制</h3><p>因为存在浏览器同源策略，所以才会有跨域问题。那么浏览器是出于何种原因会有跨域的限制呢。其实不难想到，跨域限制主要的目的就是为了用户的上网安全。</p><p>如果浏览器没有同源策略，会存在什么样的安全问题呢。下面从 <code>DOM</code> 同源策略和 <code>XMLHttpRequest</code> 同源策略来举例说明：</p><p>如果没有 <code>DOM</code> 同源策略，也就是说不同域的 <code>iframe</code> 之间可以相互访问，那么黑客可以这样进行攻击：</p><p>做一个假网站，里面用 <code>iframe</code> 嵌套一个银行网站 <code>http://mybank.com</code><br>把 <code>iframe</code> 宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。<br>这时如果用户输入账号密码，我们的主网站可以跨域访问到 <code>http://mybank.com</code> 的 <code>dom</code> 节点，就可以拿到用户的账户密码了。<br>如果 <code>XMLHttpRequest</code> 同源策略，那么黑客可以进行 <code>CSRF</code>（跨站请求伪造） 攻击：</p><p>用户登录了自己的银行页面 <code>http://mybank.com，http://mybank.com</code> 向用户的 <code>cookie</code> 中添加用户标识。<br>用户浏览了恶意页面 <code>http://evil.com</code>，执行了页面中的恶意 <code>AJAX</code> 请求代码。<br><code>http://evil.com</code> 向 <code>http://mybank.com</code> 发起 <code>AJAX HTTP</code> 请求，请求会默认把 <code>http://mybank.com</code> 对应 <code>cookie</code> 也同时发送过去。<br>银行页面从发送的 <code>cookie</code> 中提取用户标识，验证用户无误，<code>response</code> 中返回请求数据。此时数据就泄露了。<br>而且由于 <code>Ajax</code> 在后台执行，用户无法感知这一过程。<br>因此，有了浏览器同源策略，我们才能更安全的上网。</p><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><ul><li>jsonp</li><li>cors</li><li>postMessage</li><li>document.domain</li><li>window.name</li><li>location.hash</li><li>http-proxy</li><li>nginx</li><li>websocket</li></ul><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处直接手写一个jsonp</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123; url, params, cb &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    <span class="built_in">window</span>[cb] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      resolve(data);</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script);</span><br><span class="line">    &#125;;</span><br><span class="line">    params = &#123;</span><br><span class="line">      ...params,</span><br><span class="line">      cb</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> arrs = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      arrs.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arrs.join(<span class="string">"&amp;"</span>)&#125;</span>`</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只能发送get请求  不支持post put delect</span></span><br><span class="line"><span class="comment">//不安全 xss攻击</span></span><br><span class="line">jsonp(&#123;</span><br><span class="line">  url: <span class="string">"https://image.baidu.com/httpsjsonp/pc"</span>, <span class="comment">//此处链接为百度搜索随便找的</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    callback: <span class="string">"imageCheckHttps"</span>,</span><br><span class="line">    _: <span class="number">1571021917647</span></span><br><span class="line">  &#125;,</span><br><span class="line">  cb: <span class="string">"imageCheckHttps"</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/images/1564156.png" alt="1564156"></p><h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    Hello</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:3001/getData'</span>, <span class="literal">true</span>);</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status === <span class="number">304</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(xhr.response)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send();</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server2.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">let</span> whiteList = [<span class="string">"http://localhost:3000"</span>];</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers);</span><br><span class="line">  <span class="keyword">let</span> origin = req.headers.origin;</span><br><span class="line">  <span class="keyword">if</span> (whiteList.includes(origin)) &#123;</span><br><span class="line">    <span class="comment">//设置源  请求头</span></span><br><span class="line">    res.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, origin);</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">"/getData"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"req.headers"</span>, <span class="string">"111"</span>);</span><br><span class="line">  res.end(<span class="string">"我不爱你"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/165156.png" alt="165156"><br><img src="/images/1665165165.png" alt="1665165165"></p><h3 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;iframe id=<span class="string">"frame"</span> src=<span class="string">"http://localhost:3001/b.html"</span> frameborder=<span class="string">"0"</span> onload=<span class="string">"load()"</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    function load() &#123;</span></span><br><span class="line"><span class="regexp">        let frame = document.getElementById('frame')</span></span><br><span class="line"><span class="regexp">        frame.contentWindow.postMessage('我爱你', 'http:/</span><span class="regexp">/localhost:3001')</span></span><br><span class="line"><span class="regexp">        window.onmessage = function (e) &#123;</span></span><br><span class="line"><span class="regexp">            console.log(e.data)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">            <span class="built_in">console</span>.log(e.data)</span><br><span class="line">            e.source.postMessage(<span class="string">'我不爱你'</span>, e.origin)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/4694165416.png" alt="4694165416"></p><h3 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h3><p>对于主域名相同，且协议，端口一致，而子域名不同的情况，可以使用 document.domain 来跨域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一级域名、二级域名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一级域名</span></span><br><span class="line"><span class="comment">//iframe 引用二级域名</span></span><br><span class="line"><span class="comment">//只需在两个域名设置  document.domain  为同一值  即可</span></span><br></pre></td></tr></table></figure><h3 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="comment">//a和b是同域的 localhost:3000</span></span><br><span class="line">    <span class="comment">//c 是独立的 localhost:3001</span></span><br><span class="line">    <span class="comment">//a 获取c的值</span></span><br><span class="line">    <span class="comment">//a先引用c c把值放到window.name 然后把a引用的地址改为b</span></span><br><span class="line"></span><br><span class="line">    &lt;iframe id=<span class="string">"iframe"</span> src=<span class="string">"http://localhost:3001/c.html"</span> onload=<span class="string">"load()"</span> frameborder=<span class="string">"0"</span>&gt;&lt;/iframe&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> first = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span><br><span class="line">            <span class="keyword">if</span> (first) &#123;</span><br><span class="line">                iframe.src = <span class="string">'http://localhost:3000/b.html'</span>;</span><br><span class="line">                first = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(iframe.contentWindow.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//c.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Window.name = <span class="string">'我不爱你'</span></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server a</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server b</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure><h3 id="location-hash"><a href="#location-hash" class="headerlink" title="location.hash"></a>location.hash</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;iframe src=<span class="string">"http://localhost:3001/c.html#iloveyou"</span> frameborder=<span class="string">"0"</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/路径后的hash是可以通信的</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/目的：a想访问c的数据</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ a给c传一个hash值  =&gt;  c收到后 把hash值传递给b  =&gt;   b将结果放到a的hash值中</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ a、b  同域  c不同域</span></span><br><span class="line"><span class="regexp">    window.onhashchange = function () &#123;</span></span><br><span class="line"><span class="regexp">        console.log(location.hash)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    window.parent.parent.location.hash = location.hash;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//c.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    console.log(location.hash);</span></span><br><span class="line"><span class="regexp">    let iframe = document.createElement('iframe');</span></span><br><span class="line">    iframe.src = 'http://localhost:3000/b.html#idontloveyou';</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/46465415645.png" alt="46465415645"></p><h3 id="http-proxy"><a href="#http-proxy" class="headerlink" title="http-proxy"></a>http-proxy</h3><p>类似于 webpack 转发</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    port: <span class="number">9001</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    historyApiFallback: &#123;</span><br><span class="line">      rewrites: [&#123;</span><br><span class="line">        <span class="keyword">from</span>: <span class="regexp">/.*/g</span>,</span><br><span class="line">        to: <span class="string">'/www/view/index.html'</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://192.168.1.192:8091/'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>首先需要先下载 nginx, <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置nginx</span></span><br><span class="line">location ~.*\.json &#123;</span><br><span class="line">root json;<span class="comment">//转发文件放在 json文件夹下</span></span><br><span class="line">add_header  <span class="string">"Access-Control-Allow-Origin"</span> <span class="string">"*"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:3001/getData'</span>, <span class="literal">true</span>);</span><br><span class="line">        xhr.setRequestHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://localhost:3001'</span>)</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status === <span class="number">304</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(xhr.response)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send();</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">//高阶api</span></span><br><span class="line">        <span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:3000'</span>);</span><br><span class="line">        socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            socket.send(<span class="string">'我爱你'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data.data)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">let</span> Websocket = <span class="built_in">require</span>(<span class="string">"ws"</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">let</span> wss = <span class="keyword">new</span> Websocket.Server(&#123; <span class="attr">port</span>: <span class="number">3000</span> &#125;);</span><br><span class="line">wss.on(<span class="string">"connection"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">  ws.on(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    ws.send(<span class="string">"我不爱你"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/images/4646416416.png" alt="4646416416"></p><p><img src="/images/494894898489.png" alt="494894898489"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h2&gt;&lt;p&gt;同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以 xyz.com 下的 js 脚本采用 ajax 读取 abc.com 里面的文件数据是会被拒绝的。&lt;/p&gt;
&lt;p&gt;同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。&lt;/p&gt;
&lt;p&gt;所谓同源是指：域名、协议、端口相同。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="js" scheme="https://yuwangi.github.io/tags/js/"/>
    
      <category term="跨域" scheme="https://yuwangi.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0响应式原理</title>
    <link href="https://yuwangi.github.io//articles/Vue2-0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.html"/>
    <id>https://yuwangi.github.io//articles/Vue2-0响应式原理.html</id>
    <published>2019-10-14T02:20:13.000Z</published>
    <updated>2019-10-14T03:04:21.718Z</updated>
    
    <content type="html"><![CDATA[<p>Vue2.0 版本相信大家已经用了很长时间了，但是知道它的工作原理是什么吗？下面就给大家介绍一下 Vue2.0 的原理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue2.0 版本相信大家已经用了很长时间了，但是知道它的工作原理是什么吗？下面就给大家介绍一下 Vue2.0 的原理&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://yuwangi.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0响应式原理</title>
    <link href="https://yuwangi.github.io//articles/Vue3-0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.html"/>
    <id>https://yuwangi.github.io//articles/Vue3-0响应式原理.html</id>
    <published>2019-10-12T02:59:41.000Z</published>
    <updated>2019-10-12T08:02:57.360Z</updated>
    
    <content type="html"><![CDATA[<p>10 月 5 日凌晨，Vue.js 框架的作者兼核心开发者尤雨溪公布了尚处于 Pre-Alpha 状态的 Vue 3 源码 <a href="https://github.com/vuejs/vue-next" target="_blank" rel="noopener">https://github.com/vuejs/vue-next</a></p><p><img src="/images/141547_4LK0_2720166.jpg" alt="141547_4LK0_2720166.jpg"></p><a id="more"></a><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><p>首先打开上面源码地址，执行<code>npm install</code>,然后<code>npm run dev</code>或<code>npm run build</code><br><img src="/images/4968498649684.png" alt="4968498649684"></p><p>上面标红的文件，就是 Vue3.0 预览版生成的文件。</p><p><img src="/images/1984984984.png" alt="1984984984"></p><p>首先感受一下预览版</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script src=<span class="string">"./dist/vue.global.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script &gt;</span><br><span class="line">        <span class="keyword">const</span> App = &#123;</span><br><span class="line">            template: <span class="string">'&#123;&#123;count&#125;&#125;'</span>,</span><br><span class="line">            data() &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    count: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line">        <span class="keyword">let</span> _proxy = Vue.createApp().mount(App, container);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            _proxy.count = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(_proxy)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/496494.png" alt="496494"></p><p>可以看到数据已经响应式变化,<code>_proxy</code>就是代理响应式数据侦测的对象</p><h2 id="Proxy-如何实现响应数据变化"><a href="#Proxy-如何实现响应数据变化" class="headerlink" title="Proxy 如何实现响应数据变化"></a>Proxy 如何实现响应数据变化</h2><p>Vue3.0 核心操作在</p><p><img src="/images/45646541654156451.png" alt="45646541654156451"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//核心基于Proxy</span></span><br><span class="line"><span class="comment">//Vue.reactive</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toProxy = <span class="keyword">new</span> <span class="built_in">WeakMap</span>() <span class="comment">//存放代理后的对象</span></span><br><span class="line"><span class="keyword">const</span> toRaw = <span class="keyword">new</span> <span class="built_in">WeakMap</span>() <span class="comment">//存放代理前的对象</span></span><br><span class="line"><span class="comment">//https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap WeakMap详解</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'触发视图更新'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> target === <span class="string">'object'</span> &amp;&amp; target != <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isObject(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(toProxy.get(target))&#123;<span class="comment">//如果代理表中已经存在了，就把当前结果返回</span></span><br><span class="line">    <span class="keyword">return</span> toProxy.get(target);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(toRaw.has(target))&#123;<span class="comment">//如果对象已被代理过了,就把对象原封不动返回</span></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> handlers = &#123;</span><br><span class="line">    <span class="comment">//触发的方法</span></span><br><span class="line">    <span class="keyword">set</span>(target, key, value, receiver) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="comment">//只有是私有属性时，才会触发更新</span></span><br><span class="line">        trigger()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver)</span><br><span class="line">      <span class="comment">//https://www.jianshu.com/p/4a5eca0536c3  Reflect详解</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span>(target, key, receiver) &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.get(target, key, receiver)</span><br><span class="line">      <span class="keyword">if</span> (isObject(target[key])) &#123;</span><br><span class="line">        <span class="comment">//因为Proxy只能做一层代理，如果子元素还是对象，那么递归继续代理</span></span><br><span class="line">        <span class="keyword">return</span> reactive(res)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteProprety(target, key) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProprety(target, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> observed = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handlers)</span><br><span class="line">  toProxy.set(target, observed) <span class="comment">//原对象 ：代理后结果</span></span><br><span class="line">  toRaw.set(observed,target)</span><br><span class="line">  <span class="keyword">return</span> observed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'yuwangi'</span>,</span><br><span class="line">  ary: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _proxy = reactive(obj)</span><br><span class="line"></span><br><span class="line">_proxy.name = <span class="string">'hahah'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"></span><br><span class="line">_proxy.ary.push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/images/416541651.png" alt="416541651"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;10 月 5 日凌晨，Vue.js 框架的作者兼核心开发者尤雨溪公布了尚处于 Pre-Alpha 状态的 Vue 3 源码 &lt;a href=&quot;https://github.com/vuejs/vue-next&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/vuejs/vue-next&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/141547_4LK0_2720166.jpg&quot; alt=&quot;141547_4LK0_2720166.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://yuwangi.github.io/tags/Vue/"/>
    
      <category term="Proxy" scheme="https://yuwangi.github.io/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>js数组遍历方法及效率测试</title>
    <link href="https://yuwangi.github.io//articles/js%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95%E5%8F%8A%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95.html"/>
    <id>https://yuwangi.github.io//articles/js数组遍历方法及效率测试.html</id>
    <published>2019-10-11T09:56:05.000Z</published>
    <updated>2019-10-12T02:30:20.174Z</updated>
    
    <content type="html"><![CDATA[<p>js 中遍历数组并不会改变原始数组的方法总共有 12 个:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ES5：</span><br><span class="line">    forEach、every 、some、 filter、map、reduce、reduceRight、</span><br><span class="line">ES6：</span><br><span class="line">    find、findIndex、keys、values、entries</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisValue</span>)</span></span><br><span class="line"><span class="function">// 回调函数的参数</span></span><br><span class="line"><span class="function">    //1. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">    //2. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">    //3. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><p>关于 forEach()你要知道：</p><ul><li>无法中途退出循环，只能用 return 退出本次回调，进行下一次回调。</li><li>它总是返回 undefined 值,即使你 return 了一个值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, , <span class="number">3</span>]; <span class="comment">// 第三个元素是空的，不会遍历(undefined、null会遍历)</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">"OBKoro1"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> result = a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  a[<span class="number">3</span>] = <span class="string">"改变元素"</span>;</span><br><span class="line">  a.push(<span class="string">"添加到尾端，不会被遍历"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(value, <span class="string">"forEach传递的第一个参数"</span>); <span class="comment">// 分别打印 1 ,2 ,改变元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">// OBKoro1 打印三次 this绑定在obj对象上</span></span><br><span class="line">  <span class="comment">// break; // break会报错</span></span><br><span class="line">  <span class="keyword">return</span> value; <span class="comment">// return只能结束本次回调 会执行下次回调</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"不会执行，因为return 会执行下一次循环回调"</span>);</span><br><span class="line">&#125;, obj);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 即使return了一个值,也还是返回undefined</span></span><br><span class="line"><span class="comment">// 回调函数也接受接头函数写法</span></span><br></pre></td></tr></table></figure><h3 id="every-检测数组所有元素是否都符合判断条件"><a href="#every-检测数组所有元素是否都符合判断条件" class="headerlink" title="every 检测数组所有元素是否都符合判断条件"></a>every 检测数组所有元素是否都符合判断条件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array.every(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisValue</span>)</span></span><br><span class="line"><span class="function">// 回调函数的参数</span></span><br><span class="line"><span class="function">    //1. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">    //2. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">    //3. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><p>方法返回值规则:</p><ul><li>如果数组中检测到有一个元素不满足，则整个表达式返回 false，且剩余的元素不会再进行检测。</li><li>如果所有元素都满足条件，则返回 true</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt;= <span class="number">10</span>; <span class="comment">// 判断数组中的所有元素是否都大于10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> result = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 接受箭头函数写法</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(<span class="function"><span class="params">x</span> =&gt;</span> x &gt;= <span class="number">10</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].every(<span class="function"><span class="params">x</span> =&gt;</span> x &gt;= <span class="number">10</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="some-数组中的是否有满足判断条件的元素"><a href="#some-数组中的是否有满足判断条件的元素" class="headerlink" title="some 数组中的是否有满足判断条件的元素"></a>some 数组中的是否有满足判断条件的元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array.some(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisValue</span>)</span></span><br><span class="line"><span class="function">// 回调函数的参数</span></span><br><span class="line"><span class="function">    //1. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">    //2. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">    //3. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><p>方法返回值规则：</p><p>如果有一个元素满足条件，则表达式返回 true, 剩余的元素不会再执行检测。</p><p>如果没有满足条件的元素，则返回 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt;= <span class="number">10</span>; <span class="comment">//数组中是否有一个元素大于 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBigEnough); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> result = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBigEnough); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="filter-过滤原始数组，返回新数组"><a href="#filter-过滤原始数组，返回新数组" class="headerlink" title="filter 过滤原始数组，返回新数组"></a>filter 过滤原始数组，返回新数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> new_array = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisArg</span>)</span></span><br><span class="line"><span class="function">// 回调函数的参数</span></span><br><span class="line"><span class="function">    //1. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">    //2. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">    //3. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">40</span>];</span><br><span class="line"><span class="keyword">let</span> result = a.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt;= <span class="number">18</span>; <span class="comment">// 返回a数组中所有大于18的元素</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result, a); <span class="comment">// [32,33,40] [32,33,16,40]</span></span><br></pre></td></tr></table></figure><h3 id="map-对数组中的每个元素进行处理，返回新的数组"><a href="#map-对数组中的每个元素进行处理，返回新的数组" class="headerlink" title="map 对数组中的每个元素进行处理，返回新的数组"></a>map 对数组中的每个元素进行处理，返回新的数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> new_array = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisArg</span>)</span></span><br><span class="line"><span class="function">// 回调函数的参数</span></span><br><span class="line"><span class="function">    //1. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">    //2. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">    //3. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>];</span><br><span class="line"><span class="keyword">let</span> result = a.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value + <span class="string">"新数组的新元素"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result, a);</span><br><span class="line"><span class="comment">// ["1新数组的新元素","2新数组的新元素","3新数组的新元素","4新数组的新元素"] ["1","2","3","4"]</span></span><br></pre></td></tr></table></figure><h3 id="reduce-为数组提供累加器，合并为一个值"><a href="#reduce-为数组提供累加器，合并为一个值" class="headerlink" title="reduce 为数组提供累加器，合并为一个值"></a>reduce 为数组提供累加器，合并为一个值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total, currentValue, currentIndex, arr</span>), <span class="title">initialValue</span>)</span></span><br><span class="line"><span class="function"> // 回调函数的参数</span></span><br><span class="line"><span class="function">   //1. <span class="title">total</span>(<span class="params">必须</span>)，初始值, 或者上一次调用回调返回的值</span></span><br><span class="line"><span class="function">   //2. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">   //3. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">   //4. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><p>回调第一次执行时:</p><p>如果 <code>initialValue</code> 在调用 <code>reduce</code> 时被提供，那么第一个 <code>total</code> 将等于 <code>initialValue</code>，此时 <code>currentValue</code> 等于数组中的第一个值；<br>如果 <code>initialValue</code> 未被提供，那么 <code>total</code> <code>等于数组中的第一个值，currentValue</code> 等于数组中的第二个值。此时如果数组为<code>空</code>，那么将抛出 <code>TypeError</code>。<br>如果数组仅有一个元素，并且没有提供 <code>initialValue</code>，或提供了 <code>initialValue</code> 但数组为空，那么回调不会被执行，数组的唯一值将被返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组求和</span></span><br><span class="line"><span class="keyword">let</span> sum = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 将二维数组转化为一维 将数组元素展开</span></span><br><span class="line"><span class="keyword">let</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.concat(b), []);</span><br><span class="line"><span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="reduceRight-从右至左累加"><a href="#reduceRight-从右至左累加" class="headerlink" title="reduceRight 从右至左累加"></a>reduceRight 从右至左累加</h3><p>这个方法除了与 reduce 执行方向相反外，其他完全与其一致，请参考上述 reduce 方法介绍。</p><h3 id="ES6：find-amp-findIndex-根据条件找到数组成员"><a href="#ES6：find-amp-findIndex-根据条件找到数组成员" class="headerlink" title="ES6：find()&amp; findIndex() 根据条件找到数组成员"></a>ES6：find()&amp; findIndex() 根据条件找到数组成员</h3><p>find()定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回 undefined。</p><p>findIndex()定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> new_array = arr.find(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>), <span class="title">thisArg</span>)</span></span><br><span class="line"><span class="function"><span class="title">let</span> <span class="title">new_array</span> = <span class="title">arr</span>.<span class="title">findIndex</span>(<span class="params">function(currentValue, index, arr</span>), <span class="title">thisArg</span>)</span></span><br><span class="line"><span class="function">// 回调函数的参数</span></span><br><span class="line"><span class="function">    //1. <span class="title">currentValue</span>(<span class="params">必须</span>),数组当前元素的值</span></span><br><span class="line"><span class="function">    //2. <span class="title">index</span>(<span class="params">可选</span>), 当前元素的索引值</span></span><br><span class="line"><span class="function">    //3. <span class="title">arr</span>(<span class="params">可选</span>),数组对象本身</span></span><br></pre></td></tr></table></figure><p>这两个方法都可以识别 <code>NaN</code>,弥补了 <code>indexOf</code> 的不足.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// find</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">0</span>); <span class="comment">// 返回元素-5</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>, <span class="literal">NaN</span>].find(<span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, n)); <span class="comment">// 返回元素NaN</span></span><br><span class="line"><span class="keyword">let</span> c = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, n)); <span class="comment">// 返回undefined</span></span><br><span class="line"><span class="comment">// findIndex</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].findIndex(<span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">0</span>); <span class="comment">// 返回索引2</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>, <span class="literal">NaN</span>].findIndex(<span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, n)); <span class="comment">// 返回索引4</span></span><br><span class="line"><span class="keyword">let</span> c = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].findIndex(<span class="function"><span class="params">n</span> =&gt;</span> n &gt; <span class="number">10</span>); <span class="comment">// 返回索引-1</span></span><br></pre></td></tr></table></figure><h3 id="keys-amp-values-amp-entries-遍历键名、遍历键值、遍历键名-键值"><a href="#keys-amp-values-amp-entries-遍历键名、遍历键值、遍历键名-键值" class="headerlink" title="keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值"></a>keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">"a"</span>, <span class="string">"b"</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">"a"</span>, <span class="string">"b"</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a'</span></span><br><span class="line"><span class="comment">// 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">"a"</span>, <span class="string">"b"</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 "a"</span></span><br><span class="line"><span class="comment">// 1 "b"</span></span><br></pre></td></tr></table></figure><p>在 for..of 中如果遍历中途要退出，可以使用 break 退出循环。</p><p>如果不使用 for…of 循环，可以手动调用遍历器对象的 next 方法，进行遍历:</p><h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><p>js 有如下两种数据需要经常遍历</p><ul><li>数组(Array)</li><li>对象(Object)</li></ul><p>同时又提供了如下 8 种方法方便我们遍历元素</p><ul><li>for</li><li>while(或 do~while)</li><li>forEach</li><li>for in</li><li>map</li><li>every</li></ul><p>最终我们将分析遍历效率选出最佳遍历选手.</p><h3 id="数组循环"><a href="#数组循环" class="headerlink" title="数组循环"></a>数组循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [],</span><br><span class="line">  length = (array.length = <span class="number">10000000</span>); <span class="comment">//(一千万)</span></span><br><span class="line"><span class="comment">// for(var i=0;i&lt;length;i++)&#123;</span></span><br><span class="line"><span class="comment">//  array[i] = 'louis';</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(array[0]);</span></span><br><span class="line"><span class="comment">//-------------------------for</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"for:"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------do/while</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; length);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"do while:"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------forEach</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"forEach:"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------for in</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> array) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"for in:"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------- every</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">array.every(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"every"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------- some</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">array.some(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"some"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------map</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">array.map(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"map:"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------filter</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">e, i, arr</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"filter:"</span> + (t2 - t1));</span><br><span class="line"><span class="comment">//-------------------------reduce</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">e, i, arr</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"reduce:"</span> + (t2 - t1));</span><br></pre></td></tr></table></figure><p><img src="/images/415446946848.png" alt="415446946848"></p><p>所以最终结果</p><ul><li>1、for 与 do while</li><li>2、forEach map some every filter (这 5 个不相上下,可认为运行速度差不多)</li><li>3、for in (多次运行不稳定)</li></ul><h3 id="对象循环"><a href="#对象循环" class="headerlink" title="对象循环"></a>对象循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [],</span><br><span class="line">  length = (array.length = <span class="number">10000000</span>); <span class="comment">//(一千万)</span></span><br><span class="line"><span class="keyword">var</span> objects = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">  objects[i] = <span class="built_in">Math</span>.random();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------for in</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> objects) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"for in:"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------Object.keys</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">Object</span>.keys(objects);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Object.keys"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------Object.values</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">Object</span>.values(objects);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Object.values"</span> + (t2 - t1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------Object.getOwnPropertyNames</span></span><br><span class="line"><span class="keyword">var</span> t1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(objects);</span><br><span class="line"><span class="keyword">var</span> t2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Object.getOwnPropertyNames"</span> + (t2 - t1));</span><br></pre></td></tr></table></figure><p><img src="/images/546541654156.png" alt="546541654156"></p><p>结果出乎意料</p><ul><li>1、Object.values</li><li>2、Object.keys、for in</li><li>3、Object.getOwnPropertyNames</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js 中遍历数组并不会改变原始数组的方法总共有 12 个:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ES5：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forEach、every 、some、 filter、map、reduce、reduceRight、&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ES6：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    find、findIndex、keys、values、entries&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="js" scheme="https://yuwangi.github.io/tags/js/"/>
    
      <category term="数组" scheme="https://yuwangi.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>惰性载入函数</title>
    <link href="https://yuwangi.github.io//articles/%E6%83%B0%E6%80%A7%E8%BD%BD%E5%85%A5%E5%87%BD%E6%95%B0.html"/>
    <id>https://yuwangi.github.io//articles/惰性载入函数.html</id>
    <published>2019-10-11T09:41:27.000Z</published>
    <updated>2019-10-11T09:55:10.720Z</updated>
    
    <content type="html"><![CDATA[<p>惰性函数表示函数执行的分支只会在函数第一次调用的时候执行，在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，这样任何对原函数的调用就不用再经过执行的分支了。本文将详细介绍惰性函数</p><h2 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h2><p>因为各浏览器之间的行为的差异，经常会在函数中包含了大量的 if 语句，以检查浏览器特性，解决不同浏览器的兼容问题。比如，最常见的为 dom 节点添加事件的函数</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">    element.addEventListener(type, fun, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">    element.attachEvent(<span class="string">"on"</span> + type, fun);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    element[<span class="string">"on"</span> + type] = fun;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次调用 addEvent 函数的时候，它都要对浏览器所支持的能力进行检查，首先检查是否支持 addEventListener 方法，如果不支持，再检查是否支持 attachEvent 方法，如果还不支持，就用 dom0 级的方法添加事件</p><p>这个过程，在 addEvent 函数每次调用的时候都要走一遍，其实，如果浏览器支持其中的一种方法，那么它就会一直支持了，就没有必要再进行其他分支的检测了。也就是说，if 语句不必每次都执行，代码可以运行的更快一些</p><p>解决方案就是惰性载入</p><h2 id="函数重写"><a href="#函数重写" class="headerlink" title="函数重写"></a>函数重写</h2><p>在介绍惰性函数之前，首先介绍函数重写技术。由于一个函数可以返回另一个函数，因此可以用新的函数来覆盖旧的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">  a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，第一次调用该函数时会 console.log(‘a’)会被执行；全局变量 a 被重定义，并被赋予新的函数。当该函数再次被调用时， console.log(‘b’)会被执行</p><h2 id="惰性函数"><a href="#惰性函数" class="headerlink" title="惰性函数"></a>惰性函数</h2><p>惰性函数的本质就是函数重写。所谓惰性载入，指函数执行的分支只会发生一次，有两种实现惰性载入的方式</p><ul><li>第一种是在函数被调用时，再处理函数。函数在第一次调用时，该函数会被覆盖为另外一个按合适方式执行的函数，这样任何对原函数的调用都不用再经过执行的分支了。代码重写如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">      element.addEventListener(type, fun, <span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">      element.attachEvent(<span class="string">"on"</span> + type, fun);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = fun;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> addEvent(type, element, fun);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个惰性载入的 addEvent()中，if 语句的每个分支都会为 addEvent 变量赋值，有效覆盖了原函数。最后一步便是调用了新赋函数。下一次调用 addEvent()时，便会直接调用新赋值的函数，这样就不用再执行 if 语句了<br>但是，这种方法有个缺点，如果函数名称有所改变，修改起来比较麻烦</p><ul><li>第二种是声明函数时就指定适当的函数。把嗅探浏览器的操作提前到代码加载的时候，在代码加载的时候就立刻进行一次判断，以便让 addEvent 返回一个包裹了正确逻辑的函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addEvent = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">      element.addEventListener(type, fun, <span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">      element.attachEvent(<span class="string">"on"</span> + type, fun);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">type, element, fun</span>) </span>&#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = fun;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="惰性函数应用"><a href="#惰性函数应用" class="headerlink" title="惰性函数应用"></a>惰性函数应用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="literal">null</span>,</span><br><span class="line">    flag = <span class="literal">false</span>,</span><br><span class="line">    ary = [</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml3.XMLHTTP"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line">  <span class="comment">//循环遍历这个数组，看看数组内的哪一个元素兼容浏览器，如果兼容，就赋值给给xhr，并且返回出去</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = ary.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> curFn = ary[i];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      xhr = curFn();</span><br><span class="line">      createXHR = curFn; <span class="comment">//重新定义createXHR ,第二次调用ajax请求，则直接使用这个方法</span></span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">//说明浏览器不兼容，继续循环</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"你的浏览器不支持 ，请升级浏览器"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;惰性函数表示函数执行的分支只会在函数第一次调用的时候执行，在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，这样任何对原函数的调用就不用再经过执行的分支了。本文将详细介绍惰性函数&lt;/p&gt;
&lt;h2 id=&quot;使用背景&quot;&gt;&lt;a href=&quot;#使用背景&quot; class=&quot;headerlink&quot; title=&quot;使用背景&quot;&gt;&lt;/a&gt;使用背景&lt;/h2&gt;&lt;p&gt;因为各浏览器之间的行为的差异，经常会在函数中包含了大量的 if 语句，以检查浏览器特性，解决不同浏览器的兼容问题。比如，最常见的为 dom 节点添加事件的函数&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="js" scheme="https://yuwangi.github.io/tags/js/"/>
    
      <category term="函数" scheme="https://yuwangi.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="高阶程序" scheme="https://yuwangi.github.io/tags/%E9%AB%98%E9%98%B6%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Vue中.sync 修饰符：进行父子组件间相互传递数据</title>
    <link href="https://yuwangi.github.io//articles/Vue%E4%B8%AD-sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6%EF%BC%9A%E8%BF%9B%E8%A1%8C%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9B%B8%E4%BA%92%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE.html"/>
    <id>https://yuwangi.github.io//articles/Vue中-sync-修饰符：进行父子组件间相互传递数据.html</id>
    <published>2019-10-11T07:09:17.000Z</published>
    <updated>2019-10-11T07:20:36.628Z</updated>
    
    <content type="html"><![CDATA[<p>.sync 修饰符的作用？<br>允许 prop 进行双向绑定，以 this.$emit(update:PropName,newValue)的模式触发事件。</p><a id="more"></a><p>就是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-<span class="built_in">document</span> v-bind:title.sync=<span class="string">"doc.title"</span>&gt;&lt;/text-document&gt;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-<span class="built_in">document</span></span><br><span class="line">  v-bind:title=<span class="string">"doc.title"</span></span><br><span class="line">  v-on:update:title=<span class="string">"doc.title = $event"</span></span><br><span class="line">&gt;&lt;/text-document&gt;</span><br></pre></td></tr></table></figure><p>以在<code>index.vue</code>下引入<code>childrenOne</code>子组件为例，使用<code>.sync</code>属性，会在<code>mounted</code>生命周期里面 alert 弹出<code>childrenOne</code>，而不是<code>index</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"vuexWrap common"</span>&gt;</span><br><span class="line">        &lt;childrenOne :title.sync=<span class="string">"doc.title"</span>&gt;&lt;/childrenOne&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> childrenOne <span class="keyword">from</span> <span class="string">'../../components/childrenOne.vue'</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">        data () &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                doc:&#123;</span><br><span class="line">                    title:<span class="string">'index'</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted ()&#123;</span><br><span class="line">             <span class="comment">//childrenOne</span></span><br><span class="line">            alert(<span class="keyword">this</span>.doc.title);</span><br><span class="line">        &#125;,</span><br><span class="line">        components : &#123;</span><br><span class="line">            childrenOne</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>childrenOne.vue</code>的生命周期 mounted 里面通过<br><code>this.$emit(&#39;update:title&#39;, this.newTitle);</code><br>设置<code>title</code>属值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"OneWrap common"</span>&gt;</span><br><span class="line">        &#123;&#123;title&#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">        props:&#123;</span><br><span class="line">            title:<span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data () &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                newTitle:<span class="string">"childrenOne"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted ()&#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'update:title'</span>, <span class="keyword">this</span>.newTitle);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.sync 修饰符的作用？&lt;br&gt;允许 prop 进行双向绑定，以 this.$emit(update:PropName,newValue)的模式触发事件。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://yuwangi.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Git开发规范</title>
    <link href="https://yuwangi.github.io//articles/Git%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.html"/>
    <id>https://yuwangi.github.io//articles/Git开发规范.html</id>
    <published>2019-10-11T06:30:34.000Z</published>
    <updated>2019-10-11T07:01:34.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><ul><li>首先<code>master</code>和<code>dev</code>分支设置提交权限，只有项目管理员能提交</li><li>开发时在<code>dev</code>分支下拉取最新的代码，建立<code>feature/aaa</code>分支</li><li>进入<code>git.code</code>进行<code>merge code view</code></li><li><code>merge</code>到<code>dev</code>分支</li><li><code>release</code>分支 -(预上线分支)</li><li><code>dev</code>分支上测试环境</li><li><code>master</code>上正式环境  每个版本打tag<a id="more"></a></li></ul><p><img src="/images/1647e5710a461adc.png" alt="fwef"></p><h2 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h2><ul><li>feat: 添加新特性</li><li>fix: 修复bug</li><li>docs: 仅仅修改了文档</li><li>style: 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑</li><li>refactor: 代码重构，没有加新功能或者修复bug</li><li>perf: 增加代码进行性能测试</li><li>test: 增加测试用例</li><li>chore: 改变构建流程、或者增加依赖库、工具等</li></ul><p>推荐一个git提交规范风格配置 <a href="https://www.conventionalcommits.org/en/v1.0.0-beta.4/" target="_blank" rel="noopener">https://www.conventionalcommits.org/en/v1.0.0-beta.4/</a></p><p>安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev commitizen cz-conventional-changelog @commitlint/cli @commitlint/config-conventional husky standard-version</span><br></pre></td></tr></table></figure><p>配置<code>package.json</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"commit"</span>: <span class="string">"git-cz"</span>,</span><br><span class="line">    <span class="string">"release"</span>: <span class="string">"standard-version"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"husky"</span>: &#123;</span><br><span class="line">    <span class="string">"hooks"</span>: &#123;</span><br><span class="line">      <span class="string">"commit-msg"</span>: <span class="string">"commitlint -E HUSKY_GIT_PARAMS"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目根新建 <code>commitlint.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  extends: [<span class="string">'@commitlint/config-conventional'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分支管理&quot;&gt;&lt;a href=&quot;#分支管理&quot; class=&quot;headerlink&quot; title=&quot;分支管理&quot;&gt;&lt;/a&gt;分支管理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先&lt;code&gt;master&lt;/code&gt;和&lt;code&gt;dev&lt;/code&gt;分支设置提交权限，只有项目管理员能提交&lt;/li&gt;
&lt;li&gt;开发时在&lt;code&gt;dev&lt;/code&gt;分支下拉取最新的代码，建立&lt;code&gt;feature/aaa&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;进入&lt;code&gt;git.code&lt;/code&gt;进行&lt;code&gt;merge code view&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge&lt;/code&gt;到&lt;code&gt;dev&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release&lt;/code&gt;分支 -(预上线分支)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dev&lt;/code&gt;分支上测试环境&lt;/li&gt;
&lt;li&gt;&lt;code&gt;master&lt;/code&gt;上正式环境  每个版本打tag
    
    </summary>
    
    
    
      <category term="Git" scheme="https://yuwangi.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由守卫与登陆权限控制</title>
    <link href="https://yuwangi.github.io//articles/vue%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB%E4%B8%8E%E7%99%BB%E9%99%86%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6.html"/>
    <id>https://yuwangi.github.io//articles/vue路由守卫与登陆权限控制.html</id>
    <published>2019-10-10T03:55:31.000Z</published>
    <updated>2019-10-11T07:22:23.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-路由守卫"><a href="#Vue-路由守卫" class="headerlink" title="Vue 路由守卫"></a>Vue 路由守卫</h2><p>路由守卫，也可以是路由拦截，我们可以通过路由拦截，来判断用户是否登录，该页面用户是否有权限浏览，需要结合 meta 来实现<br>Vue 中路由守卫一共有三种，一个全局路由守卫，一个是组件内路由守卫，一个是 router 独享守卫</p><a id="more"></a><h3 id="全局路由守卫"><a href="#全局路由守卫" class="headerlink" title="全局路由守卫"></a>全局路由守卫</h3><p>所谓全局守卫就是所有页面的路由拦截。它有两个钩子 全局前置守卫<code>beforeEach</code>, 全局后置守卫<code>afterEach</code></p><p>全局前置守卫，就是 用户进入页面时路由拦截，进行一些处理的钩子。通常做一些页面权限控制或 title 命名之类的操作。</p><p>全局后置守卫，就是 页面成功访问的回调钩子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue中插件必须use注册</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由配置项，此处是路由级钩子的定义</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/"</span>,</span><br><span class="line">    component: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">"./index.vue"</span>], resolve),</span><br><span class="line">    keepAlive: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/user/:userName"</span>,</span><br><span class="line">    keepAlive: <span class="literal">true</span>,</span><br><span class="line">    beforeEnter(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"router beforeEnter"</span>);</span><br><span class="line">      next();</span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">"./user.vue"</span>], resolve)</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局钩子</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// to: Route: 即将要进入的目标 路由对象</span></span><br><span class="line">  <span class="comment">// from: Route: 当前导航正要离开的路由</span></span><br><span class="line">  <span class="comment">// next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"global beforeEach"</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.beforeResolve(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"global beforeResolve"</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"global afterEach"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化Vue对象并挂载</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure><h3 id="组件独享守卫"><a href="#组件独享守卫" class="headerlink" title="组件独享守卫"></a>组件独享守卫</h3><p>组件独享守卫是加载组件时定义的一些钩子，有<code>beforeRouteEnter</code>、<code>beforeRouteUpdate</code>和<code>beforeRouteLeave</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;我是:&#123;&#123;userName&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">'user'</span>,</span><br><span class="line">        data () &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                msg: <span class="string">'这里是 User Page.'</span>,</span><br><span class="line">                userName: <span class="string">'yuwangi'</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;&#125;,</span><br><span class="line">        mounted () &#123;</span><br><span class="line">            <span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">            me.userName = me.$route.params.userName;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'user mounted.'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;<span class="comment">//组件激活</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'component beforeRouteEnter'</span>);</span><br><span class="line">            next();</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;<span class="comment">//在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'component beforeRouteUpdate'</span>);</span><br><span class="line">            next();</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeRouteLeave(to,<span class="keyword">from</span>,next)&#123;<span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'component beforeRouteLeave'</span>);</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="登陆权限控制"><a href="#登陆权限控制" class="headerlink" title="登陆权限控制"></a>登陆权限控制</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">"element-ui"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./assets/eletheme/index.css"</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"./router/index"</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store/index"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./Index.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">"vue-nprogress"</span>; <span class="comment">//加载进度条</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import * as filters from './filters';</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> directives <span class="keyword">from</span> <span class="string">"./directive"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Element, &#123; <span class="attr">size</span>: <span class="string">"small"</span> &#125;);</span><br><span class="line">Vue.use(NProgress, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nprogress = <span class="keyword">new</span> NProgress(&#123; <span class="attr">parent</span>: <span class="string">".app-nprogress"</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// // 全局过滤器</span></span><br><span class="line"><span class="comment">// Object.keys(filters).forEach(key =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   Vue.filter(key, filters[key]);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局指令</span></span><br><span class="line"><span class="built_in">Object</span>.keys(directives).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  Vue.directive(key, directives[key]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由守卫</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 时间统计</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>._Timer) &#123;</span><br><span class="line">    <span class="built_in">window</span>._Timer[to.path] = <span class="built_in">window</span>._Timer.now();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 登录或者未登录跳转</span></span><br><span class="line">  <span class="keyword">const</span> randerPath = <span class="function"><span class="params">isLogin</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> firstPath = to.path.split(<span class="string">"/"</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"&gt; isLogin"</span>, isLogin);</span><br><span class="line">    <span class="comment">// 未登录操作</span></span><br><span class="line">    <span class="keyword">if</span> (!isLogin) &#123;</span><br><span class="line">      <span class="keyword">if</span> (firstPath !== <span class="string">"login"</span>) &#123;</span><br><span class="line">        <span class="comment">// 根目录过来的不添加参数</span></span><br><span class="line">        <span class="keyword">if</span> (to.fullPath === <span class="string">"/"</span>) &#123;</span><br><span class="line">          next(&#123;</span><br><span class="line">            path: <span class="string">"/login"</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          next(&#123;</span><br><span class="line">            path: <span class="string">"/login"</span></span><br><span class="line">            <span class="comment">// query: &#123; redirect: to.fullPath &#125;</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (firstPath === <span class="string">"login"</span>) &#123;</span><br><span class="line">        next(<span class="string">"/"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  randerPath(<span class="built_in">window</span>.serverData.isLogin);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function"><span class="params">to</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>._Timer &amp;&amp; !<span class="built_in">window</span>._Timer.inited) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="built_in">parseInt</span>(<span class="built_in">window</span>._Timer.now() - <span class="built_in">window</span>._Timer.start, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">// window.console.log('topath:', to.path);</span></span><br><span class="line">    <span class="comment">// window.console.timeEnd('firstRouter');</span></span><br><span class="line">    <span class="built_in">window</span>._Timer.tjTrack(<span class="string">"timing"</span>, <span class="string">"router"</span>, <span class="string">"firstRouter"</span>, now);</span><br><span class="line">    <span class="built_in">window</span>._Timer.inited = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载vue实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  nprogress,</span><br><span class="line">  ...App</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.$mount(<span class="string">"#App"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vue-路由守卫&quot;&gt;&lt;a href=&quot;#Vue-路由守卫&quot; class=&quot;headerlink&quot; title=&quot;Vue 路由守卫&quot;&gt;&lt;/a&gt;Vue 路由守卫&lt;/h2&gt;&lt;p&gt;路由守卫，也可以是路由拦截，我们可以通过路由拦截，来判断用户是否登录，该页面用户是否有权限浏览，需要结合 meta 来实现&lt;br&gt;Vue 中路由守卫一共有三种，一个全局路由守卫，一个是组件内路由守卫，一个是 router 独享守卫&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://yuwangi.github.io/tags/Vue/"/>
    
      <category term="router" scheme="https://yuwangi.github.io/tags/router/"/>
    
      <category term="权限控制" scheme="https://yuwangi.github.io/tags/%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>梯子免费上网攻略</title>
    <link href="https://yuwangi.github.io//articles/SSR%E6%A2%AF%E5%AD%90%E5%85%8D%E8%B4%B9%E4%B8%8A%E7%BD%91%E6%94%BB%E7%95%A5.html"/>
    <id>https://yuwangi.github.io//articles/SSR梯子免费上网攻略.html</id>
    <published>2019-10-10T03:03:28.000Z</published>
    <updated>2019-10-15T11:10:52.846Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章分享一些科学上网 Shadowsocks、ShadowsocksR、V2Ray、Brook、Goflyway 等代理方式。为了方便访问Google 查阅资料而设，请勿用于任何非法活动（请遵守中国法律）。部分账号信息由网友贡献分享，在此感谢！</p><a id="more"></a><h2 id="电脑"><a href="#电脑" class="headerlink" title="电脑"></a>电脑</h2><p>此处只介绍一种chrome浏览器插件setup VPN<br>资源链接: <a href="https://pan.baidu.com/s/1gtA3D7DVT180hXP7ViIAUA" target="_blank" rel="noopener">https://pan.baidu.com/s/1gtA3D7DVT180hXP7ViIAUA</a> 提取码: x1y2（如不能使用，请邮件联系）</p><p>操作步骤：<br>1、打开chrome浏览器<br>2、工具栏 …<br>3、更多工具<br>4、扩展程序<br>5、把下载下来的资源拖放到窗口<br>6、启用扩展程序<br>7、注册邮箱账号<br>8、点击选用不同国家地区使用</p><h2 id="苹果手机"><a href="#苹果手机" class="headerlink" title="苹果手机"></a>苹果手机</h2><p>苹果手机由于<code>app store</code>限制,无法下载代理软件。特此分享一个免费的美区ID。账号：<code>gd5@jufxf.com</code>，密码：<code>Macziyuan.com2018</code>,禁止将此账号分享给其他人。<br>Tips:账号如不能使用建议自己注册一个  攻略：<a href="https://www.hurbai.com/iOS/60" target="_blank" rel="noopener">https://www.hurbai.com/iOS/60</a></p><p>1、手机打开设置<br>2、Apple ID、iCloud、iTunes等<br>3、iTunes Store与App Store<br>4、选中Apple ID 退出登陆<br>5、登陆提供的账号<br>6、在app store中搜索Shadowrocket并下载</p><p>此处介绍几个免费SSR账号网址<br><a href="https://chenxinbo.com/free" target="_blank" rel="noopener">https://chenxinbo.com/free</a><br><a href="https://free-ss.site/" target="_blank" rel="noopener">https://free-ss.site/</a><br><a href="https://lncn.org/" target="_blank" rel="noopener">https://lncn.org/</a></p><p>使用方法很简单，里面提供了一些ss链接或者二维码，打开下载的软件直接使用即可。</p><h2 id="安卓手机"><a href="#安卓手机" class="headerlink" title="安卓手机"></a>安卓手机</h2><p>直接下载Shadowrocket软件，然后通过前边分享的SSR账号直接使用即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章分享一些科学上网 Shadowsocks、ShadowsocksR、V2Ray、Brook、Goflyway 等代理方式。为了方便访问Google 查阅资料而设，请勿用于任何非法活动（请遵守中国法律）。部分账号信息由网友贡献分享，在此感谢！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Shadowsocks" scheme="https://yuwangi.github.io/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局详解及实战</title>
    <link href="https://yuwangi.github.io//articles/Flex%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%AE%9E%E6%88%98.html"/>
    <id>https://yuwangi.github.io//articles/Flex布局详解及实战.html</id>
    <published>2019-10-08T10:15:44.000Z</published>
    <updated>2019-10-11T02:07:18.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flex-布局是什么"><a href="#Flex-布局是什么" class="headerlink" title="Flex 布局是什么"></a>Flex 布局是什么</h2><p><strong>Flex</strong> 是 <strong>Flexible Box</strong> 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为 <strong>Flex</strong> 布局。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    display:flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行内元素也可以使用 Flex 布局。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    display:inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，设为 <strong>Flex</strong> 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>采用 <strong>Flex</strong> 布局的元素，称为 <strong>Flex</strong> 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 <strong>Flex</strong> 项目（flex item），简称”项目”。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png" alt="images/20190930145233.jpg"></p><p>容器默认存在两根轴：水平的主轴（<strong>main axis</strong>）和垂直的交叉轴（<strong>cross axis</strong>）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p><h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><h3 id="flex-direction-方向"><a href="#flex-direction-方向" class="headerlink" title="flex-direction(方向)"></a>flex-direction(方向)</h3><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png" alt="ss"></p><ul><li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li></ul><h3 id="flex-wrap-换行"><a href="#flex-wrap-换行" class="headerlink" title="flex-wrap (换行)"></a>flex-wrap (换行)</h3><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png" alt="sss"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>nowrap</code>（默认）：不换行。</li><li><code>wrap</code>：换行，第一行在上方。</li><li><code>wrap-reverse</code>：换行，第一行在下方。</li></ul><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png" alt="ww"></p><ul><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png" alt="ssss"></p><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png" alt="xfrsed"></p><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul><h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  order: &lt;integer&gt;;//数值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png" alt="fwsg"></p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png" alt="fewgs"></p><p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg" alt="ergaw"></p><p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p><code>负值对该属性无效。</code></p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（<code>main size</code>）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code>。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png" alt="fweg"></p><h2 id="Flex练习"><a href="#Flex练习" class="headerlink" title="Flex练习"></a>Flex练习</h2><p>阮一峰老师做了个骰子练习，那么我也就着手做一个。</p><p><img src="/images/46984698048.png" alt="fwefw"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>骰子练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body,html&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            width: 160px;</span><br><span class="line">            height: 160px;</span><br><span class="line">            display: flex;</span><br><span class="line"><span class="css">            <span class="selector-tag">justify-content</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">            align-items: center;</span><br><span class="line"><span class="css">            <span class="selector-tag">align-content</span><span class="selector-pseudo">:space-around</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            border-radius: 5px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ff0000</span>;</span></span><br><span class="line">            width: 34px;</span><br><span class="line">            height: 34px;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20191009103717445.png" alt="20191009103717445.png"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;</span><br><span class="line">    &lt;title&gt;骰子练习&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span>,<span class="selector-tag">html</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">            <span class="attribute">display</span>: flex;</span><br><span class="line">            <span class="attribute">flex-direction</span>:column;</span><br><span class="line">            <span class="comment">/* 纵向排列 */</span></span><br><span class="line">            <span class="attribute">justify-content</span>:space-around;</span><br><span class="line">            <span class="comment">/* 子元素 间隔相同  */</span></span><br><span class="line">            <span class="attribute">align-items</span>: center;</span><br><span class="line">            <span class="comment">/* 纵轴居中  */</span></span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.item</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#ff0000</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">34px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">34px</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="box"&gt;</span><br><span class="line">        &lt;div class="item"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="item"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/4891849864105.png" alt="4891849864105"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;</span><br><span class="line">    &lt;title&gt;骰子练习&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span>,<span class="selector-tag">html</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">            <span class="attribute">display</span>: flex;</span><br><span class="line">            <span class="attribute">flex-direction</span>:column;</span><br><span class="line">            <span class="attribute">align-items</span>: center;</span><br><span class="line">            <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.item</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#ff0000</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">34px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">34px</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.item1</span>&#123;</span><br><span class="line">            <span class="attribute">align-self</span>: flex-start;</span><br><span class="line">            <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.item2</span>&#123;</span><br><span class="line">            <span class="attribute">justify-content</span>: center;</span><br><span class="line">            <span class="attribute">align-self</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.item3</span>&#123;</span><br><span class="line">            <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">            <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="box"&gt;</span><br><span class="line">        &lt;div class="item item1"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="item item2"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="item item3"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Flex-布局是什么&quot;&gt;&lt;a href=&quot;#Flex-布局是什么&quot; class=&quot;headerlink&quot; title=&quot;Flex 布局是什么&quot;&gt;&lt;/a&gt;Flex 布局是什么&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Flex&lt;/strong&gt; 是 &lt;strong&gt;Flexible Box&lt;/strong&gt; 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。&lt;/p&gt;
&lt;p&gt;任何一个容器都可以指定为 &lt;strong&gt;Flex&lt;/strong&gt; 布局。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Flex" scheme="https://yuwangi.github.io/tags/Flex/"/>
    
      <category term="css" scheme="https://yuwangi.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Eslint规范</title>
    <link href="https://yuwangi.github.io//articles/Eslint%E8%A7%84%E8%8C%83.html"/>
    <id>https://yuwangi.github.io//articles/Eslint规范.html</id>
    <published>2019-10-08T06:57:52.000Z</published>
    <updated>2019-10-09T01:34:44.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p><strong>ESLint</strong>是一个语法规则和代码风格的检查工具。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1、由于<strong>javascript</strong>是一门弱语言，代码规范不严格，会造成一些问题。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有些人习惯加分号，有些人则不加，但在特殊情况下不加会出现语法错误   例如 use strict 、typescript</span></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> b=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>2、编码过后运行在浏览器出现各种报错。<br><img src="/images/9886411168541469.png" alt="c772515ccc9ee0755106f51049856aa6.png"></p><p>3、在团队<strong>git</strong>开发合作中，由于<strong>VSCode</strong>中代码格式化工具繁多，不同工具格式化造成的影响。（此处参照上一篇<strong>VSCode配置</strong>）<br><img src="/images/4984987489.png" alt="f4f1ea73165f6d9a15adb99b02ed7cc4.png"><br><img src="/images/19684196114451.png" alt="2164fcf681e925055277a281c56adfcc.png"></p><h3 id="以下规则沿用腾讯AlloyTeam-ESLint-规范，而且也是你也可以配置个性化-ESLint-规则"><a href="#以下规则沿用腾讯AlloyTeam-ESLint-规范，而且也是你也可以配置个性化-ESLint-规则" class="headerlink" title="以下规则沿用腾讯AlloyTeam ESLint 规范，而且也是你也可以配置个性化 ESLint 规则"></a>以下规则沿用腾讯<strong>AlloyTeam ESLint</strong> 规范，而且也是你也可以配置个性化 ESLint 规则</h3><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint babel-eslint vue-eslint-parser@<span class="number">5.0</span><span class="number">.0</span> eslint-plugin-vue eslint-config-alloy</span><br></pre></td></tr></table></figure><h3 id="配置原则"><a href="#配置原则" class="headerlink" title="配置原则"></a>配置原则</h3><p>我们依据以下三条原则，研读了 <strong>ESLint</strong> 所有的配置项，定制出了心目中的「完美」<strong>ESLint</strong> 配置。<br>1、能够帮助发现代码错误的规则，全部开启配置<br>2、不应该依赖于某个具体项目，而应尽可能的合理<br>3、帮助保持团队的代码风格统一，而不是限制开发体验</p><p>在你的项目根目录下创建 <strong>.eslintrc.js</strong>，并将以下内容复制到文件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    extends: [</span><br><span class="line">        <span class="string">'alloy'</span>,</span><br><span class="line">        <span class="string">'alloy/vue'</span>,</span><br><span class="line">    ],</span><br><span class="line">    env: &#123;</span><br><span class="line">        <span class="comment">// 这里填入你的项目用到的环境</span></span><br><span class="line">        <span class="comment">// 它们预定义了不同环境的全局变量，比如：</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// browser: true,</span></span><br><span class="line">        <span class="comment">// node: true,</span></span><br><span class="line">        <span class="comment">// mocha: true,</span></span><br><span class="line">        <span class="comment">// jest: true,</span></span><br><span class="line">        <span class="comment">// jquery: true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    globals: &#123;</span><br><span class="line">        <span class="comment">// 这里填入你的项目需要的全局变量</span></span><br><span class="line">        <span class="comment">// false 表示这个全局变量不允许被重新赋值，比如：</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// myGlobal: false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;</span><br><span class="line">        <span class="comment">// 这里填入你的项目需要的个性化配置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    extends: [<span class="string">'./base.js'</span>],</span><br><span class="line">    rules: &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止 for 循环出现方向错误的循环</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'for-direction'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * getter 必须有返回值，并且禁止返回空</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'getter-return'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                allowImplicit: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止将 async 函数做为 new Promise 的回调函数</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         * @reason 出现这种情况时，一般不需要使用 new Promise 实现异步了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-async-promise-executor'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止将 await 写在循环里，因为这样就无法同时发送多个异步请求了</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         * @reason 要求太严格了，有时需要在循环中写 await</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-await-in-loop'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止与负零进行比较</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-compare-neg-zero'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在测试表达式中使用赋值语句，除非这个赋值语句被括号包起来了</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-cond-assign'</span>: [<span class="string">'error'</span>, <span class="string">'except-parens'</span>],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 console</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         * @reason console 的使用很常见</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-console'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止将常量作为分支条件判断中的测试表达式，但允许作为循环条件判断中的测试表达式</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-constant-condition'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                checkLoops: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在正则表达式中出现 Ctrl 键的 ASCII 表示，即禁止使用 /\x1f/</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         * @reason 几乎不会遇到这种场景</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-control-regex'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 debugger</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-debugger'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在函数参数中出现重复名称的参数</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         * @reason 在编译阶段就会报错了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-dupe-args'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在对象字面量中出现重复名称的键名</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-dupe-keys'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 switch 语句中出现重复测试表达式的 case</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-duplicate-case'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止出现空代码块，允许 catch 为空代码块</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-empty'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                allowEmptyCatch: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在正则表达式中使用空的字符集 []</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-empty-character-class'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止将 catch 的第一个参数 error 重新赋值</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-ex-assign'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止不必要的布尔类型转换，比如 !! 或 Boolean</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-extra-boolean-cast'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止将一个函数声明重新赋值</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-func-assign'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 if 代码块内出现函数声明</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-inner-declarations'</span>: [<span class="string">'error'</span>, <span class="string">'both'</span>],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 RegExp 构造函数中出现非法的正则表达式</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-invalid-regexp'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用特殊空白符（比如全角空格），除非是出现在字符串、正则表达式或模版字符串中</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-irregular-whitespace'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                skipStrings: <span class="literal">true</span>,</span><br><span class="line">                skipComments: <span class="literal">false</span>,</span><br><span class="line">                skipRegExps: <span class="literal">true</span>,</span><br><span class="line">                skipTemplates: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止正则表达式中使用肉眼无法区分的特殊字符</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         * @reason 某些特殊字符很难看出差异，最好不要在正则中使用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-misleading-character-class'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止将 Math, JSON 或 Reflect 直接作为函数调用</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-obj-calls'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 hasOwnProperty, isPrototypeOf 或 propertyIsEnumerable</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         * @reason hasOwnProperty 比较常用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-prototype-builtins'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在正则表达式中出现连续的空格，必须使用 /foo &#123;3&#125;bar/ 代替</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-regex-spaces'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在数组中出现连续的逗号</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-sparse-arrays'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在普通字符串中出现模版字符串里的变量形式</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-template-curly-in-string'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 return, throw, break 或 continue 之后还有代码</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-unreachable'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 finally 中出现 return, throw, break 或 continue</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         * @reason finally 中的语句会在 try 之前执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-unsafe-finally'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 in 或 instanceof 操作符的左侧使用感叹号，如 if (!key in object)</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-unsafe-negation'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止将 await 或 yield 的结果做为运算符的后面项</span></span><br><span class="line"><span class="comment">         * https://github.com/eslint/eslint/issues/11899</span></span><br><span class="line"><span class="comment">         * 在上面 issue 修复之前，关闭此规则</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         * @reason 这样会导致不符合预期的结果</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'require-atomic-updates'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必须使用 isNaN(foo) 而不是 foo === NaN</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'use-isnan'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * typeof 表达式比较的对象必须是 'undefined', 'object', 'boolean', 'number', 'string', 'function', 'symbol', 或 'bigint'</span></span><br><span class="line"><span class="comment">         * @category Possible Errors</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'valid-typeof'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * setter 必须有对应的 getter，getter 可以没有对应的 setter</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'accessor-pairs'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                setWithoutGet: <span class="literal">true</span>,</span><br><span class="line">                getWithoutSet: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数组的方法除了 forEach 之外，回调函数必须有返回值</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'array-callback-return'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将 var 定义的变量视为块作用域，禁止在块外使用</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 已经禁止使用 var 了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'block-scoped-var'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 在类的非静态方法中，必须存在对 this 的引用</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'class-methods-use-this'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止函数的循环复杂度超过 20</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason https://en.wikipedia.org/wiki/Cyclomatic_complexity</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        complexity: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                max: <span class="number">20</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止函数在不同分支返回不同类型的值</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 缺少 TypeScript 的支持，类型判断是不准确的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'consistent-return'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * switch 语句必须有 default</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'default-case'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止出现 foo['bar']，必须写成 foo.bar</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 当需要写一系列属性的时候，可以更统一</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'dot-notation'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必须使用 === 或 !==，禁止使用 == 或 !=</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        eqeqeq: [<span class="string">'error'</span>, <span class="string">'always'</span>],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * for in 内部必须有 hasOwnProperty</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'guard-for-in'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制一个文件中类的数量</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'max-classes-per-file'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 alert</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason alert 很常用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-alert'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 caller 或 callee</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 它们是已废弃的语法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-caller'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * switch 的 case 内有变量定义的时候，必须使用大括号将 case 内变成一个代码块</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-case-declarations'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在正则表达式中出现形似除法操作符的开头，如 let a = /=foo/</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 有代码高亮的话，在阅读这种代码时，也完全不会产生歧义或理解上的困难</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-div-regex'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 else 内使用 return，必须改为提前结束</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason else 中使用 return 可以使代码结构更清晰</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-else-return'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 不允许有空函数</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 有时需要将一个空函数设置为某个项的默认值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-empty-function'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止解构赋值中出现空 &#123;&#125; 或 []</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-empty-pattern'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 foo == null，必须使用 foo === null</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-eq-null'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 eval</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-eval'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止修改原生对象</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 修改原生对象可能会与将来版本的 js 冲突</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-extend-native'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止出现没必要的 bind</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-extra-bind'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止出现没必要的 label</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 已经禁止使用 label 了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-extra-label'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * switch 的 case 内必须有 break, return 或 throw，空的 case 除外</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-fallthrough'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止对全局变量赋值</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-global-assign'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 !! ~ 等难以理解的运算符，仅允许使用 !!</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-implicit-coercion'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                allow: [<span class="string">'!!'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在全局作用域下定义变量或申明函数</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 模块化之后，不会出现这种在全局作用域下定义变量的情况</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-implicit-globals'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 setTimeout 或 setInterval 中传入字符串</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-implied-eval'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在类之外的地方使用 this</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 只允许在 class 中使用 this</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-invalid-this'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 __iterator__</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason __iterator__ 是一个已废弃的属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-iterator'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 label</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-labels'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用没必要的 &#123;&#125; 作为代码块</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-lone-blocks'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在循环内的函数中出现循环体条件语句中定义的变量</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 使用 let 就已经解决了这个问题了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-loop-func'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 magic numbers</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-magic-numbers'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 \ 来换行字符串</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-multi-str'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止直接 new 一个类而不赋值</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason new 应该作为创建一个类的实例的方法，所以不能不赋值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-new'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 new Function</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 这和 eval 是等价的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-new-func'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 new 来生成 String, Number 或 Boolean</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-new-wrappers'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 0 开头的数字表示八进制数</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-octal'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用八进制的转义符</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-octal-escape'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止对函数的参数重新赋值</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-param-reassign'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 __proto__</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-proto'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止重复定义变量</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-redeclare'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用指定的对象属性</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 它用于限制某个具体的 api 不能使用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-restricted-properties'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 return 语句里赋值</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-return-assign'</span>: [<span class="string">'error'</span>, <span class="string">'always'</span>],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 return 语句里使用 await</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-return-await'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止出现 location.href = 'javascript:void(0)';</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 有些场景下还是需要用到这个</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-script-url'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止将自己赋值给自己</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-self-assign'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止将自己与自己比较</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-self-compare'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用逗号操作符</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-sequences'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止 throw 字面量，必须 throw 一个 Error 对象</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-throw-literal'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 循环内必须对循环条件的变量有修改</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-unmodified-loop-condition'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止无用的表达式</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-unused-expressions'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                allowShortCircuit: <span class="literal">true</span>,</span><br><span class="line">                allowTernary: <span class="literal">true</span>,</span><br><span class="line">                allowTaggedTemplates: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止出现没用到的 label</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 已经禁止使用 label 了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-unused-labels'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止出现没必要的 call 或 apply</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-useless-call'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 catch 中仅仅只是把错误 throw 出去</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 这样的 catch 是没有意义的，等价于直接执行 try 里的代码</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-useless-catch'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止出现没必要的字符串连接</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-useless-concat'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止出现没必要的转义</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 转义可以使代码更易懂</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-useless-escape'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止没必要的 return</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 没必要限制 return</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-useless-return'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 void</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-void'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止注释中出现 TODO 和 FIXME</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason TODO 很常用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-warning-comments'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 with</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-with'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用 ES2018 中的正则表达式命名组</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason 正则表达式已经较难理解了，没必要强制加上命名组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'prefer-named-capture-group'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Promise 的 reject 中必须传入 Error 对象，而不是字面量</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'prefer-promise-reject-errors'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * parseInt 必须传入第二个参数</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        radix: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * async 函数中必须存在 await 语句</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason async function 中没有 await 的写法很常见，koa 的示例中就有这种用法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'require-await'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 正则表达式中必须要加上 u 标志</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'require-unicode-regexp'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * var 必须在作用域的最前面</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         * @reason var 不在最前面也是很常见的用法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vars-on-top'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必须使用 if (foo === 5) 而不是 if (5 === foo)</span></span><br><span class="line"><span class="comment">         * @category Best Practices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        yoda: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            <span class="string">'never'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                onlyEquality: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 'strict';</span></span><br><span class="line"><span class="comment">         * @category Strict Mode</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        strict: [<span class="string">'error'</span>, <span class="string">'never'</span>],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 变量必须在定义的时候赋值</span></span><br><span class="line"><span class="comment">         * @category Variables</span></span><br><span class="line"><span class="comment">         * @reason 先定义后赋值很常见</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'init-declarations'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 delete</span></span><br><span class="line"><span class="comment">         * @category Variables</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-delete-var'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止 label 名称与定义过的变量重复</span></span><br><span class="line"><span class="comment">         * @category Variables</span></span><br><span class="line"><span class="comment">         * @reason 已经禁止使用 label 了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-label-var'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用指定的全局变量</span></span><br><span class="line"><span class="comment">         * @category Variables</span></span><br><span class="line"><span class="comment">         * @reason 它用于限制某个具体的变量名不能使用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-restricted-globals'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止变量名与上层作用域内的定义过的变量重复</span></span><br><span class="line"><span class="comment">         * @category Variables</span></span><br><span class="line"><span class="comment">         * @reason 很多时候函数的形参和传参是同名的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-shadow'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用保留字作为变量名</span></span><br><span class="line"><span class="comment">         * @category Variables</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-shadow-restricted-names'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用未定义的变量</span></span><br><span class="line"><span class="comment">         * @category Variables</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-undef'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">typeof</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止将 undefined 赋值给变量</span></span><br><span class="line"><span class="comment">         * @category Variables</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-undef-init'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 undefined</span></span><br><span class="line"><span class="comment">         * @category Variables</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-undefined'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 定义过的变量必须使用</span></span><br><span class="line"><span class="comment">         * @category Variables</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-unused-vars'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                vars: <span class="string">'all'</span>,</span><br><span class="line">                args: <span class="string">'none'</span>,</span><br><span class="line">                caughtErrors: <span class="string">'none'</span>,</span><br><span class="line">                ignoreRestSiblings: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 变量必须先定义后使用</span></span><br><span class="line"><span class="comment">         * @category Variables</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-use-before-define'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                functions: <span class="literal">false</span>,</span><br><span class="line">                classes: <span class="literal">false</span>,</span><br><span class="line">                variables: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * callback 之后必须立即 return</span></span><br><span class="line"><span class="comment">         * @category Node.js and CommonJS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'callback-return'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * require 必须在全局作用域下</span></span><br><span class="line"><span class="comment">         * @category Node.js and CommonJS</span></span><br><span class="line"><span class="comment">         * @reason 条件加载很常见</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'global-require'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * callback 中的 error 必须被处理</span></span><br><span class="line"><span class="comment">         * @category Node.js and CommonJS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'handle-callback-err'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止直接使用 Buffer</span></span><br><span class="line"><span class="comment">         * @category Node.js and CommonJS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-buffer-constructor'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 相同类型的 require 必须放在一起</span></span><br><span class="line"><span class="comment">         * @category Node.js and CommonJS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-mixed-requires'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止直接 new require('foo')</span></span><br><span class="line"><span class="comment">         * @category Node.js and CommonJS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-new-require'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止对 __dirname 或 __filename 使用字符串连接</span></span><br><span class="line"><span class="comment">         * @category Node.js and CommonJS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-path-concat'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 process.env.NODE_ENV</span></span><br><span class="line"><span class="comment">         * @category Node.js and CommonJS</span></span><br><span class="line"><span class="comment">         * @reason 使用很常见</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-process-env'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 process.exit(0)</span></span><br><span class="line"><span class="comment">         * @category Node.js and CommonJS</span></span><br><span class="line"><span class="comment">         * @reason 使用很常见</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-process-exit'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用指定的模块</span></span><br><span class="line"><span class="comment">         * @category Node.js and CommonJS</span></span><br><span class="line"><span class="comment">         * @reason 它用于限制某个具体的模块不能使用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-restricted-modules'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 node 中的同步的方法，比如 fs.readFileSync</span></span><br><span class="line"><span class="comment">         * @category Node.js and CommonJS</span></span><br><span class="line"><span class="comment">         * @reason 使用很常见</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-sync'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 变量名必须是 camelcase 风格的</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 很多 api 或文件名都不是 camelcase</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        camelcase: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 注释的首字母必须大写</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'capitalized-comments'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制 this 的别名</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'consistent-this'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 函数赋值给变量的时候，函数名必须与变量名一致</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'func-name-matching'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            <span class="string">'always'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                includeCommonJSModuleExports: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 函数必须有名字</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'func-names'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必须只使用函数声明或只使用函数表达式</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'func-style'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用指定的标识符</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 它用于限制某个具体的标识符不能使用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'id-blacklist'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制变量名长度</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 没必要限制变量名长度</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'id-length'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制变量名必须匹配指定的正则表达式</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 没必要限制变量名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'id-match'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 单行注释必须写在上一行</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'line-comment-position'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 类的成员之间是否需要空行</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 有时为了紧凑需要挨在一起，有时为了可读性需要空一行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'lines-between-class-members'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 代码块嵌套的深度禁止超过 5 层</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'max-depth'</span>: [<span class="string">'error'</span>, <span class="number">5</span>],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制一个文件最多的行数</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'max-lines'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制函数块中的代码行数</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'max-lines-per-function'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 回调函数嵌套禁止超过 3 层，多了请用 async await 替代</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'max-nested-callbacks'</span>: [<span class="string">'error'</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 函数的参数禁止超过 7 个</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'max-params'</span>: [<span class="string">'error'</span>, <span class="number">7</span>],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制函数块中的语句数量</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'max-statements'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制一行中的语句数量</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'max-statements-per-line'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 约束多行注释的格式</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 能写注释已经不容易了，不需要限制太多</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'multiline-comment-style'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * new 后面的类名必须首字母大写</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'new-cap'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                newIsCap: <span class="literal">true</span>,</span><br><span class="line">                capIsNew: <span class="literal">false</span>,</span><br><span class="line">                properties: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 Array 构造函数</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-array-constructor'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用位运算</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 位运算很常见</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-bitwise'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 continue</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason continue 很常用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-continue'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在代码后添加内联注释</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 内联注释很常用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-inline-comments'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止 else 中只有一个单独的 if</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 单独的 if 可以把逻辑表达的更清楚</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-lonely-if'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止连续赋值，比如 a = b = c = 5</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-multi-assign'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止 if 里面有否定的表达式</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 否定的表达式可以把逻辑表达的更清楚</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-negated-condition'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用嵌套的三元表达式，比如 a ? b : c ? d : e</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-nested-ternary'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止直接 new Object</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-new-object'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 ++ 或 --</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-plusplus'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用特定的语法</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 它用于限制某个具体的语法不能使用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-restricted-syntax'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用三元表达式</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 三元表达式很常用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-ternary'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止变量名出现下划线</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 下划线在变量名中很常用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-underscore-dangle'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必须使用 !a 替代 a ? false : true</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         * @reason 后者表达的更清晰</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-unneeded-ternary'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止变量申明时用逗号一次申明多个</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'one-var'</span>: [<span class="string">'error'</span>, <span class="string">'never'</span>],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必须使用 x = x + y 而不是 x += y</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'operator-assignment'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制语句之间的空行规则，比如变量定义完之后必须要空行</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'padding-line-between-statements'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用 ... 而不是 Object.assign</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'prefer-object-spread'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对象字面量的键名必须排好序</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'sort-keys'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 变量申明必须排好序</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'sort-vars'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 注释的斜线或 * 后必须有空格</span></span><br><span class="line"><span class="comment">         * @category Stylistic Issues</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'spaced-comment'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            <span class="string">'always'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                block: &#123;</span><br><span class="line">                    exceptions: [<span class="string">'*'</span>],</span><br><span class="line">                    balanced: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * constructor 中必须有 super</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'constructor-super'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止对定义过的 class 重新赋值</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-class-assign'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止对使用 const 定义的常量重新赋值</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-const-assign'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止重复定义类</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-dupe-class-members'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止重复导入模块</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-duplicate-imports'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 new 来生成 Symbol</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-new-symbol'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止导入指定的模块</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         * @reason 它用于限制某个具体的模块不能使用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-restricted-imports'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 super 被调用之前使用 this 或 super</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-this-before-super'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止出现没必要的计算键名，比如 let a = &#123; ['0']: 0 &#125;;</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-useless-computed-key'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止出现没必要的 constructor，比如 constructor(value) &#123; super(value) &#125;</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-useless-constructor'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止解构赋值时出现同样名字的的重命名，比如 let &#123; foo: foo &#125; = bar;</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-useless-rename'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用 var</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'no-var'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必须使用 a = &#123;b&#125; 而不是 a = &#123;b: b&#125;</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         * @reason 没必要强制要求</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'object-shorthand'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 申明后不再被修改的变量必须使用 const 来申明</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         * @reason 没必要强制要求</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'prefer-const'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必须使用解构赋值</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'prefer-destructuring'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必须使用 0b11111011 而不是 parseInt('111110111', 2)</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         * @reason 没必要强制要求</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'prefer-numeric-literals'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必须使用 ...args 而不是 arguments</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         * @reason 没必要强制要求</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'prefer-rest-params'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必须使用 ... 而不是 apply，比如 foo(...args)</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         * @reason apply 很常用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'prefer-spread'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必须使用模版字符串而不是字符串连接</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         * @reason 字符串连接很常用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'prefer-template'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * generator 函数内必须有 yield</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'require-yield'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 导入必须按规则排序</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         * @reason 没必要强制要求</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'sort-imports'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建 Symbol 时必须传入参数</span></span><br><span class="line"><span class="comment">         * @category ECMAScript 6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'symbol-description'</span>: <span class="string">'error'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>VUE</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    parser: <span class="string">'vue-eslint-parser'</span>,</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">        <span class="comment">// 设置 js 的解析器为 babel-eslint</span></span><br><span class="line">        <span class="comment">// https://github.com/mysticatea/vue-eslint-parser#-options</span></span><br><span class="line">        parser: <span class="string">'babel-eslint'</span>,</span><br><span class="line">        ecmaVersion: <span class="number">2019</span>,</span><br><span class="line">        <span class="comment">// ECMAScript modules 模式</span></span><br><span class="line">        sourceType: <span class="string">'module'</span>,</span><br><span class="line">        ecmaFeatures: &#123;</span><br><span class="line">            <span class="comment">// 不允许 return 语句出现在 global 环境下</span></span><br><span class="line">            globalReturn: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// 开启全局 script 模式</span></span><br><span class="line">            impliedStrict: <span class="literal">true</span>,</span><br><span class="line">            jsx: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 即使没有 babelrc 配置文件，也使用 babel-eslint 来解析</span></span><br><span class="line">        requireConfigFile: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 仅允许 import export 语句出现在模块的顶层</span></span><br><span class="line">        allowImportExportEverywhere: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [<span class="string">'vue'</span>],</span><br><span class="line">    rules: &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 支持在模版中使用 eslint-disable-next-line 等注释</span></span><br><span class="line"><span class="comment">         * @category Enabling Correct ESLint Parsing</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/comment-directive'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 定义了的 jsx element 必须使用</span></span><br><span class="line"><span class="comment">         * @category Enabling Correct ESLint Parsing</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/jsx-uses-vars'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 计算属性禁止包含异步方法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-async-in-computed-properties'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止重复的二级键名</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-dupe-keys'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止出现重复的属性</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-duplicate-attributes'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止出现语法错误</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-parsing-error'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止覆盖保留字</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-reserved-keys'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 组件的 data 属性的值必须是一个函数</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-shared-component-data'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在计算属性中对属性修改</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-side-effects-in-computed-properties'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止 &lt;template&gt; 使用 key 属性</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-template-key'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 &lt;textarea&gt; 中出现 &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-textarea-mustache'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止定义在 components 中的组件未使用</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-unused-components'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止模版中定义的变量未使用</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-unused-vars'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在同一个元素上使用 v-if 和 v-for 指令</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-use-v-if-with-v-for'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;component&gt; 必须有 v-bind:is</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/require-component-is'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * props 的取值必须是构造函数</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/require-prop-type-constructor'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * render 函数必须有返回值</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/require-render-return'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-for 指令的元素必须有 v-bind:key</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/require-v-for-key'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * prop 的默认值必须匹配它的类型</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/require-valid-default-prop'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 计算属性必须有返回值</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/return-in-computed-property'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 当一个节点上出现两个 v-on:click 时，其中一个必须为 exact</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/use-v-on-exact'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * template 的根节点必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-template-root'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-bind 指令必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-v-bind'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-cloak 指令必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-v-cloak'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-else 指令必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-v-else'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-else-if 指令必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-v-else-if'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-for 指令必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-v-for'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-html 指令必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-v-html'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-if 指令必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-v-if'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-model 指令必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-v-model'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-on 指令必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-v-on'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-once 指令必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-v-once'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-pre 指令必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-v-pre'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-show 指令必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-v-show'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * v-text 指令必须合法</span></span><br><span class="line"><span class="comment">         * @category Error Prevention</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/valid-v-text'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制自定义组件的属性风格</span></span><br><span class="line"><span class="comment">         * @category Improving Readability</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/attribute-hyphenation'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制组件的 name 属性的值的风格</span></span><br><span class="line"><span class="comment">         * @category Improving Readability</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/name-property-casing'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 模版中的变量名禁止与前一个作用域重名</span></span><br><span class="line"><span class="comment">         * @category Improving Readability</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-template-shadow'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * props 必须用驼峰式</span></span><br><span class="line"><span class="comment">         * @category Improving Readability</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/prop-name-casing'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * props 如果不是 required 的字段，必须有默认值</span></span><br><span class="line"><span class="comment">         * @category Improving Readability</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/require-default-prop'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * prop 必须有类型限制</span></span><br><span class="line"><span class="comment">         * @category Improving Readability</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/require-prop-types'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制 v-bind 的风格</span></span><br><span class="line"><span class="comment">         * @category Improving Readability</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/v-bind-style'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制 v-on 的风格</span></span><br><span class="line"><span class="comment">         * @category Improving Readability</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/v-on-style'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 标签属性必须按规则排序</span></span><br><span class="line"><span class="comment">         * @category Minimizing Arbitrary Choices and Cognitive Overhead</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/attributes-order'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁用 v-html</span></span><br><span class="line"><span class="comment">         * @category Minimizing Arbitrary Choices and Cognitive Overhead</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-v-html'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 组件的属性必须为一定的顺序</span></span><br><span class="line"><span class="comment">         * @category Minimizing Arbitrary Choices and Cognitive Overhead</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/order-in-components'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在模版中用 this</span></span><br><span class="line"><span class="comment">         * @category Minimizing Arbitrary Choices and Cognitive Overhead</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/this-in-template'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 变量名必须是 camelcase 风格的</span></span><br><span class="line"><span class="comment">         * @category Uncategorized</span></span><br><span class="line"><span class="comment">         * @reason 很多 api 或文件名都不是 camelcase</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/camelcase'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对象的最后一个属性末尾必须有逗号</span></span><br><span class="line"><span class="comment">         * @category Uncategorized</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/comma-dangle'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 必须使用 === 或 !==，禁止使用 == 或 !=</span></span><br><span class="line"><span class="comment">         * @category Uncategorized</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/eqeqeq'</span>: [<span class="string">'error'</span>, <span class="string">'always'</span>],</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 组件名称必须和文件名一致</span></span><br><span class="line"><span class="comment">         * @category Uncategorized</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/match-component-file-name'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止给布尔值 props 添加默认值</span></span><br><span class="line"><span class="comment">         * @category Uncategorized</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-boolean-default'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止使用特定的语法</span></span><br><span class="line"><span class="comment">         * @category Uncategorized</span></span><br><span class="line"><span class="comment">         * @reason 它用于限制某个具体的语法不能使用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/no-restricted-syntax'</span>: <span class="string">'off'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止手动 export default</span></span><br><span class="line"><span class="comment">         * @category Uncateg![f4f1ea73165f6d9a15adb99b02ed7cc4.png](en-resource://database/1004:1)</span></span><br><span class="line"><span class="comment">         orized</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/require-direct-export'</span>: <span class="string">'error'</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 禁止在 v-on 的值中调用函数</span></span><br><span class="line"><span class="comment">         * @category Uncategorized</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="string">'vue/v-on-function-call'</span>: <span class="string">'error'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ESLint&quot;&gt;&lt;a href=&quot;#ESLint&quot; class=&quot;headerlink&quot; title=&quot;ESLint&quot;&gt;&lt;/a&gt;ESLint&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;ESLint&lt;/strong&gt;是一个语法规则和代码风格的检查工具。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;1、由于&lt;strong&gt;javascript&lt;/strong&gt;是一门弱语言，代码规范不严格，会造成一些问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Eslint" scheme="https://yuwangi.github.io/tags/Eslint/"/>
    
  </entry>
  
  <entry>
    <title>VSCode配置</title>
    <link href="https://yuwangi.github.io//articles/VSCode%E9%85%8D%E7%BD%AE.html"/>
    <id>https://yuwangi.github.io//articles/VSCode配置.html</id>
    <published>2019-10-08T06:32:38.000Z</published>
    <updated>2019-10-11T07:21:38.021Z</updated>
    
    <content type="html"><![CDATA[<p>VSCode 作为如今最受欢迎的编辑器，为了它的高效性，需要搭配很多插件来使用</p><h3 id="配置说明详解"><a href="#配置说明详解" class="headerlink" title="配置说明详解"></a>配置说明详解</h3><p><strong>editor</strong>是针对 vscode 的风格设置<br>例如 <strong>tabSize</strong>：一个 tab 等于 2 个空格，行高为 24px</p><p><strong>search.exclude</strong> 配置 vscode 中项目中的哪些地方被排除搜索,避免你每次搜索结果中都有一大堆无关内容</p><p><strong>files.associations</strong> 配置文件关联</p><a id="more"></a><p><strong>sync</strong>是用于同步 vscode 配置使用，不用每一次换个电脑都要复制一次配置，避免丢失或者改动，保持一致！</p><p><strong>vetur</strong>和<strong>prettier</strong>和<strong>stylus</strong>是用于 Vue 开发时的代码格式化，代码提示.</p><p><strong>eslint</strong> 是用于代码格式化代码时，选择用自己的格式化规则或者标准规则，<strong>prettier</strong>规则等</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><h3 id="Atom-One-Dark-Theme"><a href="#Atom-One-Dark-Theme" class="headerlink" title="Atom One Dark Theme"></a>Atom One Dark Theme</h3><p>主题</p><h3 id="Chinese-Simplified-Language-Pack-for-Visual-Studio-Code"><a href="#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="Chinese (Simplified) Language Pack for Visual Studio Code"></a>Chinese (Simplified) Language Pack for Visual Studio Code</h3><p>适用于 VS Code 的中文（简体）语言包</p><h2 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a>Prettier - Code formatter</h2><p>用于 Visual Studio 代码的更漂亮的格式化程序</p><h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p>语法规则和代码风格的检查工具</p><h2 id="indent-rainbow"><a href="#indent-rainbow" class="headerlink" title="indent-rainbow"></a>indent-rainbow</h2><p>凸显缩进，让你的缩进一目了然</p><h2 id="Git-History"><a href="#Git-History" class="headerlink" title="Git History"></a>Git History</h2><p>git 提交历史</p><h2 id="GitLens"><a href="#GitLens" class="headerlink" title="GitLens"></a>GitLens</h2><p>在代码中显示每一行代码的提交历史</p><h2 id="Vetur"><a href="#Vetur" class="headerlink" title="Vetur"></a>Vetur</h2><p>添加对.vue 后缀文件的快速书写支持。</p><h2 id="View-In-Browser"><a href="#View-In-Browser" class="headerlink" title="View In Browser"></a>View In Browser</h2><p>迅速通过浏览器打开 html 文件</p><h2 id="markdownlint"><a href="#markdownlint" class="headerlink" title="markdownlint"></a>markdownlint</h2><p>书写 md 文件的预览插件</p><h2 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a>Path Intellisense</h2><p>路径识别苦战，比如书写图片路径时。遗憾就是，对 webpack 项目中的路径别名无法扩展</p><h2 id="Document-This"><a href="#Document-This" class="headerlink" title="Document This"></a>Document This</h2><p>快速生成注释，注意只对类和函数有效。快捷键 <strong>Ctrl+Alt+D</strong></p><h2 id="vscode-自定义配置"><a href="#vscode-自定义配置" class="headerlink" title="vscode 自定义配置"></a>vscode 自定义配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"workbench.colorTheme"</span>: <span class="string">"Atom One Dark"</span>,<span class="comment">//主题</span></span><br><span class="line">    <span class="string">"editor.renderIndentGuides"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"search.location"</span>: <span class="string">"panel"</span>,<span class="comment">//搜索模块放到下方菜单</span></span><br><span class="line">    <span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,<span class="comment">//保存代码自动eslint格式化</span></span><br><span class="line">    <span class="string">"eslint.enable"</span>: <span class="literal">true</span>,<span class="comment">//是否开启eslint</span></span><br><span class="line">    <span class="string">"editor.formatOnSave"</span>: <span class="literal">true</span>,<span class="comment">//保存自动格式化</span></span><br><span class="line">    <span class="string">"eslint.validate"</span>: [<span class="comment">//eslint 校验配置</span></span><br><span class="line">        <span class="string">"javascript"</span>,</span><br><span class="line">        <span class="string">"javascriptreact"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"language"</span>: <span class="string">"html"</span>,</span><br><span class="line">            <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">            <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"files.associations"</span>: &#123;</span><br><span class="line">        <span class="string">"*.cjson"</span>: <span class="string">"jsonc"</span>,</span><br><span class="line">        <span class="string">"*.wxss"</span>: <span class="string">"css"</span>,</span><br><span class="line">        <span class="string">"*.wxs"</span>: <span class="string">"javascript"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"vetur.format.defaultFormatter.html"</span>: <span class="string">"prettier"</span>,<span class="comment">//prettier格式化代码</span></span><br><span class="line">    <span class="string">"emmet.includeLanguages"</span>: &#123;</span><br><span class="line">        <span class="string">"wxml"</span>: <span class="string">"html"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"minapp-vscode.disableAutoConfig"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"vsicons.dontShowNewVersionMessage"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"editor.fontSize"</span>: <span class="number">16</span>,<span class="comment">//文字大小</span></span><br><span class="line">    <span class="string">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Program Files\\Git\\bin\\bash.exe"</span>,</span><br><span class="line">    <span class="string">"[javascript]"</span>: &#123;</span><br><span class="line">        <span class="string">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"eslint.alwaysShowStatus"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VSCode 作为如今最受欢迎的编辑器，为了它的高效性，需要搭配很多插件来使用&lt;/p&gt;
&lt;h3 id=&quot;配置说明详解&quot;&gt;&lt;a href=&quot;#配置说明详解&quot; class=&quot;headerlink&quot; title=&quot;配置说明详解&quot;&gt;&lt;/a&gt;配置说明详解&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;editor&lt;/strong&gt;是针对 vscode 的风格设置&lt;br&gt;例如 &lt;strong&gt;tabSize&lt;/strong&gt;：一个 tab 等于 2 个空格，行高为 24px&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;search.exclude&lt;/strong&gt; 配置 vscode 中项目中的哪些地方被排除搜索,避免你每次搜索结果中都有一大堆无关内容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;files.associations&lt;/strong&gt; 配置文件关联&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="VSCode" scheme="https://yuwangi.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>Mock自定义配置</title>
    <link href="https://yuwangi.github.io//articles/Mock%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE-1.html"/>
    <id>https://yuwangi.github.io//articles/Mock自定义配置-1.html</id>
    <published>2019-10-08T02:32:21.000Z</published>
    <updated>2019-10-16T08:25:05.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要Mock"><a href="#为什么需要Mock" class="headerlink" title="为什么需要Mock"></a>为什么需要Mock</h2><p><img src="/images/56846851486484.png" alt="images/20190930145233.jpg"></p><p>这样的场景，相信大家会觉得似曾相识。</p><p>为此，我们就需要使用一些工具来帮助我们将业务单元之间尽量解耦，它就是<strong>Mock</strong></p><a id="more"></a><h2 id="实现Mock"><a href="#实现Mock" class="headerlink" title="实现Mock"></a>实现Mock</h2><h3 id="古代"><a href="#古代" class="headerlink" title="古代"></a>古代</h3><p>没有出现Mock前，为了能模拟数据，一般屏蔽请求代码，然后写死数据，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// this.$http.get("/maps/aoi_user_search/").then(</span></span><br><span class="line"><span class="comment">//   function(res) &#123;</span></span><br><span class="line"><span class="comment">//     setData(res);</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   function(res) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(res.status);</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// );</span></span><br><span class="line"><span class="keyword">let</span> res=&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line">setData(res);</span><br></pre></td></tr></table></figure><p>这种方式很简单，起码当初就照这个方式继续开发了，虽然后续接口有数据，改起来很麻烦。但是也会常常遇到忘记把模拟数据移除，导致实际使用的时候一直是假数据，而非真实数据，为此出现过多次。所以为了解决这个问题，就用到了Mock。</p><h3 id="近代"><a href="#近代" class="headerlink" title="近代"></a>近代</h3><p>在这个时候，我们就拥有了MockJS,通过使用MockJS我们能根据模板和规则生成复杂的接口数据，而无需我们自己动手去书写，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//apis</span></span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'../api/index'</span>;</span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">'aa'</span>:<span class="string">'11'</span>, <span class="string">'bb'</span>:<span class="string">'22'</span>, <span class="string">'cc'</span>:<span class="string">'33'</span>, <span class="string">'dd'</span>:<span class="string">'44'</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getApiMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(Mock.mock(<span class="string">'http://test.com'</span>, &#123;</span><br><span class="line">          <span class="string">"user|1-3"</span>: [&#123;   <span class="comment">// 随机生成1到3个数组元素</span></span><br><span class="line">              <span class="string">'name'</span>: <span class="string">'@cname'</span>,  <span class="comment">// 中文名称</span></span><br><span class="line">              <span class="string">'id|+1'</span>: <span class="number">88</span>,    <span class="comment">// 属性值自动加 1，初始值为88</span></span><br><span class="line">              <span class="string">'age|18-28'</span>: <span class="number">0</span>,   <span class="comment">// 18至28以内随机整数, 0只是用来确定类型</span></span><br><span class="line">              <span class="string">'birthday'</span>: <span class="string">'@date("yyyy-MM-dd")'</span>,  <span class="comment">// 日期</span></span><br><span class="line">              <span class="string">'city'</span>: <span class="string">'@city(true)'</span>,   <span class="comment">// 中国城市</span></span><br><span class="line">              <span class="string">'color'</span>: <span class="string">'@color'</span>,  <span class="comment">// 16进制颜色</span></span><br><span class="line">              <span class="string">'isMale|1'</span>: <span class="literal">true</span>,  <span class="comment">// 布尔值</span></span><br><span class="line">              <span class="string">'isFat|1-2'</span>: <span class="literal">true</span>,  <span class="comment">// true的概率是1/3</span></span><br><span class="line">              <span class="string">'fromObj|2'</span>: obj,  <span class="comment">// 从obj对象中随机获取2个属性</span></span><br><span class="line">              <span class="string">'fromObj2|1-3'</span>: obj,  <span class="comment">// 从obj对象中随机获取1至3个属性</span></span><br><span class="line">              <span class="string">'brother|1'</span>: [<span class="string">'jack'</span>, <span class="string">'jim'</span>], <span class="comment">// 随机选取 1 个元素</span></span><br><span class="line">              <span class="string">'sister|+1'</span>: [<span class="string">'jack'</span>, <span class="string">'jim'</span>, <span class="string">'lily'</span>], <span class="comment">// array中顺序选取元素作为结果</span></span><br><span class="line">              <span class="string">'friends|2'</span>: [<span class="string">'jack'</span>, <span class="string">'jim'</span>] <span class="comment">// 重复2次属性值生成一个新数组</span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">              <span class="string">'gf'</span>: <span class="string">'@cname'</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// return api.getApiMessage();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*通过模板 生成的数据格式</span></span><br><span class="line"><span class="comment">*&#123;</span></span><br><span class="line"><span class="comment">*  "user": [</span></span><br><span class="line"><span class="comment">*    &#123;</span></span><br><span class="line"><span class="comment">*      "name": "董静",</span></span><br><span class="line"><span class="comment">*      "id": 88,</span></span><br><span class="line"><span class="comment">*      "age": 25,</span></span><br><span class="line"><span class="comment">*      "birthday": "2015-04-01",</span></span><br><span class="line"><span class="comment">*      "city": "湖南省 怀化市",</span></span><br><span class="line"><span class="comment">*      "color": "#c0f279",</span></span><br><span class="line"><span class="comment">*      "isMale": false,</span></span><br><span class="line"><span class="comment">*      "isFat": false,</span></span><br><span class="line"><span class="comment">*      "fromObj": &#123;</span></span><br><span class="line"><span class="comment">*          "dd": "44",</span></span><br><span class="line"><span class="comment">*          "aa": "11"</span></span><br><span class="line"><span class="comment">*      &#125;,</span></span><br><span class="line"><span class="comment">*      "fromObj2": &#123;</span></span><br><span class="line"><span class="comment">*          "bb": "22",</span></span><br><span class="line"><span class="comment">*          "cc": "33"</span></span><br><span class="line"><span class="comment">*      &#125;,</span></span><br><span class="line"><span class="comment">*      "brother": "jack",</span></span><br><span class="line"><span class="comment">*      "sister": "jack",</span></span><br><span class="line"><span class="comment">*      "friends": [</span></span><br><span class="line"><span class="comment">*          "jack",</span></span><br><span class="line"><span class="comment">*          "jim",</span></span><br><span class="line"><span class="comment">*          "jack",</span></span><br><span class="line"><span class="comment">*          "jim"</span></span><br><span class="line"><span class="comment">*      ]</span></span><br><span class="line"><span class="comment">*    &#125;,</span></span><br><span class="line"><span class="comment">*    &#123;</span></span><br><span class="line"><span class="comment">*      "gf": "田杰"</span></span><br><span class="line"><span class="comment">*    &#125;</span></span><br><span class="line"><span class="comment">*  ]</span></span><br><span class="line"><span class="comment">*&#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>这种方式也只是方便我们造假数据，而并不能方便的抽离出我们的代码,而且数据也不足够真实。<br>有关mockjs相关语法参考<code>http://mockjs.com/examples.html#String</code><br>这个时候想一下，我们Mock数据的需求：</p><ul><li>模拟数据</li><li>模拟数据与代码完全分离</li><li>通过一些配置，可以只获取部分Mock数据，最好足够真实</li></ul><p>首先，如果我们想要把代码跟数据完全分离，我们必须想办法在请求的时候做一些操作，让本应请求正式数据的接口去请求Mock数据，做一个请求拦截，请求拦截的方式有两种：</p><ul><li>一种是修改请求的链接，来达到Mock数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.vue</span></span><br><span class="line">service.getBuildingListByPage(&#123;</span><br><span class="line">    ...params,</span><br><span class="line">    mock:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//server.js</span></span><br><span class="line">getBuildingListByPage: <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> baseApi=env.baseApi</span><br><span class="line">    <span class="keyword">if</span>(params.mock)&#123;</span><br><span class="line">      baseApi=<span class="string">'127.0.0.1:8080'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fly.get(</span><br><span class="line">      env.baseApi + <span class="string">"g/bam/c/quote/building-list"</span>,</span><br><span class="line">      params</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>此方法需自己搭一个node服务，然后写一些接口返回数据。</p><ul><li>另外一种就是检测出Mock，直接从mock文件中取出数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.vue</span></span><br><span class="line">service.getBuildingListByPage(&#123;</span><br><span class="line">    ...params,</span><br><span class="line">    mock:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//mock/db.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    getBuildingListByPage: &#123;</span><br><span class="line">        err_code: <span class="number">0</span>,</span><br><span class="line">        err_msg: <span class="string">"ok"</span>,</span><br><span class="line">        data: [</span><br><span class="line">          &#123;</span><br><span class="line">            time: <span class="string">"2019-05-29 00:00:00"</span>,</span><br><span class="line">            aging: <span class="number">0</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            time: <span class="string">"2019-05-29 01:00:00"</span>,</span><br><span class="line">            aging: <span class="number">16</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">import</span> mockData <span class="keyword">from</span> <span class="string">'mock/db.js'</span>;</span><br><span class="line">getBuildingListByPage: <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> baseApi=env.baseApi</span><br><span class="line">    <span class="keyword">if</span>(params.mock)&#123;</span><br><span class="line">      <span class="keyword">return</span> mockData[getBuildingListByPage]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fly.get(</span><br><span class="line">      env.baseApi + <span class="string">"g/building-list"</span>,</span><br><span class="line">      params</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>乍一看好像第二种方式似乎更简单，事实也确实如此。但是这样用起来还不是很方便，而且接口多了，Mock数据文件会很大，需要做一个拆分。所以就有了后来的配置。</p><h3 id="现代"><a href="#现代" class="headerlink" title="现代"></a>现代</h3><p>tips:现在的配置基于<strong>webpack</strong>的<strong>devServer</strong><br>在webpack中做转发代理，所有请求会先过before这个回调函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BaseConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apiMocker = <span class="built_in">require</span>(<span class="string">'mocker-api'</span>);</span><br><span class="line"><span class="comment">//webpack配置</span></span><br><span class="line">mode: <span class="string">'development'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    port: <span class="number">9001</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    historyApiFallback: &#123;</span><br><span class="line">      rewrites: [&#123;</span><br><span class="line">        <span class="keyword">from</span>: <span class="regexp">/.*/g</span>,</span><br><span class="line">        to: <span class="string">'/www/view/index.html'</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://10.12.67.192:8091/'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    before(app) &#123;</span><br><span class="line">      <span class="comment">//https://www.webpackjs.com/configuration/dev-server/#devserver-before</span></span><br><span class="line">      apiMocker(app, path.resolve(__dirname, <span class="string">'../mock/index.js'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>Mock资源文件<br><img src="/images/52646541651634.png" alt="ce8f8163afd3df184358e55c9ef5011e.png"><br>JSON文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"err_code"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"err_msg"</span>: <span class="string">"ok"</span>,</span><br><span class="line">  <span class="string">"mock"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"poi"</span>: &#123;</span><br><span class="line">      <span class="string">"z_id"</span>: <span class="string">"111111111111"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"中国技术交易大厦大厦大厦"</span>,</span><br><span class="line">      <span class="string">"province"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"city"</span>: <span class="string">"北京市"</span>,</span><br><span class="line">      <span class="string">"district"</span>: <span class="string">"海淀区"</span>,</span><br><span class="line">      <span class="string">"longitude"</span>: <span class="number">116.307499005</span>,</span><br><span class="line">      <span class="string">"latitude"</span>: <span class="number">39.111</span>,</span><br><span class="line">      <span class="string">"addr"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"category"</span>: <span class="string">"房产小区:商务楼宇"</span>,</span><br><span class="line">      <span class="string">"category_code"</span>: <span class="number">281200</span>,</span><br><span class="line">      <span class="string">"expiration_label"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">"phone"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mockjs配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> delay = <span class="built_in">require</span>(<span class="string">'mocker-api/utils/delay'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> dirCur = fs.readdirSync(__dirname);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MOCK = process.env.MOCK || process.env.mock || process.env.Mock;</span><br><span class="line"><span class="keyword">const</span> apiList = &#123;&#125;;</span><br><span class="line">dirCur.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> basename = path.basename(item, <span class="string">'.json'</span>);</span><br><span class="line">  <span class="keyword">if</span> (basename !== <span class="string">'index.js'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> apiName =</span><br><span class="line">      <span class="string">'POST /api/'</span> +</span><br><span class="line">      basename.replace(<span class="regexp">/[A-Z]/g</span>, math =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'/'</span> + math.toLowerCase();</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">let</span> apiData = fs.readFileSync(path.join(__dirname, item), <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      apiData = <span class="built_in">JSON</span>.parse(apiData);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(item, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (MOCK || apiData.mock) &#123;</span><br><span class="line">      apiList[apiName] = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Mock API:'</span> + req.path);</span><br><span class="line">        res.json(apiData);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 'GET /api/edit/apply': (req, res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     const &#123; owner, repo, ref &#125; = req.params;</span></span><br><span class="line"><span class="comment">//     return res.json(&#123;</span></span><br><span class="line"><span class="comment">//       id: 1,</span></span><br><span class="line"><span class="comment">//       owner, repo, ref,</span></span><br><span class="line"><span class="comment">//       path: req.params[0]</span></span><br><span class="line"><span class="comment">//     &#125;);</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// const proxy = loadData(&#123;</span></span><br><span class="line"><span class="comment">//   'POST /api/edit/apply': './editApply',</span></span><br><span class="line"><span class="comment">//   'POST /api/verify/apply': './verifyApply',</span></span><br><span class="line"><span class="comment">//   'POST /api/accept/apply': './editApply',</span></span><br><span class="line"><span class="comment">//   'POST /api/edit/submit': './editSubmit',</span></span><br><span class="line"><span class="comment">//   'POST /api/verify/submit': './editSubmit',</span></span><br><span class="line"><span class="comment">//   'POST /api/accept/submit': './editSubmit',</span></span><br><span class="line"><span class="comment">//   'POST /api/rawore/get': './raworeGet',</span></span><br><span class="line"><span class="comment">//   'POST /api/poi/history': './poiHistory',</span></span><br><span class="line"><span class="comment">//   'POST /api/edit/history': './editHistory',</span></span><br><span class="line"><span class="comment">//   'POST /api/verify/history': './editHistory',</span></span><br><span class="line"><span class="comment">//   'POST /api/accept/history': './editHistory',</span></span><br><span class="line"><span class="comment">//   'POST /api/user/get': './userGet',</span></span><br><span class="line"><span class="comment">//   'POST /api/work/history': './historyList',</span></span><br><span class="line"><span class="comment">//   'POST /api/statistic/gainproduct': './gainproduction',</span></span><br><span class="line"><span class="comment">//   'POST /api/statistic/accuracy': './accuracy',</span></span><br><span class="line"><span class="comment">//   'POST /api/statistic/aging': './aging',</span></span><br><span class="line"><span class="comment">//   'POST /api/company/list': './companyList',</span></span><br><span class="line"><span class="comment">//   'POST /api/user/list': './listuser'</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="built_in">module</span>.exports = delay(apiList, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>json文件采取驼峰命名方式，然后通过正则判断大写,替换成/+小写路径，然后用node中的fs读取当前文件夹下所有文件，得到文件列表遍历，读取文件内容，最后判断是否开发模式或是否开启Mock,然后返回数据。</p><p>关于MOCK全部开启,<code>package.json</code>配置：<br><img src="/images/1641651616.png" alt="1641651616"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/adb6ff1df3d6" target="_blank" rel="noopener">https://www.jianshu.com/p/adb6ff1df3d6</a><br><a href="https://www.npmjs.com/package/mocker-api" target="_blank" rel="noopener">https://www.npmjs.com/package/mocker-api</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么需要Mock&quot;&gt;&lt;a href=&quot;#为什么需要Mock&quot; class=&quot;headerlink&quot; title=&quot;为什么需要Mock&quot;&gt;&lt;/a&gt;为什么需要Mock&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/56846851486484.png&quot; alt=&quot;images/20190930145233.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样的场景，相信大家会觉得似曾相识。&lt;/p&gt;
&lt;p&gt;为此，我们就需要使用一些工具来帮助我们将业务单元之间尽量解耦，它就是&lt;strong&gt;Mock&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Mock" scheme="https://yuwangi.github.io/tags/Mock/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yuwangi.github.io//articles/hello-world.html"/>
    <id>https://yuwangi.github.io//articles/hello-world.html</id>
    <published>2019-09-25T06:53:52.588Z</published>
    <updated>2019-10-08T10:11:08.120Z</updated>
    
    <content type="html"><![CDATA[<p>第一篇文章自然要用Hello World开头，写博客就是想把平常用到的东西积累下来。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello World'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一篇文章自然要用Hello World开头，写博客就是想把平常用到的东西积累下来。&lt;/p&gt;
&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hel
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
